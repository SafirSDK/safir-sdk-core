This section contains an API reference describing the Safir WebSocket JSON-RPC interface.

The API is compliant with the JSON-RPC specification 2.0 (http://www.jsonrpc.org/specification), and the transport 
mechanism is WebSockets https://tools.ietf.org/html/rfc6455[rfc6455].
To use the API, connect a WebSocket to the Safir WebSocket server and send the JSON messages defined in this section.
Remember that JSON is case sensitive.

=== Methods
This section describes all methods exposed by the Dob JSON-RPC interface. Methods can be called by clients and
a response with the same id is guaranteed. The id can be either a string or a number. If no id is present the method
will still be executed but the caller will not get any response.

Some parameters have a specified default value. Such parameters can be omitted in a method call and will then adopt their default value.

==== Method: close
Close connection to the Dob.

Returns::
 * `value` - On success the string _OK_ is returned, otherwize an error is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "close", "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: createRequest
Send a entity create request to a handler.

Parameters::
 * `entity` - Entity to create.
 * `instanceId` - Instance id of the new entity. Only allowed if the instanceIdPolicy is _RequestorDecidesInstanceId_
 * `handlerId` - Id of the handler to send the request to. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `isSuccess` - Indicates if the request was successful or not, can be _true_ or _false_.
 * `response` - The response object that inherits from Safir.Dob.Response.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "createRequest", "params": {"entity": {"_DouType": "Safir.Dob.Entity"}, "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"isSuccess": true, "response": {"_DouType": "Safir.Dob.SuccessResponse"}}, "id": 123}
----------------------------

==== Method: deleteAllInstances
Deletes all owned instances.

Parameters::
 * `typeId` - Type of the entities to delete.
 * `handlerId` - Id of the handler. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "deleteAllInstances", "params": {"typeId": "Test.MyEntity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: deleteEntity
Deletes an entity instance in the Dob.

Parameters::
 * `typeId` - Type of the entity to delete.
 * `instanceId` - Instance id of the entity to delete.
 * `handlerId` - Id of the handler. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "deleteEntity", "params": {"typeId": "Test.MyEntity", "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: deleteRequest
Send a request to delete an entity instance.

Parameters::
 * `typeId` - Type of the entity the request is aimed at.
 * `instanceId` - Instance id of the entity to delete.
Returns::
 * `isSuccess` - Indicates if the request was successful or not, can be _true_ or _false_.
 * `response` - The response object that inherits from Safir.Dob.Response.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "deleteRequest", "params": {"typeId": "Test.MyEntity", "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"isSuccess": true, "response": {"_DouType": "Safir.Dob.SuccessResponse"}}, "id": 123}
----------------------------

==== Method: getAllInstanceIds
Get a list of all instance id's that is created of an entity.

Parameters::
 * `typeId` - Type of the entity.
Returns::
 * `list` - A list of instance id's.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "getAllInstanceIds", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": [1, 2], "id": 123}
----------------------------

==== Method: getInstanceIdPolicy
Get the instance id policy for a type and handler.

Parameters::
 * `typeId` - Type of the entity.
 * `handlerId` - Id of the handler. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `value` - A string that can be either _RequestorDecidesInstanceId_ or _HandlerDecidesInstanceId_.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "getInstanceIdPolicy", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "RequestorDecidesInstanceId", "id": 123}
----------------------------

==== Method: getNumberOfInstances
Get the number of existing instances of a type.

Parameters::
 * `typeId` - Type of the entity.
 * `handlerId` - Id of the handler. _([small]*Default:* ALL_HANDLERS)_
 * `includeSubclasses` - Also subscribe for all subclasses to the specified typeId. _([small]*Default:* true)_
Returns::
 * `value` - Number of instances.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "getNumberOfInstances", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": 10, "id": 123}
----------------------------

==== Method: getTypeHierarchy
Get the entire DOU type hierarchy. This method is only allowed if _EnableTypesystemCommands_ is set to _true_ in 
the WebSocket server configuration.

Returns::
 * `object` - An instance of Safir.Websocket.Typesystem.TypeHierarchy

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "getTypeHierarchy", "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Safir.Websocket.Typesystem.TypeHierarchy", "RootClass": {...}}, "id": 123}
----------------------------

==== Method: isCreated
Check if an entity instance exists in the Dob.

Parameters::
 * `typeId` - Type of the entity.
 * `instanceId` - Instance id of the entity.
Returns::
 * `value` - _true_ or _false_.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "isCreated", "params": {"typeId": "Test.MyEntity", "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": true, "id": 123}
----------------------------

==== Method: isOpen
Check if there is an open connection to the Dob.

Returns::
 * `value` - If connected to the Dob _true_ is returned, otherwize _false_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "isOpen", "id": 123}
<-- {"jsonrpc": "2.0", "result": true, "id": 123}
----------------------------

==== Method: open
Opens a connection to the Dob.

Parameters::
 * `connectionName` - Name of the new connection.
 * `context` - Context for connection. _([small]*Default:* 0)_
Returns::
 * `value` - On success the string _OK_ is returned, otherwize an error is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "open", "params": {"connectionName": "foo"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: ping
This method can be used to test a connection. When the Safir WebSocket server receives a ping, it will immediately respond with a "pong".
This message can also be used in those rare cases when the client WebSocket implementation doesn't support the ping opcode. That is a low level
keep alive message that will prevent connectons with low traffic to be disconnected. In that case manual pings can be sent with a low frequent
but periodic timer.

Returns::
 * `value` - If connected the string "pong" is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "ping", "id": "testId"}
<-- {"jsonrpc": "2.0", "result": "pong", "id": "testId"}
----------------------------

==== Method: readEntity
Read current version of an entity in the Dob.

Parameters::
 * `typeId` - Type of the entity to read.
 * `instanceId` - Instance id of the entity to read.
Returns::
 * `object` - The read entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "readEntity", "params": {"typeId": "Test.MyEntity", "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Test.MyEntity", "Val1": "foo"}, "id": 123}
----------------------------

==== Method: registerEntityHandler
Register an entity handler.

Parameters::
 * `typeId` - Entity type to register.
 * `handlerId` - Id of this handler. _([small]*Default:* DEFAULT_HANDLER)_
 * `instanceIdPolicy` - Who decides instance ids. A string that can be either _RequestorDecidesInstanceId_ or _HandlerDecidesInstanceId_. _([small]*Default:* RequestorDecidesInstanceId)_
 * `injectionHandler` - Does the handler handle injections. _([small]*Default:* false)_
 * `pending` - Is this a pending registration _([small]*Default:* false)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "registerEntityHandler", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: registerServiceHandler
Register a service handler.

Parameters::
 * `typeId` - Service type to register.
 * `handlerId` - Id of this handler. _([small]*Default:* DEFAULT_HANDLER)_
 * `pending` - Is this a pending registration _([small]*Default:* false)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "registerServiceHandler", "params": {"typeId": "Safir.Dob.ServiceRequest"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: sendMessage
Send a message.

Parameters::
 * `message` - Message to send.
 * `channelId` - Channel to send on. _([small]*Default:* DEFAULT_CHANNELS)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "sendMessage", "params": {"message": {"_DouType": "Safir.Dob.Message"}}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: serviceRequest
Send a service request to a handler.

Parameters::
 * `service` - Service object.
 * `handlerId` - Id of the handler to send the request to. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `isSuccess` - Indicates if the request was successful or not, can be _true_ or _false_.
 * `response` - The response object that inherits from Safir.Dob.Response.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "serviceRequest", "params": {"service": {"_DouType": "Test.MyService", "SomeValue": 100}}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"isSuccess": true, "response": {"_DouType": "Safir.Dob.SuccessResponse"}}, "id": 123}
----------------------------

==== Method: setEntity
Creates or updates an entity in the Dob. No merge is performed, the entity will look exactly like the one submitted in the
entity parameter. Any members not present will be set to null. 

Parameters::
 * `entity` - Entity to set in the Dob.
 * `instanceId` - Instance id of the entity to set.
 * `handlerId` - Id of the handler. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "setEntity", "params": {"entity": {"_DouType": "Test.MyEntity", "Val1": "foo", "Val2": "bar"}, "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: setEntityChanges
Merge all members that are present in the entity parameter, with the current version of the entity in the Dob.
Only the members that are present in the entity parameter are considered as part of the change. This means that if the 
intention is to change a specific member to null, that member must explicitly be part of the entity parameter with the value null.
Since JSON arrays don't have indices, it limits the possibility to set changes on individual array values.
Hence, if an array is to be changed the entire array should be specified in the call.

Parameters::
 * `entity` - Entity merge into the Dob.
 * `instanceId` - Instance id of the entity to change.
 * `handlerId` - Id of the handler. _([small]*Default:* DEFAULT_HANDLER)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "setEntityChanges", "params": {"entity": {"_DouType": "Test.MyEntity", "Val1": "foo", "Val2": null}, "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: subscribeEntity
Subscribe for entities.

Parameters::
 * `typeId` - Entity type to subscribe for.
 * `instanceId` - Specific instance. Not allowed if `includeSubclasses` also is present. _([small]*Default:* ALL_INSTANCES)_
 * `includeUpdates` - Get notified on updated entity states. _([small]*Default:* true)_
 * `restartSubscription` - Restart subscription to get onNewEntity for all existing instances. _([small]*Default:* true)_
 * `includeSubclasses` - Include subclasses to specified typeId. Not allowed if `instanceId` is present _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "subscribeEntity", "params": {"typeId": "Safir.Dob.Entity", "instanceId": 10}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------


==== Method: subscribeMessage
Subscribe for messages.

Parameters::
 * `typeId` - Name of an existing message type.
 * `channelId` - Channel to subscribe on. _([small]*Default:* ALL_CHANNELS)_
 * `includeSubclasses` - Also subscribe for all subclasses to the specified typeId. _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "subscribeMessage", "params": {"typeId": "Safir.Dob.Message"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: subscribeRegistration
Subscribe for handler registrations of entities and services.

Parameters::
 * `typeId` - Entity or Service type to subscribe for registrations.
 * `handlerId` - Id of the handler of interest. _([small]*Default:* ALL_HANDLERS)_
 * `includeSubclasses` - Also subscribe for registrations of subclasses to specified typeId. _([small]*Default:* true)_
 * `restartSubscription` - Restart subscription to get onRegistered for all existing handlers. _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "subscribeRegistration", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: unregisterHandler
Unregister an entity or service handler.

Parameters::
 * `typeId` - The type to unregister.
 * `handlerId` - Id of the handler to unregister. _([small]*Default:* ALL_HANDLERS)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "unregisterHandler", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: unsubscribeEntity
Subscribe for entities.

Parameters::
 * `typeId` - Entity type to unsubscribe for.
 * `instanceId` - Unsubscribe for specific instance. Not allowed if `includeSubclasses` also is present. _([small]*Default:* ALL_INSTANCES)_
 * `includeSubclasses` - Also unsubscribe for subclasses to specified typeId. Not allowed if `instanceId` is present. _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "unsubscribeEntity", "params": {"typeId": "Safir.Dob.Entity", "instanceId": 10}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: unsubscribeMessage
Unsubscribe for messages.

Parameters::
 * `typeId` - Name of an existing message type.
 * `channelId` - Channel to subscribe on. _([small]*Default:* ALL_CHANNELS)_
 * `includeSubclasses` - Also subscribe for all subclasses to the specified typeId. _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "unsubscribeMessage", "params": {"typeId": "Safir.Dob.Message"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: unsubscribeRegistration
Unsubscribe for handler registrations of entities and services.

Parameters::
 * `typeId` - Entity or Service type to unsubscribe for registrations.
 * `handlerId` - Id of the handler of interest. _([small]*Default:* ALL_HANDLERS)_
 * `includeSubclasses` - Also unsubscribe for registrations of subclasses to specified typeId. _([small]*Default:* true)_
Returns::
 * `value` - On success the string _OK_ is returned.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "unsubscribeRegistration", "params": {"typeId": "Safir.Dob.Entity"}, "id": 123}
<-- {"jsonrpc": "2.0", "result": "OK", "id": 123}
----------------------------

==== Method: updateRequest
Send a entity update request to the registered handler.
Only the members that are present in the entity parameter are considered as part of the update request. This means that if the 
intention is to change a specific member to null, that member must explicitly be part of the entity parameter with the value null.
Since JSON arrays don't have indices, it limits the possibility to send change requests on individual array values.
Hence, if an array is part of an update request the entire array should be specified in the request.  

Parameters::
 * `entity` - Updated version of the entity.
 * `instanceId` - Instance id of the entity to update.
Returns::
 * `isSuccess` - Indicates if the request was successful or not, can be _true_ or _false_.
 * `response` - The response object that inherits from Safir.Dob.Response.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "updateRequest", "params": {"entity": {"_DouType": "Test.MyEntity", "SomeValue": "changedValue"}, "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"isSuccess": true, "response": {"_DouType": "Safir.Dob.SuccessResponse"}}, "id": 123}
----------------------------

=== Notifications
This section describes all notifications sent from server to client when something happens that is not an immediate response
to a method call.

==== Notification: onCompletedRegistration
Called when a pending registration has been completed.

Parameters::
 * `typeId` - Type for which the pending registration has been completed.
 * `handlerId` - The handler id.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onCompletedRegistration", "params": {"typeId": "Test.MyService", "handlerId": -6778878277529052275}}
----------------------------

==== Notification: onDeletedEntity
Deleted entity notification. Subscription response to a subscribeEntity.
The received entity is what the entity state looked like when it was deleted.

Parameters::
 * `instanceId` - The instance id of the entity.
 * `entity` - The updated entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onDeletedEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------

==== Notification: onInitialInjectionsDone
Called when initial injections are done.

Parameters::
 * `typeId` - Type for which the initial injection is done.
 * `handlerId` - The handler id.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onInitialInjectionsDone", "params": {"typeId": "Test.MyEntity", "handlerId": -6778878277529052275}}
----------------------------

==== Notification: onInjectedDeletedEntity
Called when an entity deletetion is injected.

Parameters::
 * `instanceId` - Instance id of the entity.
 * `entity` - The deleted injected entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onInjectedDeletedEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------

==== Notification: onInjectedNewEntity
Called when a new entity is injected.

Parameters::
 * `instanceId` - Instance id of the entity.
 * `entity` - The injected entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onInjectedNewEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------

==== Notification: onInjectedUpdatedEntity
Called when an entity update is injected.

Parameters::
 * `instanceId` - Instance id of the entity.
 * `entity` - The injected entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onInjectedUpdatedEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------

==== Notification: onMessage
New message notification. Subscription response to a subscribeMessage.

Parameters::
 * `channelId` - The channel that the message was sent on.
 * `message` - Received message.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onMessage", "params": {"channelId": 3313918482685577033, "message": {"_DouType": "Safir.Dob.Message"}}}
----------------------------

==== Notification: onNewEntity
New entity notification. Subscription response to a subscribeEntity.

Parameters::
 * `instanceId` - The instance id of the entity.
 * `entity` - The new entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onNewEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------

==== Notification: onNotMessageOverflow
It is meaningful to try to send messages again after an overflow. 

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onNotMessageOverflow"}
----------------------------

==== Notification: onNotRequestOverflow
It is meaningful to try to send requests again after an overflow. 

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onNotRequestOverflow"}
----------------------------

==== Notification: onRegistered
New registration notification. Subscription response to a subscribeRegistrations.

Parameters::
 * `typeId` - Type that has been registered.
 * `handlerId` - The handler id that has been registered.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onRegistered", "params": {"typeId": "Test.MyService", "handlerId": -6778878277529052275}}
----------------------------

==== Notification: onRevokedRegistration
Called when a handler registration has been revoked.

Parameters::
 * `typeId` - Type for which the registration has been revoked.
 * `handlerId` - The handler id.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onRevokedRegistration", "params": {"typeId": "Test.MyService", "handlerId": -6778878277529052275}}
----------------------------

==== Notification: onUnregistered
Removed registration notification. Subscription response to a subscribeRegistrations.

Parameters::
 * `typeId` - Type that has been unregistered.
 * `handlerId` - The handler id that has been unregistered.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onUnregistered", "params": {"typeId": "Test.MyService", "handlerId": -6778878277529052275}}
----------------------------

==== Notification: onUpdatedEntity
Updated entity notification. Subscription response to a subscribeEntity.
The received entity is the complete current state. I.e It does not only contain the changes since last version.

Parameters::
 * `instanceId` - The instance id of the entity.
 * `entity` - The updated entity.

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onUpdatedEntity", "params": {"instanceId": 1, "entity": {"_DouType": "Test.MyEntity"}}}
----------------------------


=== Receive and respond to requests
This section describes all the requests an entity or service handler can receive. It is also described what a valid response must look like.
When a handler (service handler or entity handler) receives a request, that request will always have an _id_ that is a _number_.
The handler is responsible for sending a valid response as fast as possible with the same id as the request.

==== Method: onCreateRequest
Entity handler receives a create request.

Parameters::
 * `handlerId` - The handler that is being requested.
 * `instanceId` - Instance id the requestor wants the handler to create. Only present if the instanceIdPolicy is _RequestorDecidesInstanceId_
 * `entity` - Entity the requestor wants the handler to create.
Response::
 * `object` - An instance of Safir.Dob.Response

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onCreateRequest", "params": {"handlerId": -6778878277529052275, "instanceId": 1, "entity": {"_DouType": "Safir.Dob.Entity"}}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Safir.Dob.SuccessResponse"}, "id": 123}
----------------------------

==== Method: onDeleteRequest
Entity handler receives a delete request.

Parameters::
 * `handlerId` - The handler that is being requested.
 * `typeId` - Type of the entity the requestor want the handler to delete.
 * `instanceId` - Instance id the requestor wants the handler to delete.
Response::
 * `object` - An instance of Safir.Dob.Response

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onDeleteRequest", "params": {"handlerId": -6778878277529052275, "typeId": "Safir.Dob.Entity", "instanceId": 1}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Safir.Dob.SuccessResponse"}, "id": 123}
----------------------------

==== Method: onServiceRequest
Service handler receives service request.

Parameters::
 * `handlerId` - The handler that is being requested.
 * `request` - The Safir.Dob.Service object containing the request.
Response::
 * `object` - An instance of Safir.Dob.Response

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onServiceRequest", "params": {"handlerId": -6778878277529052275, "request": {"_DouType": "Test.MyService"}}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Safir.Dob.SuccessResponse"}, "id": 123}
----------------------------

==== Method: onUpdateRequest
Entity handler receives an update request.

Parameters::
 * `handlerId` - The handler that is being requested.
 * `instanceId` - Instance id the requestor wants the handler to update.
 * `entity` - Entity containing changes that the requestor wants the handler to merge with the current state.
Response::
 * `object` - An instance of Safir.Dob.Response

Example::
----------------------------
--> {"jsonrpc": "2.0", "method": "onUpdateRequest", "params": {"handlerId": -6778878277529052275, "instanceId": 1, "entity": {"_DouType": "Safir.Dob.Entity"}}, "id": 123}
<-- {"jsonrpc": "2.0", "result": {"_DouType": "Safir.Dob.SuccessResponse"}, "id": 123}
----------------------------

=== Errors
If an error occurs the Safir WebSocket server will send an error to the client. The error is sent in place of a response, and if possible the id of the request will be
preserved. However if it is not possible to extract the id, the error will be sent with a null-id. The error messge is specified in the JSON-RPC 2.0 specification.

Besides the predefined error codes, Safir can send the following error codes

Error codes::
 * `SafirNotOpen (100)` - When fail to open a Dob connection. 
 * `SafirOverflow (101)` - Sending requests or messges to fast.
 * `SafirAccessDenied (102)` - Trying to modify an entity without ownership.
 * `SafirGhostExists (103)` - Trying to modify an entity when there is a ghost instance that hasn't been injected.
 * `SafirNotFound (104)` - Calling read or getInstanceIdPolicy on non-existing instance.
 * `SafirIllegalValue (105)` - A parameter was invalid.
 * `SafirSoftwareViolation (106)` - There is a programming error somewhere. For example trying register a global type on a light node.
 * `SafirUnexpectedException (108)` - Unexpected exception occurred.
 * `SafirLowMemoryException (109)` - Operation could not be completed because Dob shared memory is running low.
 
 Example::
----------------------------
--> {"jsonrpc": "2.0", "error": {"code": 100, "message": "SafirNotOpen", "data": "Could not open connection..."}, "id": 123}
----------------------------

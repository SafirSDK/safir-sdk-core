///////
This file is included into the main SUG document, and is located under header level "==="
///////

The Tracer is intended to be used for developer/integration logging inside applications. It should never be used as the sole target for logging errors, since the output can only be viewed by developers. A common way to use trace logging is to log "significant events" or other points of interest, so that the developer can find out what his component is doing when running on a test system or when running in a situation when it is not desirable or possible to halt execution with a debugger.

The interface to the trace logging functionality is a class named +Safir.Application.Tracer+ and a class named +Safir.Application.TracerBackdoor+.

Tracer objects are used to send logs to the Safir Log, and the TracerBackdoor is used to turn the different Tracers on and off. The Tracer class has no Dob dependencies itself, but the TracerBackdoor uses the Backdoor functionality, as described above.

==== How to use

The main goal of the Tracer class is for it to be as easy to use as possible, and that its usage should be as close to the languages own text input/output-syntax as possible. 

1. Instantiate the Tracer class in each of the classes/packages where you want to use trace logging. Each instantiation requires a "prefix" which is used to enable and disable the logging from each tracer instantiation (described below). Several Tracer instances can use the same prefix, and will then all be enabled/disabled by the same command.
2. Log to the tracer-instance (in this example the instance is called "debug"):
 - *C++*
+
[source,{cpp}]
----------------------------
debug << "Testing logging " << myFloat << ", " << myInt << std::endl;
----------------------------

 - *C#*
+
[source,{csharp}]
----------------------------
debug.WriteLine("Testing logging {0}, {1}",myFloat,myInt);
----------------------------

 - *Java*
+
[source,java]
----------------------------
debug.println("Testing logging " + myFloat + ", " + myInt);
----------------------------

3. Call +Safir::Application::TracerBackdoor::Start(connection)+ just after your program has opened its main Dob connection.
4. Call +Safir::Application::TracerBackdoor::Stop()+ when your application is shutting down.
5. Enable and disable the logging by using the "backdoor" command. Send "<prefix> on" to turn on the logging of a prefix (also try "help" to see what prefixes are registered and what their current states are). To do this, type "backdoor -c myconnection myprefix on" in a command line window (if you skip the "-c myconnection" bit all applications in the system will receive the command, which may have undesired consequences).
 - It is possible to turn on/off all prefixes by sending "all on" to your application.
 - It is possible to turn on/off prefixes immediately from the start of an application by setting the environment variable FORCE_LOG to one or several "<prefix>" or "all". This is useful to be able to have logging on by default or for logging the startup behaviour of an application. See <<force_log>> for a few hints on how this feature can be used.
 - Trace log output will be sent to the Safir Log.
 - Log output is also sent to the applications standard output (its console).

===== Expression expansion

The checking of whether a prefix is enabled happens in slightly different ways in the different languages, which means that depending on how you use the logger you may pay for string expansion or you may not.

- In C++ the check is made once for every "<<", but since the check is inlined it can be considered cheap. Floats and suchlike are not expanded into strings until after the check has "been successful", so it is ok to log most stuff using lines like 
+
[source,{cpp}]
----------------------------
debug << "Testing logging " << myFloat << ", " << myInt << std::endl;
----------------------------

- In C# the check is made for every +Write+ or +WriteLine+ call, which means that if you log using the form
+
[source,{csharp}]
----------------------------
debug.WriteLine("Hello " + 123.098);
----------------------------
+
the whole string expansion will be performed before the check is made. It is better to use the form
+
[source,{csharp}]
----------------------------
debug.WriteLine("Hello {0}", 123.098);
----------------------------
+
since the string expansion will not be performed until the check has passed.

- In Java the check is made for every +print+ or +println+ call that is made. The tracer supports the +printf(...)+ functions that will give the similar functionality as C# described above. Check out the documentation for javas +PrintWriter+ to find out how to use this syntax.

Sometimes you might have something that is expensive to calculate in your logs, for example something like 

[source,{cpp}]
----------------------------
debug << "Average: " << ExpensiveAverageCalculation() << std::endl;
----------------------------
where the expensive function will be called every time the statement executed whether or not the prefix is enabled. In this situation it is better to check whether logging is enabled using +debug.IsEnabled()+ before doing the logging, like this:

[source,{cpp}]
----------------------------
if (debug.IsEnabled()) 
{
    debug << "Average: " << ExpensiveAverageCalculation() << std::endl;
}
----------------------------

This applies to all languages, even if this example was in C++.

[[force_log]]
==== The FORCE_LOG environment variable
There are a few different ways that the FORCE_LOG environment variable can be used.

The first is, naturally, to set the environment variable in the System Properties -> Environment Variables dialog (in Windows), or in your .bashrc file (for Unix bash shell users). This has the sometimes unfortunate side effect of turning on the selected prefixes for all applications, which can be a problem if several applications use the same prefix, or if you set FORCE_LOG to "all" which will mean that all applications will log everything.

The second way is to start your program from the command line: First run +set FORCE_LOG="something somethingelse"+ (Windows again, unix bash shell users do +export FORCE_LOG=...+), and then run your application from the command line. Now only your application will be run with those settings. This same way can of course be used in a script.

Lastly, if you want to run your program from the Visual Studio debugger with trace logging on by default, there is support for that too. Under Project Settings -> Debugging -> Environment it is possible to set environment variables. So set FORCE_LOG="all" there to get your program to start with all logging enabled. Also make sure that "Merge Environment" is set to Yes, or your program (and the libraries it depends on) will not be able to read other environment variables.

==== Using the Tracer without a Dob connection

The Tracer class itself does not use the Dob in any way, it is only the TracerBackdoor that uses the Dob, which means that it is possible to use the Tracer functionality in an application that does not have a Dob connection, or to use it when the connection is not open. Of course, since this means that the TracerBackdoor cannot be used, it is not possible to use the backdoor command to control the logging. But it is still possible to use the FORCE_LOG functionality to enable logging.

==== Tracer FAQ

How does flushing work?::
  The Tracer logs to both standard output and to Safir Logging. Flushing is handled differently in these two mechanisms, which means that they will behave slightly differently. Standard output is flushed as it is normally done in each language, e.g. on ++std::flush++ and ++std::endl++ in C++, and Safir Logging is flushed on each newline.

How does the Tracer use Windows Native Logging?::
  When Native logging is enabled on Windows systems (see <<windows_native_logging>>) the Tracer will _only_ log to standard output, and not to Safir Logging. This is by design, since the Windows Event Log is not suited for tracer-style logs.

==== Changes from previous Tracer versions

The way that the Tracer works changed quite a lot with the introduction of the Safir Logging mechanism in Safir SDK Core version 4.5. The interface has only minor changes, but the behaviour behind the scenes has changed significantly.

Starting the TracerBackdoor::
  Previously the TracerBackdoor was started automatically with a separate thread and connection, but now the TracerBackdoor has to be started explicitly, and on an existing connection. This means that you have to add Start and Stop calls in your applications.

Setting Program Name::
  Previously it has been necessary to tell the Tracer what the name of the program is for it to be able to use a sensible connection name. Since the Tracer no longer has a connection of its own this is no longer necessary. Hence the +SetProgramName(...)+ function has been removed. If your applications used this function you have to remove those calls. This also means that you now cannot address your application using "backdoor -c <executable name>", but instead have to use the connection name that the TracerBackdoor was started with.

Buffering and flushing::
  Previously logged data was flushed to the old logging mechanism after 0.5 seconds. The new flushing behaviour is described above. You don't have to change your application in any way, just expect the new behaviour when using the Tracer.

Prefixes and when to start logging::
  Previously there were some rules on how and when to instantiate and use Tracers and prefixes. This is now much more straightforward: Instantiate the Tracers when and where you want to, and use them when and where you want to.

Extra threads and connections::
  Old versions of the Tracer would start a background thread and open a connection in that thread. This led to some sometimes unwanted side-effects. The Tracer no longer has this background thread (instead you have to start the TracerBackdoor on one of your connections). No changes are needed to your applications.

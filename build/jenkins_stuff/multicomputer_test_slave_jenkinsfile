@Library('safir_shared_library') _

pipeline {
    parameters {
        string(name: 'SOURCE_PROJECT',
               description: 'Jenkins project to copy installation files from')
        string(name: 'SOURCE_BUILD_NUMBER',
               description: 'Build number of SOURCE_PROJECT to copy installation files from')
        string(name: 'BUILD_IDENTIFIER',
               defaultValue: "debian-bullseye-x86-RelWithDebInfo",
               description: "Build identifier, for example 'debian-bullseye-x86-DebugOnly'")
        choice(name: 'SLAVE_ROLE',
               choices: ['server-1', 'client-0', 'client-1'],
               description: 'Which slave to run')

    }
    agent {
        label "multicomputer-test-${params.SLAVE_ROLE}"
    }
    stages {
        stage("Copy artifacts") {
            steps {
                script {
                    utils.runCommand (command: "git clean -fxd")
                }
                echo "Copying artifacts from ${params.SOURCE_PROJECT}, build ${params.SOURCE_BUILD_NUMBER}"
                copyArtifacts filter: "build-${params.BUILD_IDENTIFIER}/*.deb",
                              flatten: true,
                              fingerprintArtifacts: true,
                              projectName: "${params.SOURCE_PROJECT}",
                              selector: specific("${params.SOURCE_BUILD_NUMBER}")
            }
        }

        stage("Run slave") {
            steps { script {
                utils.runPython(command: "build/jenkins_stuff/run_test.py --slave ${params.SLAVE_ROLE}")
            }}
        }
    }
    post {
        always {
            archiveArtifacts artifacts: "dose_test_output/*", fingerprint: true

            //junit keepLongStdio: true, skipPublishingChecks: true, testResults: '**/*.junit.xml'
            cleanWs()
        }
    }
}

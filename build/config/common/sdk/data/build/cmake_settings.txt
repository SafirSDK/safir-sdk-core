#Set SAFIR_RUNTIME and SAFIR_SDK variables to paths that cmake likes.
FILE(TO_CMAKE_PATH "$ENV{SAFIR_SDK}" SAFIR_SDK)
FILE(TO_CMAKE_PATH "$ENV{SAFIR_RUNTIME}" SAFIR_RUNTIME)
file(TO_CMAKE_PATH "$ENV{SAFIR_USER}" SAFIR_USER)

#Default build release
if (NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE "Release")
endif()


#Get some more env variables that may or may not exist (with a stupid way of doing it)
if ("$ENV{BOOST_DIR}" STREQUAL "")
   SET(foo "foo")
else ()
   FILE(TO_CMAKE_PATH "$ENV{BOOST_DIR}" BOOST_DIR)
endif ()

if ("$ENV{ACE_ROOT}" STREQUAL "")
   set(foo "foo")
else ()
   FILE(TO_CMAKE_PATH $ENV{ACE_ROOT} ACE_ROOT)
endif ()

#add include path
INCLUDE_DIRECTORIES(${SAFIR_SDK}/include)
if (SAFIR_USER)
   INCLUDE_DIRECTORIES(${SAFIR_USER}/sdk/include)
endif()

set (CMAKE_CXX_STANDARD 20)

#if we're using gcc we need to set up some things
if (CMAKE_COMPILER_IS_GNUCXX)
   #link directory for libraries (will this work with gcc under windows?)
   LINK_DIRECTORIES(${SAFIR_RUNTIME}/lib)
   if (SAFIR_USER)
      LINK_DIRECTORIES(${SAFIR_USER}/runtime/lib)
   endif()

   #turn on more warnings
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

   #define some common libraries
   SET(COMMON_LIBRARIES rt)
endif (CMAKE_COMPILER_IS_GNUCXX)

if (MSVC)
   LINK_DIRECTORIES(${SAFIR_SDK}/lib)
   if (SAFIR_USER)
      LINK_DIRECTORIES(${SAFIR_USER}/sdk/lib)
   endif()
   ADD_DEFINITIONS(-DNOMINMAX)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
   ADD_DEFINITIONS(-D_UNICODE -DUNICODE)

   #use multiprocessing 
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

   #increase warning level
   IF(CMAKE_BUILD_TOOL MATCHES "(msdev|devenv|nmake)")
      # Use the highest warning level for visual studio.
      SET(CMAKE_CXX_WARNING_LEVEL 4)
      IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
         STRING(REGEX REPLACE "/W[0-4]" "/W4"
                CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
      ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
         SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
      ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
   ENDIF(CMAKE_BUILD_TOOL MATCHES "(msdev|devenv|nmake)")
endif ()

#Add some more boost library versions that we want to be able to use.
set (Boost_ADDITIONAL_VERSIONS "1.85.0")
set (Boost_NO_WARN_NEW_VERSIONS ON)

set(Boost_USE_MULTITHREADED ON)

# Use boost from tower if it exists
set(BOOST_ROOT ${SAFIR_SDK})
find_package(Boost)
if(Boost_FOUND)
   include_directories(${Boost_INCLUDE_DIRS})
   link_directories(${Boost_LIBRARY_DIRS})
else()
   unset(BOOST_ROOT)
   find_package(Boost)
   if(Boost_FOUND)
      include_directories(${Boost_INCLUDE_DIRS})
      link_directories(${Boost_LIBRARY_DIRS})
    else()
        message(FATAL_ERROR "Failed to find a boost installation!")
    endif()
endif()

ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ADD_DEFINITIONS(-DBOOST_BIND_GLOBAL_PLACEHOLDERS)

#Work out what ACE lib is called
if (UNIX)
  set (ACE_LIBRARY "ACE")
elseif (MSVC)
  set (ACE_LIBRARY debug ACEd optimized ACE)
endif ()

if(ACE_ROOT)
    #Add ace to linker path
    LINK_DIRECTORIES(${ACE_ROOT}/lib)

    #And add ace to include path
    INCLUDE_DIRECTORIES(${ACE_ROOT})
endif()

if (MSVC AND NOT NO_LIBRARY_POSTFIXES)
  SET(CMAKE_DEBUG_POSTFIX "d")
endif()

MACRO(INSTALL_DEBUG_INFO target)
  if(MSVC)
    if (NOT TARGET ${target})
      message(FATAL_ERROR "No such target: ${target}")
    endif()

    if (SAFIR_USER)
	  INSTALL(FILES $<TARGET_PDB_FILE:${target}>
		DESTINATION ${SAFIR_USER}/runtime/bin
		CONFIGURATIONS Debug RelWithDebInfo)
    else()
	  INSTALL(FILES $<TARGET_PDB_FILE:${target}>
		DESTINATION ${SAFIR_RUNTIME}/bin
		CONFIGURATIONS Debug RelWithDebInfo)
    endif()
  endif()
ENDMACRO()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${SAFIR_SDK}/data/build/)


SET(COMMON_CS_FLAGS "-warn:4")
if (MSVC)
    if ("$ENV{PLATFORM}" STREQUAL "x64")
        LIST(APPEND COMMON_CS_FLAGS "-platform:x64")
    else()
        LIST(APPEND COMMON_CS_FLAGS "-platform:x86")
    endif()
endif(MSVC)


#work out if we've got a configuration on the command line or if 
#we're running in an IDE.
if (CMAKE_CONFIGURATION_TYPES AND CMAKE_BUILD_TYPE)
    #MESSAGE("Both CMAKE_CONFIGURATION_TYPES and CMAKE_BUILD_TYPE are set! Using CMAKE_BUILD_TYPE as the CUSTOM_BUILD_TYPE")
    SET(CUSTOM_BUILD_TYPE ${CMAKE_BUILD_TYPE})
elseif(CMAKE_CONFIGURATION_TYPES)
    # fix for vs2010
    if (MSVC_VERSION EQUAL 1600)
       SET(CUSTOM_BUILD_TYPE "$(Configuration)")
    else()
       SET(CUSTOM_BUILD_TYPE "$(OutDir)")
    endif()
    
elseif(CMAKE_BUILD_TYPE)
    SET(CUSTOM_BUILD_TYPE ${CMAKE_BUILD_TYPE})
else()
    SET(CUSTOM_BUILD_TYPE "Release")
endif()

set(ignore_me
  "Some of our build methods pass along extra variables to cmake, which causes warnings."
  "Add them below to get rid of the warning."
  ${SAFIR_BUILD_SYSTEM_VERSION}
  ${REBUILD}
)
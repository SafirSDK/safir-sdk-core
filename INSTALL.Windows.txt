Windows Building and Installing
===============================

Installing Prerequisites
------------------------

First of all there are a number of packages that you need to have installed on your system to be able to build all the parts of Safir SDK Core. 
Here is a summary of what you need, and below are instructions on where to get them and how to install them.

Visual Studio 2013 or later (express or paid versions work)
Subversion
Boost (>=1.55, or >=1.55 if using VS2013)
Python (>= 2.7)
CMake (>=2.8.12.1)
Protobuf(>= 2.5.0)
Jom *
Qt (>=4.8) *
GNAT Ada compiler *
Java Platform (JDK) *
Doxygen *
Graphviz *

Items marked with an asterisk (*) are optional.

64 bit builds
~~~~~~~~~~~~~
If your application is 64 bit you must build Safir SDK Core for 64 bit wich also means that some of the prerequisite packages must be built for 64 bit.
Unfortunately the support for pre-build binaries isn't as good as for the 32 bit versions which means that in many cases you have to build the packages from source.
For most packages below there are build/install instructions for both 32 and 64 bit.

Visual Studio
If you're using Visual Studio 2010 Express you will need to install the Windows SDK 7.1 to build 64 bit applications.
See http://stackoverflow.com/questions/1865069/how-to-compile-a-64-bit-application-using-visual-c-2010-express
Later versions of Visual Studio Express can build 64bit applications out of the box.

Protobuf
~~~~~~~~
TODO: I had to add an #include <algorithm> to zero_copy_stream_lite.cc to get it to build.
Also lite-test and tests did not build correctly... This is for 2.5.0, which was latest version at the time of writing.
Check newer releases!

 1. Download the protobuf source code from http://code.google.com/p/protobuf/downloads. 
 2. Unzip the code to c:\protobuf (or somewhere else of your choice).
 3. Create create an environment variable PROTOBUF_DIR that points to c:\protobuf (or the place where you put it).
 4. Open c:\protobuf\vsprojects\protobuf.sln in Visual Studio and click through the Conversion Wizard to update the solution to your studio version.
 5. If you're building a 64-bit system: Open Build --> Configuration Manager and create an x64 configuration under the "Active solution platform" drop down.
 6  Build the solution in both Debug and Release configurations (you may have to build twice to get them to compile, for some reason).
 7. Open a command prompt in the vsprojects directory, and run "extract_includes.bat".
 8. If you're building a 64 bit system: Move the Debug and Release directories from vsprojects\x64\ to vsprojects\ .

GNAT
An Ada compiler capable of generating 64 bit binaries is necessary only if you want to build a 64 bit Ada application.
Unfortunately the GPL version of GNAT does not support 64 bit builds, so if you want to build Ada applications in a 64 bit system you need to purchase the commercial version of GNAT.

Boost
64 bit build is mandatory.

Qt
64 bit build is needed if you want to run the dobexplorer tool.

Protobuf
64 bit build is mandatory.

Java Platform JDK
64 bit build is needed if you intend to build 64 bit Java applications.

Visual Studio and utils
~~~~~~~~~~~~~~~~~~~~~~~
You are assumed to already have Visual Studio installed. Be aware that Visual Studio 2010 is sometimes referred to as "msvc10", Visual Studio 2012 as "msvc11" and Visual Studio 2013 as "msvc12". Yes, that's right, very confusing, but don't blame us, blame Microsoft...
You are also assumed to have some unpacking tool installed that can handle .gz files, like winzip, 7-zip or winrar.

Subversion
~~~~~~~~~~
You need a subversion command line client. If you've got TortoiseSVN installed it is quite likely that you've already got one installed. Open a command prompt and type "svn help". If you get some help output you've got one installed.
Otherwise install either TortoiseSVN (http://tortoisesvn.net/downloads.html), remembering to select installation of command line tools, or some command-line-only svn client, e.g. SlikSVN (http://www.sliksvn.com/en/download).

Boost
~~~~~
You can either build boost from source yourself (follow the instructions on boost.org), or download a binary installer that installs everything for you, saving you the build time. The situation around the binary installers is changing quite a lot at the moment, with boostpro.com having shut down and new installers are appearing. These instructions will work for boost 1.54, but might have to be modified for newer boost versions if the installer gets modified.

Go to http://sourceforge.net/projects/boost/files/boost-binaries/ and download the binaries for your compiler and architecture. (e.g. boost_1_54_0-msvc-10.0-32.exe for 1.54 with 32-bit VS2010).
Run the installer and let it install to a suitable directory. Go to that directory and rename the binary library directory to "lib" (e.g. rename lib64-msvc-10.0 to lib).
Set the BOOST_ROOT environment variable to point to the installation directory, e.g. C:\local\boost_1_54_0
Add the lib of the boost installation (e.g. %BOOST_ROOT%\lib) to your PATH.

For some boost versions there are patches that need to be installed for Safir SDK to work correctly. The Safir SDK Core build script will check whether patches need to be installed, and tell you to install them if they are needed. The easisest way to install the patches for your version is to use the CMake file in the build/patches directory, run 'cmake . -G "NMake Makefiles"', 'nmake install'.

jom
~~~
Jom is an nmake replacement with support for multi-core CPU, which will speed up compilation both of Qt below, and of the Safir SDK Core components. Installing it is optional.
Download the latest version of jom from http://qt-project.org/wiki/jom, and put the jom executable in a folder that is in your PATH.

Qt
~~
Qt can either be built/installed from source or using a Qt installer downloaded from qt-project.org. The installer is only available for VS2010-32bit, VS2012-32bit and VS2012-64bit, if you're using another compiler you will have to build from source.

Safir SDK Core supports both Qt 4.8 and Qt 5, so you can choose whichever one you want.

As of this writing Qt has no official support for VS2013, but it can be made to work. Get in touch with us for more info.

Installer:
Download and run the appropriate the installer for your compiler from http://qt-project.org/downloads.
Set up environment variable QTDIR to refer the to the directory in the installation that contains the "include" and "bin" folders (e.g. QTDIR=C:\Qt\4.8.1 or QTDIR=c:\Qt\Qt5.2.0\5.2.0\msvc2012_64) and add %QTDIR%\bin to PATH environment variable.

Build from source:
1. Download the Qt source code from http://qt.nokia.com/downloads, unzip and move the contents to an appropriately named directory, i.e. C:\Qt\4.8.1.
2. Set up environment variable QTDIR=C:\Qt\4.8.1 and add %QTDIR%\bin to PATH environment variable 
3. Start the appropriate Visual Studio Command Prompt (make sure to choose 32 or 64 bit variant correctly)
4.Run following commands in it:
   >cd c:\Qt\4.8.1
   >configure -debug-and-release -opensource
   >jom (or nmake if you didnt install jom)

CMake
~~~~~
Go to http://www.cmake.org/ and download and install the CMake installer.
In the "Install Options" step, check the "Add CMake to the system PATH for all users", or "... current user" if you prefer.

GNAT
~~~~
This step is optional, if you don't want Ada interfaces you do not need to install GNAT. You will need to pass --no-ada-support to the build script as described below if you do not install GNAT.

Go to http://libre.adacore.com/ and download the GPL version of GNAT.
Install GNAT. (and reboot, as the installer says)

Java
~~~~
This step is optional, if you don't want Java interfaces you do not need to install Java. You will need to pass --no-java-support to the build script as described below if you do not install Java.

Go to http://java.sun.com/javase/downloads/index.jsp and download and install a JDK kit. (Last time I used "JDK 6 Update 45", since I needed only the jdk itself, but any of the JDK kits should work)

Python
~~~~~~
Go to http://www.python.org/ and download and install the python installer. (Please use a version greater than or equal to 2.7)

Add C:\Python27 (or equivalent) to your PATH.

Doxygen and Graphviz
~~~~~~~~~~~~~~~~~~~~
These tools are used to build the interface documentation from the C++ source code. If you do not require this documentation you can skip this step.
Go to http://www.doxygen.org/ and download and install the windows installer 
Go to http://www.graphviz.org/ and download and install the windows installer

Now you can continue to "Building Safir SDK Core"

Building Safir SDK Core
-----------------------
First of all you should decide where you want the SDK installed. You have to specify two environment variables, SAFIR_RUNTIME and SAFIR_SDK. For example you can create a directory "C:\safir", and set the variables to point to "C:\safir\runtime" and "C:\safir\sdk" respectively.

Add %SAFIR_RUNTIME%\bin to your PATH.
If you're going to be using the Ada interfaces, add an environment variable ADA_PROJECT_PATH containing %SAFIR_SDK%\ada.

Now open a command prompt and go to the directory that contains the build and src directories.

To build a Safir SDK Core for your native architecture (i.e. 64 bit on 64 bit windows) with support for all languages:
    build\build.py -f build\sdk_core.txt

To build a 32 bit Safir SDK Core on 64 bit windows with support for all languages:
    build\build.py -f build\sdk_core.txt --32-bit

To build Safir SDK Core without support for Ada and Java:
    build\build.py -f build\sdk_core.txt --no-ada-support --no-java-support

To build Safir SDK Core without dobexplorer and without the doxygen documentation:
    build\build.py -f build\sdk_core.txt --skip-list="dobexplorer doxygen"

Type build/build.py --help to get a complete list of all command line switches.

The build.py command will build the Safir SDK Core components in the correct order and install them into the location specified by SAFIR_SDK and SAFIR_RUNTIME.

With a bit of luck you should now have a working Safir SDK Core installed on your computer.

Try starting "dose_main.exe" and "dope_main.exe" and "sate.exe", to see if everything is working.


Building example applications
-----------------------------
The directory named "examples" contains some test applications. The simplest way to build these is to use the build script with a different configuration file (run after the build of the SDK as described above):
    build/build.py -f build/example_apps.txt
When this is complete you should have a few new applications installed under %SAFIR_RUNTIME%/bin: VehicleAppCpp, VehicleAppCs, VehicleMmiCppQt, VehicleMmiCsWinForms and VehicleAppDb. 
Note: There is also a build script configuration file dob_tests.txt, which builds the Dob test suite.

Setting up library and include paths in Visual Studio
-----------------------------------------------------
To be able to build your own applications using Visual Studio projects/solutions you will have to set up Visual Studio to find the third party stuff.
The instructions below will set up these things for all projects. If you want it for just one project you need to do similar things just to your project settings.

If you do the below step, "Recreating the downloadable binary", you can skip all the things except $(SAFIR_SDK)/include and $(SAFIR_SDK)/lib, since the script described there copies the relevant stuff into the SAFIR_SDK directories.

Open Visual Studio and go to Tools --> Options --> Projects and Solutions --> VC++ Directories:
Add the following under "Include files" (top right combo-box)
    $(BOOST_ROOT)
    $(SAFIR_SDK)/include
Add the following under "Library files"
    $(BOOST_ROOT)/lib
    $(SAFIR_SDK)/lib


Recreating the downloadable binary
----------------------------------
The Windows binary that is available for download at http://safir.sourceforge.net is created by following the above instructions and then running the prepare_for_distribution.py script. The script copies necessary dlls, libs and header files into appropriate parts of SAFIR_RUNTIME and SAFIR_SDK, so that those folders can be moved to another computer where it will not be necessary to install/build all of the above prerequisites to be able to develop against the Safir SDK Core.
If you want to do that, open a command prompt and cd to the directory where you ran the build script from and run "build/prepare_for_distribution.py".


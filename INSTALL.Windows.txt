Windows Building and Installing
===============================

Installing Prerequisites
------------------------

First of all there are a number of packages that you need to have installed on your system to be able to build all the parts of Safir SDK Core. 
Here is a summary of what you need, and below are instructions on where to get them and how to install them.

Visual Studio 2008 SP1 or 2010 SP1 (express or paid versions work)
GNAT
Templates-Parser
XMLAda
MinGW and MSYS
Boost (1.50 or later)
Qt (>=4.4)
CMake (>=2.8)
Expat
Java Platform (JDK) 
Python (>= 2.6)
doxygen
graphviz

64 bit builds
~~~~~~~~~~~~~
If your application is 64 bit you must build Safir SDK Core for 64 bit wich also means that some of the prerequisite packages must be built for 64 bit.
Unfortunately the support for pre-build binaries isn't as good as for the 32 bit versions which means that in many cases you have to build the packages from source.
For most packages below there are build/install instructions for both 32 and 64 bit.

Visual Studio
If you're using the Express version you will need to install the Windows SDK 7.1 to build 64 bit applications.
See http://stackoverflow.com/questions/1865069/how-to-compile-a-64-bit-application-using-visual-c-2010-express

GNAT
An Ada compiler capable of generating 64 bit is necessary only if you want to build a 64 bit Ada application.
Even if you are not concerned with Ada at all you still need an Ada compilator to build the offline tool (dots_v.exe) that is used to generate
all language interfaces, however, in this case it is sufficient with the 32 bit version.
The easiest way of getting an open source Ada compiler is to use the GNAT GPL package provided by AdaCore (Unfortunately, it doesn't support 64 bit).

Templates-Parser
See GNAT.

XMLAda
See GNAT.

Boost
64 bit build is mandatory.

Qt
64 bit build is needed if you want to run the dobexplorer tool.

Expat
64 bit build is mandatory.

Java Platform JDK
64 bit build is needed if you intend to build 64 bit Java applications.

For the moment the Safir SDK Core build system (build.py and CMake files) has no support for 64 bit Ada and Java. 


Visual Studio and utils
~~~~~~~~~~~~~~~~~~~~~~~
You are assumed to already have Visual Studio 2005 SP1 (aka 8.0), 2008 SP1 (aka 9.0) or 2010 (aka 10.0) installed, so we proceed immediately to the more interesting bits.
You are also assumed to have some unpacking tool installed that can handle .gz files, like winzip, 7-zip or winrar.

Boost
~~~~~
For both 32 and 64 bit installations the easiest way to install boost is to use the installer provided by BoostPro Computing: http://www.boostpro.com/downloads. Download the appropriate installer and run it.
 - In the "Select Default Variants" step, select your Visual Studio version, "Multithread Debug, DLL" and "Multithread, DLL". If you need more variants or compilers, check those as well.
 - In the "Choose Components" step you can leave the defaults, or check at least 
      Boost DateTime
      Boost Filesystem
      Boost IOStreams
      Boost ProgramOptions
      Boost Random
      Boost Regex
      Boost Serialization
      Boost System
      Boost Thread

Add the lib directory of the boost installation (e.g. C:\Program Files\boost\boost_1_50\lib or similar) to your PATH. You might also need to set the environment variable BOOST_ROOT to the top directory of your boost installation (e.g. C:\Program Files\boost\boost_1_50) in order for CMake to find it.

For some boost versions there are some bugs that need to be patched for Safir SDK to work correctly. The easisest way to install the patches that is needed for your version is to use the CMake file in the build/patches directory, run "cmake . -G 'NMake Makefiles'", "nmake install"
once you have installed cmake, which will install the correct patches automatically.

Qt
~~

32 bit:
Download the "Qt Library" installer for your compiler from http://qt.nokia.com/downloads. Run and install.



64 bit:
Instructions for building with VS2010. This should be able to adapt to VS2005/2008 by starting the appropriate command prompt at step 8.

#1. Install Perl if you are going to compile Qt >= 4.8.0
2. Download the Qt source code from http://qt.nokia.com/downloads, unzip and move the contents to C:\Qt\4.8.1.
4. Set up environment variables
   QTDIR=C:\Qt\4.8.1
5. Add %QTDIR%\bin to PATH environment variable 
#6. Download the latest version of jom. (Jom is nmake replacement for Qt compilation on multi-core CPU. Its parameter -j N allows to setup number of parallel processes for compilation. Number of physical CPU cores is a good choice for N.)
#7. Extract jom files to C:\Qt\jom folder
8. Start Visual Studio 2010 Command Prompt:
9. Start > Programs > Microsoft Visual Studio 2010 > Visual Studio Tools > Visual Studio Command Prompt.
10.Run following commands in it:
   >cd c:\Qt\4.7.1
   >configure -debug-and-release -opensource -platform win32-msvc2010
   >..\jom\jom.exe -j N (Where N is number of CPU cores you want to utilize for Qt compilation.)

64 bit:
Follow the 32 bit instruction but select the appropriate 64 bit compiler tool chain in step 8.
 

MinGW and MSYS
~~~~~~~~~~~~~~
MinGW and MSYS are not requirements of Safir SDK Core, but some of the installations of the other prerequisites need more stuff from MinGW and MSYS, so we have to install them. Fortunately, as of 2012 they're now in the same installer, so this step is easier than it used to be.

Download the mingw-get-inst from http://www.mingw.org (direct link: http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/) and run it. 
In the "Select Components" step, add MSYS and the Developer Toolkit to the stuff to be installed. Install to C:\MinGW, or you'll get into trouble later.

CMake
~~~~~
Go to http://www.cmake.org/ and download and install the CMake installer.
In the "Install Options" step, check the "Add CMake to the system PATH for all users", or "... current user" if you prefer.

Expat
~~~~~
The latest release is 2.1.0.

32 bit:
Go to http://expat.sourceforge.net/ and download and install the binary installer for windows.

64 bit:
1. Download and unpack http://sourceforge.net/projects/expat/files/expat/2.1.0/expat-2.1.0.tar.gz to a directory of your choice (This directory is just used as build directory)
2. Add a subdirectory 'build' (For example: C:\tmp\expat-2.1.0\build)
3. Open a command window for the 64 bit tool-chain as Administrator. Start -> All Programs -> Microsoft Visual Studio 2010 -> Visual Studio Tools -> Visual Studio x64 Win64 Command Prompt (2010)
   (To be able to install files under "Program Files" you might have to open the command window as Administrator)
4. cd into c:\tmp\expat-2.1.0\build
5. Run cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
6  Run nmake install

For both 32 and 64 bit builds:
Add C:\Program Files\expat\bin to your PATH.

GNAT and Ada libraries
~~~~~~~~~~~~~~~~~~~~~~
Go to http://libre.adacore.com/ and download the GPL version of GNAT. Also download XMLAda and AWS.
Install GNAT. (and reboot, as the installer says)
Install xmlada:
        unzip xmlada to C:\xmlada
        open a MSYS command prompt (Start --> All Programs --> MinGW --> MinGW shell) and do "cd /c/xmlada"
        run "./configure --prefix=C:/GNAT/2011" (note the direction of the slashes!)
        run "make" and then "make install"
        (delete c:\xmlada, it is no longer needed)

Install AWS/templates_parser:
        unzip aws into c:\aws
        open a MSYS command prompt (Start --> All Programs --> MinGW --> MinGW shell) and do "cd /c/aws/templates_parser"
        run "make setup build install"
        (delete c:\aws since it is no longer needed)

Add c:\GNAT\2011\lib to your PATH.

Java
~~~~
Go to http://java.sun.com/javase/downloads/index.jsp and download and install a JDK kit. (Last time I used "JDK 6 Update 29", since I needed only the jdk itself, but any of the JDK kits should work)

Python
~~~~~~
Go to http://www.python.org/ and download and install the python installer. (Please use a version greater than or equal to 2.6)

Add C:\Python26 (or equivalent) to your PATH.


Doxygen and Graphviz
~~~~~~~~~~~~~~~~~~~~
These tools are used to build the interface documentation from the C++ source code. 
Go to http://www.doxygen.org/ and download and install the windows installer 
Go to http://www.graphviz.org/ and download and install the windows installer

It appears that Graphviz installs its own version of libexpat.dll which conflicts with the one we installed above (part of Expat). You have to make sure that the libexpat.dll that we installed above is before the graphviz one in your PATH. 
(If you don't do this you will get an error message about "The ordinal 63 could not be located in the dynamic link library libexpat.dll" when you build Safir SDK Core.)

Now you can jump to "Building Safir SDK Core"


Building Safir SDK Core
-----------------------
First of all you should decide where you want the SDK installed. You have to specify two environment variables, SAFIR_RUNTIME and SAFIR_SDK. For example you can create a directory "C:\safir", and set the variables to point to "C:\safir\runtime" and "C:\safir\sdk" respectively.

Add %SAFIR_RUNTIME%\bin to your PATH.
Add an environment variable ADA_PROJECT_PATH containing %SAFIR_SDK%\ada

The building of C# applications require one more thing, the creation of a K: drive that points to %SAFIR_RUNTIME%\bin. The reason for this is that Visual Studio does not support the use of environment variables for locating dependent assemblies, and since we don't add the assemblies to the GAC we have to provide some other way of locating them. So create the folder "C:\safir\runtime\bin" (assuming that is where you put your tower), and open a command prompt and run "subst k: %SAFIR_RUNTIME%\bin". (This creates a K: drive that is mapped to C:\safir\runtime\bin. The mapping will disappear when you restart your computer, so if you want it to be persistent put that command in a .bat file and place it in your Startup folder.)


Now open a command prompt that corresponds to your configuration (32 or 64 bit).
Go to the directory that contains the build and src directories.

For example, to build 32 bit Safir SDK Core with support for all languages:
    build\build.py -f build\sdk_core.txt --target x86

To build 64 bit Safir SDK Core without support for Ada and Java:
    build\build.py -f build\sdk_core.txt --target x86-64 --no-ada-support --no-java-support

Type build/build.py --help to get a complete list of all command line switches.

The build.py command will build the Safir SDK Core components in the correct order and install them into the location specified by SAFIR_SDK and SAFIR_RUNTIME.

With a bit of luck you should now have a working Safir SDK Core installed on your computer.

Try running start_core.bat (in C:\safir\runtime\bin) to see if everything is working. You should get a dose_main, dope_main and a swre_logger started for you. Try starting sate.exe, and you can start playing around with Safir SDK Core.


Building example applications
-----------------------------
The directory named "examples" contains some test applications. The simplest way to build these is to use the build script with a different configuration file (run after the build of the SDK as described above):
    build/build.py -f build/example_apps.txt
When this is complete you should have a few new applications installed under %SAFIR_RUNTIME%/bin: VehicleAppCpp, VehicleAppCs, VehicleMmiCppQt, VehicleMmiCsWinForms and VehicleAppDb. 
Note: There is also a build script configuration file dob_tests_windows.txt, which builds the Dob test suite.

Setting up library and include paths in Visual Studio
-----------------------------------------------------
To be able to build your own applications using Visual Studio projects/solutions you will have to set up Visual Studio to find the third party stuff.
The instructions below will set up these things for all projects. If you want it for just one project you need to do similar things just to your project settings.

If you do the below step, "Recreating the downloadable binary", you can skip all the things except $(SAFIR_SDK)/include and $(SAFIR_SDK)/lib, since the script described there copies the relevant stuff into the SAFIR_SDK directories.

Open Visual Studio and go to Tools --> Options --> Projects and Solutions --> VC++ Directories:
Add the following under "Include files" (top right combo-box)
    $(BOOST_ROOT)
    C:\Program Files\Expat 2.1.0\Source\lib
    $(SAFIR_SDK)/include
Add the following under "Library files"
    $(BOOST_ROOT)/lib
    C:\Program Files\Expat 2.1.0\Bin
    $(SAFIR_SDK)/lib


Recreating the downloadable binary
----------------------------------
The Windows binary that is available for download at www.safirsdk.com is created by following the above instructions and then running the create_windows_distributable.py script. The script copies necessary dlls, libs and header files into appropriate parts of SAFIR_RUNTIME and SAFIR_SDK, so that those folders can be moved to another computer where it will not be necessary to install/build all of the above prerequisites to be able to develop against the Safir SDK Core.
If you want to do that, open a command prompt and cd to the directory where you ran the build script from and run "create_windows_distributable.py".


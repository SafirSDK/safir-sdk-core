Install Safir SDK Core for RedHat based Linux distributions
===========================================================

For some RedHat based distributions we have provided our own Safir rpm repositories which contain source and binary rpm packages. The repositories
contain not only rpm packages for Safir SDK Core itself, but also rpm packages for some software that we have dependencies to, and which can not
be found in any of the standard repositories.

Check out http://www.safirsdk.com/safir-repo/. If you are lucky you will find your favourite distribution. (And if you don't find it, make a post
to the safir forum to let us know. Maybe we can provide it!)

Currently you have to disable SELinux (Security-Enhanced Linux is a Linux feature that provides a mechanism for supporting
access control security policies.) The reason is that the generation of source code using the tool dobmake.py doesn't
work when SELinux is enabled. See http://www.crypt.gen.nz/selinux/disable_selinux.html for tips on how
to do disable SELinux.

To enable a safir repository do the following as root. (The example is for adding a Fedora12 repository).
-  Add a file named /etc/yum.repos.d/safir.repo with the following content:
[safir]
name=Safir SDK Core
baseurl=http://safirsdk.com/safir-repo/Fedora12/
enabled=1
gpgcheck=1
gpgkey=http://safirsdk.com/safir-repo/RPM-GPG-KEY-safir-sdk-core

Installing Safir Sdk Core
-------------------------
To Download and install Safir SDK Core run the following command as root:
# yum install safir-sdk-core

By default safir will be installed to /opt/safir/

You might be asked to accept importing of the GPG keys for Fedora and Safir.

Note that a number of packages that safir-sdk-core, directly or indirectly, has a dependency to, are also installed.
(Because of the large number of packages that are installed you might think that Safir SDK Core has a large footprint,
however, bare in mind that what you have installed is the Safir SDK Core development platform which contains tools
and libraries to develop applications in any of the supported languages. The actual runtime footprint for Safir SDK Core
is much smaller.)

The package is relocatable so if you are not comfortable with the default directory you can install it to any directory you like.
In this case, instead of yum, you have to use rpm with the --prefix option.

Because of the way cmake installs files during the code generation process you currently need to change the ownership for all files
in the Safir installation tree (/opt/safir/ by default) to the user that you are going to use when developing/running
Safir SDK Core. (Unfortunately it doesn't work by just adding your username to the group 'safir'.) Run as root:
> chown -R <your user name>: <safir installation directory>
For example:
> chown -R stawi: /opt/safir

Open a new terminal (as your normal user) and run:
> dobmake.py

This will present a GUI where you can select any additional languages for which you want to generate interface code.
Click Run and wait for the code generation to finish.

Hopefully you now have a installed and ready-to-use Safir SDK Core system. Test the installation by opening a terminal an run:
> dose_main
If the program starts you are likely to have succeeded.

Installing some example applications
------------------------------------
To Download and install some example applications run the following command as root:
# yum install safir-sdk-core-example-apps

After installation you should have a few new applications installed under $SAFIR_RUNTIME/bin:
VehicleAppCpp, VehicleAppCs, VehicleMmiCppQt, VehicleMmiCsWinForms and VehicleAppDb.

However, for the example applications it is probably more interesting to download and unpack the source package and have a look at
the source code.
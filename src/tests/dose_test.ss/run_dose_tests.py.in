#!/usr/bin/env python3
# -*- coding: utf-8 -*-
###############################################################################
#
# Copyright Saab AB, 2011-2013 (http://safirsdkcore.com)
#
# Created by: Lars Hagstrom (lars@foldspace.nu)
#
###############################################################################
#
# This file is part of Safir SDK Core.
#
# Safir SDK Core is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# Safir SDK Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Safir SDK Core.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
import sys
import subprocess
import os
import shutil
import difflib
import time
import glob
import re
import traceback
import signal
import platform
from xml.sax.saxutils import escape, quoteattr
import argparse
import urllib.request
import tempfile

NODE_IDS = {"server-0" : "999999",
            "server-1" : "888888",
            "client-0" : "77777",
            "client-1" : "66666"}

def log(*args, **kwargs):
    print(*args, **kwargs)
    sys.stdout.flush()


def rmdir(directory):
    if os.path.exists(directory):
        try:
            shutil.rmtree(directory)
        except OSError:
            log("Failed to remove directory, will retry")
            time.sleep(0.2)
            shutil.rmtree(directory)


def mkdir(newdir):
    """works the way a good mkdir should :)
        - already exists, silently complete
        - regular file in the way, raise an exception
        - parent directory(ies) does not exist, make them as well
    """
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired " \
                      "dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            mkdir(head)
        if tail:
            os.mkdir(newdir)


class Parameters:
    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("--jenkins",
                          action="store_true",
                          dest="jenkins",
                          default=False,
                          help="Set up the needed environment variables for a Jenkins automated build," +
                          "and respect the langX matrix variables")
        parser.add_argument("--multinode",
                          action="store_true",
                          dest="multinode",
                          default=False,
                          help="Run multinode tests instead of standalone tests. Both nodes are run on this computer.")
        parser.add_argument("--multicomputer",
                          action="store_true",
                          dest="multicomputer",
                          default=False,
                          help="Run multicomputer tests instead of standalone tests.")
        parser.add_argument("--slave",
                            choices=["server-1", "client-0", "client-1"],
                            help="Be a multicomputer slave of the specified type")
        parser.add_argument("--stop-slaves",
                            action="store_true",
                            default=False,
                            help="Send a safir_control command to all slave nodes after multicomputer test is complete.")
        parser.add_argument("--run-until-failure",
                          action="store_true",
                          dest="run_until_failure",
                          default=False,
                          help="Run the given test range until one or more tests fail. Only test output for the last "
                          "(failed) run will be saved.")
        parser.add_argument("--no-syslog",
                          action="store_false",
                          dest="check_syslog",
                          default=True,
                          help="Do not check syslog output")
        parser.add_argument("--no-java",
                          action="store_true",
                          dest="no_java",
                          default=False,
                          help="Do not run java partners")
        parser.add_argument("--no-dotnet",
                          action="store_true",
                          dest="no_dotnet",
                          default=False,
                          help="Do not run dotnet partners")
        parser.add_argument("--lang0",
                          action="store",
                          dest="lang0",
                          default="cpp",
                          help="Which partner 0 to run."
                          "If --jenkins is specified the LANGUAGES environment variable will override this.")
        parser.add_argument("--lang1",
                          action="store",
                          dest="lang1",
                          default="cpp",
                          help="Which partner 1 to run."
                          "If --jenkins is specified the LANGUAGES environment variable will override this.")
        parser.add_argument("--lang2",
                          action="store",
                          dest="lang2",
                          default="cpp",
                          help="Which partner 2 to run."
                          "If --jenkins is specified the LANGUAGES environment variable will override this.")
        parser.add_argument("--lang3",
                          action="store",
                          dest="lang3",
                          default="cpp",
                          help="Which partner 3 to run."
                          "If --jenkins is specified the LANGUAGES environment variable will override this.")
        parser.add_argument("--lang4",
                          action="store",
                          dest="lang4",
                          default="cpp",
                          help="Which partner 4 to run."
                          "If --jenkins is specified the LANGUAGES environment variable will override this.")
        parser.add_argument("--single-testcase", action="store", help="Run only a single testcase.")
        parser.add_argument("--first-testcase", action="store", help="Sets the first testcase to be run.")
        parser.add_argument("--last-testcase", action="store", help="Sets the last testcase to be run.")
        options = parser.parse_args()

        self.lang0 = options.lang0
        self.lang1 = options.lang1
        self.lang2 = options.lang2
        self.lang3 = options.lang3
        self.lang4 = options.lang4

        self.multinode = options.multinode
        self.multicomputer = options.multicomputer
        self.slave = options.slave
        self.check_syslog = options.check_syslog
        self.standalone = not options.multinode and not options.multicomputer and not options.slave

        self.no_java = options.no_java
        self.no_dotnet = options.no_dotnet
        self.run_until_failure = options.run_until_failure
        self.stop_slaves = options.stop_slaves

        if options.slave and options.multicomputer:
            log("Don't specify both --slave and --multinode")
            sys.exit(1)

        if (options.single_testcase is not None) and ((options.last_testcase is not None) or
                                                      (options.first_testcase is not None)):
            log("Don't specify both --single-testcase and either --first-testcase or --last-testcase")
            sys.exit(1)

        if options.jenkins:
            #Get env variables if they're set
            langs = os.environ.get("LANGUAGES")
            if langs is not None:
                splitlangs = langs.split("-")
                if len(splitlangs) != 5:
                    raise Exception("Invalid format of LANGUAGES environment variable: " + langs)
                self.lang0 = splitlangs[0]
                self.lang1 = splitlangs[1]
                self.lang2 = splitlangs[2]
                self.lang3 = splitlangs[3]
                self.lang4 = splitlangs[4]

        #This relies on the fact that we're installed in the bin directory on both linux and windows.
        install_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..")

        #Get the default dou directory and set it as an environment variable that can be
        #picked up by the typesystem.ini that belongs to the test suite.
        #Note: The last part of this path is set by cmake during configuration/installation.
        os.environ["SAFIR_TEST_SUITE_DOU_DIRECTORY"] = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_DOU_BASE@")

        #Note: Last half of path is set by cmake during configuration/installation.
        self.test_data_directory = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_TEST_DATA@")
        log(self.test_data_directory)

        if self.standalone:
            config = "standalone"
        elif self.multinode:
            config = "multinode"
        elif self.multicomputer or self.slave:
            config = "multicomputer"

        #set the SAFIR_TEST_TEMP variable, it's used in the test configuration to resolv the temp area
        #were we store logs, crash dumps and IPC files. We want it to be inside the workspace when run on jenkins and
        #in the location lluf resolvs @{TEMP} when not run in jenkins. (/tmp for linux and %TEMP% or %TMP% on windows)
        if options.jenkins:
            os.environ["SAFIR_TEST_TEMP"] = os.path.join(os.environ["WORKSPACE"], "temp")
        else:
            if platform.system() == 'Linux':
                os.environ["SAFIR_TEST_TEMP"] = "/tmp"
            else:
                if os.environ["TEMP"] is not None:
                    os.environ["SAFIR_TEST_TEMP"] = os.environ["TEMP"]
                else:
                    if os.environ["TMP"] is not None:
                        os.environ["SAFIR_TEST_TEMP"] = os.environ["TMP"]
                    else:
                        log("Could not resolve %TEMP% or %TMP")
                        sys.exit(1)

        #Set up to use our own test configuration
        os.environ["SAFIR_TEST_CONFIG_OVERRIDE"] = os.path.join(self.test_data_directory, "dose", "test_config", config)

        jar_install_path = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_JAR@")

        self.safir_control_cmd = ("safir_control", )

        self.dope_main_cmd = ("dope_main", )
        self.foreach_cmd = ("foreach", )
        self.safir_status_cmd = ("safir_status", )

        self.dose_test_cpp_cmd = ("dose_test_cpp", )
        self.dose_test_dotnet_cmd = ("dose_test_dotnet", )

        self.dose_test_java_cmd = ("java", "-jar", os.path.join(jar_install_path,"dose_test_java.jar"))

        self.testcases_path = os.path.join(self.test_data_directory, "dose", "testcases")
        self.dose_test_sequencer_cmd = (
            "dose_test_sequencer",
            "-d",
            self.testcases_path,
            #"--context", "-1", #random context
            "-l",
            self.lang0,
            self.lang1,
            self.lang2,
            self.lang3,
            self.lang4)

        self.single_testcase = options.single_testcase
        if options.single_testcase is not None:
            self.dose_test_sequencer_cmd += ("--first", options.single_testcase, "--last", options.single_testcase)

        self.first_testcase = options.first_testcase
        self.last_testcase = options.last_testcase

        if options.first_testcase is not None:
            self.dose_test_sequencer_cmd += ("--first", options.first_testcase)

        if options.last_testcase is not None:
            self.dose_test_sequencer_cmd += ("--last", options.last_testcase)

        if self.multinode or self.multicomputer:
            self.dose_test_sequencer_cmd += ("--multinode", )

        self.expected_output_path = os.path.join(self.test_data_directory, "dose",
                                                 "output_standalone" if self.standalone else "output_multinode")

        #this is needed for multicomputer tests
        self.tempdir = tempfile.mkdtemp(prefix="dose_test_backup")


class Results:
    def __init__(self):
        self.num_tc_failed = 0
        self.num_tc_performed = 0

    def write_test_result(self, expr, name, output):
        with open(name + ".junit.xml", "w") as junitfile:
            log("Test", name, " success:", expr)
            junitfile.write("<?xml version=\"1.0\"?>\n<testsuite>\n  <testcase name=\"" + name +
                            "\" classname=\"dose_test\"")
            if expr:
                """success"""
                junitfile.write("/>\n")
            else:
                """failure"""
                log(" -", name, "failed!")
                self.num_tc_failed += 1
                junitfile.write(">\n    <error message=\"Failed\">" + output + "\n</error>\n  </testcase>\n")
            junitfile.write("</testsuite>")
        return expr

    def split(self, data):
        result = dict()
        split_data = data.split("==========================================================================\n")
        for chunk in split_data:
            if len(chunk) == 0:
                continue
            chunk_lines = chunk.splitlines(True)
            number = int(chunk_lines[0].replace("TESTCASE ", ""))
            result[number] = chunk_lines
        return result

    def create_tc_dict(self, parameters):
        testfilenames = os.listdir(parameters.testcases_path)
        testcases = dict()
        pattern = re.compile("([0-9]*)-(.*).xml")
        for tf in testfilenames:
            match = pattern.match(tf)
            if match:
                testcases[int(match.group(1))] = match.group(1) + "-" + match.group(2)
        return testcases

    def write_diff(self, tcname, diff0, diff1, diff2, diff3, diff4):
        res = len(diff0) == 0 and len(diff1) == 0 and len(diff2) == 0 and len(diff3) == 0 and len(diff4) == 0
        output = ""
        if not res:
            output += "(A line with a '-' in front means that it is missing, and one with a '+' in front means that it has been added, compared to the expected result.)\n\n"
            if len(diff0) != 0:
                output += "Partner 0 diff:\n" + escape("".join(diff0)) + "\n\n"
            if len(diff1) != 0:
                output += "Partner 1 diff:\n" + escape("".join(diff1)) + "\n\n"
            if len(diff2) != 0:
                output += "Partner 2 diff:\n" + escape("".join(diff2)) + "\n\n"
            if len(diff3) != 0:
                output += "Partner 3 diff:\n" + escape("".join(diff3)) + "\n\n"
            if len(diff4) != 0:
                output += "Partner 4 diff:\n" + escape("".join(diff4)) + "\n\n"

        self.write_test_result(res, tcname, output)
        return res

    def tc_included(self, tc, parameters):
        if parameters.single_testcase is not None and tc != int(parameters.single_testcase):
            return False
        if parameters.first_testcase is not None and tc < int(parameters.first_testcase):
            return False
        if parameters.last_testcase is not None and tc > int(parameters.last_testcase):
            return False
        return True

    def check_output(self, parameters):
        log("** Parsing test output")
        resdir = glob.glob("run-*")
        if len(resdir) == 0:
            log("No output directories found, cannot parse output!")
            return
        elif len(resdir) != 1:
            log("Spurious directories where I am running, cannot parse output!")
            log(str(resdir))
            return
        resdir = resdir[0]

        tcnames = self.create_tc_dict(parameters)

        output = list(({}, {}, {}, {}, {}))
        expected_output = list(({}, {}, {}, {}, {}))

        for partner in range(5):
            filename = "partner" + str(partner) + ".txt"
            with open(os.path.join(resdir, filename)) as file:
                output[partner] = self.split(file.read())
            with open(os.path.join(parameters.expected_output_path, filename)) as file:
                expected_output[partner] = self.split(file.read())

        tcnos = list(set(expected_output[0].keys()))
        tcnos = [tc for tc in tcnos if self.tc_included(tc, parameters)]
        tcnos.sort()
        if parameters.single_testcase is None:
            self.write_test_result(
                len(set(tcnos) - set(output[0].keys())) == 0, "all_tests_performed",
                "The following tests appear to not have been run: " +
                str(sorted(list(set(tcnos) - set(output[0].keys())))))
        self.write_test_result(
            len(set(output[0].keys()) - set(tcnos)) == 0, "all_tests_have_expected_results",
            "The following tests appear to not to be listed in expected outputs: " +
            str(sorted(list(set(output[0].keys()) - set(tcnos)))))

        for tc in tcnos:
            if tc not in output[0]:
                self.write_test_result(False, tcnames[tc], "Test does not appear to have been run")
                continue
            diff0 = list(difflib.unified_diff(expected_output[0][tc], output[0][tc]))
            diff1 = list(difflib.unified_diff(expected_output[1][tc], output[1][tc]))
            diff2 = list(difflib.unified_diff(expected_output[2][tc], output[2][tc]))
            diff3 = list(difflib.unified_diff(expected_output[3][tc], output[3][tc]))
            diff4 = list(difflib.unified_diff(expected_output[4][tc], output[4][tc]))
            self.write_diff(tcnames[tc], diff0, diff1, diff2, diff3, diff4)
            self.num_tc_performed += 1


def preexec():  # Don't forward signals.
    os.setpgrp()


class Runner:
    def __init__(self):
        self.procs = dict()
        self.syslog = None


    def __launchProcess(self, name, cmd, stdoutToFile=True):
        log(f"Launching process {name} using command line {' '.join(cmd)}")
        if stdoutToFile:
            output = open(name + ".output.txt", "w")
        else:
            output = None

        if sys.platform == "win32":
            proc = subprocess.Popen(cmd,
                                    stdout=output,
                                    stderr=subprocess.STDOUT,
                                    creationflags=subprocess.CREATE_NEW_PROCESS_GROUP)
        else:
            proc = subprocess.Popen(cmd, stdout=output, stderr=subprocess.STDOUT, preexec_fn=preexec)

        self.procs[name] = (proc, output)
        return proc

    def initialize(self, parameters):
        sys.path.append(os.path.join(parameters.test_data_directory, "python"))
        if parameters.check_syslog:
            #load and start syslog server
            log("Starting syslog server")
            from syslog_server import SyslogServer
            self.syslog = SyslogServer(
                "safir_show_config")  #This should be in the PATH here, so no need to give full path

        if parameters.standalone:
            partners = (0, 1, 2, 3, 4)
        elif parameters.multinode or parameters.multicomputer:
            partners = (0, 1)
        elif parameters.slave == "server-1":
            os.environ["SAFIR_INSTANCE"] = "1"
            partners = (2, )
        elif parameters.slave == "client-0":
            os.environ["SAFIR_INSTANCE"] = "2"
            partners = (3, )
        elif parameters.slave == "client-1":
            os.environ["SAFIR_INSTANCE"] = "3"
            partners = (4, )

        log("** Starting safir_control and partners", str(partners))
        self.safir_control = self.__launchProcess(
            "safir_control.0",
            parameters.safir_control_cmd + ("--force-id",
                                            NODE_IDS["server-0" if parameters.slave is None else parameters.slave]))

        if parameters.slave is None or parameters.slave == "server-1":
            self.__launchProcess("dope_main.0", parameters.dope_main_cmd)
        self.__launchProcess("foreach.0", parameters.foreach_cmd)
        self.__launchProcess("safir_status.0", parameters.safir_status_cmd)

        for i in partners:
            self.__launchProcess("dose_test_cpp." + str(i), parameters.dose_test_cpp_cmd + (str(i), ))
            if not parameters.no_dotnet:
                self.__launchProcess("dose_test_dotnet." + str(i), parameters.dose_test_dotnet_cmd + (str(i), ))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java." + str(i), parameters.dose_test_java_cmd + (str(i), ))

        #start second node
        if parameters.multinode:
            os.environ["SAFIR_INSTANCE"] = "1"
            log(" + starting slave node Server_1")
            self.safir_control_1 = self.__launchProcess("safir_control.1",
                                                        parameters.safir_control_cmd + ("--force-id",
                                                                                        NODE_IDS["server-1"]))

            self.__launchProcess("dope_main.1", parameters.dope_main_cmd)
            self.__launchProcess("foreach.1", parameters.foreach_cmd)
            self.__launchProcess("safir_status.1", parameters.safir_status_cmd)

            self.__launchProcess("dose_test_cpp.2", parameters.dose_test_cpp_cmd + ("2", ))
            if not parameters.no_dotnet:
                self.__launchProcess("dose_test_dotnet.2", parameters.dose_test_dotnet_cmd + ("2", ))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java.2", parameters.dose_test_java_cmd + ("2", ))

            os.environ["SAFIR_INSTANCE"] = "2"
            log(" + starting slave node Client_0")
            self.safir_control_2 = self.__launchProcess("safir_control.2",
                                                        parameters.safir_control_cmd + ("--force-id",
                                                                                        NODE_IDS["client-0"]))

            self.__launchProcess("foreach.2", parameters.foreach_cmd)
            self.__launchProcess("safir_status.2", parameters.safir_status_cmd)

            self.__launchProcess("dose_test_cpp.3", parameters.dose_test_cpp_cmd + ("3", ))
            if not parameters.no_dotnet:
                self.__launchProcess("dose_test_dotnet.3", parameters.dose_test_dotnet_cmd + ("3", ))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java.3", parameters.dose_test_java_cmd + ("3", ))

            os.environ["SAFIR_INSTANCE"] = "3"
            log(" + starting slave node Client_1")
            self.safir_control_3 = self.__launchProcess("safir_control.3",
                                                        parameters.safir_control_cmd + ("--force-id",
                                                                                        NODE_IDS["client-1"]))
            self.__launchProcess("foreach.3", parameters.foreach_cmd)
            self.__launchProcess("safir_status.3", parameters.safir_status_cmd)

            self.__launchProcess("dose_test_cpp.4", parameters.dose_test_cpp_cmd + ("4", ))
            if not parameters.no_dotnet:
                self.__launchProcess("dose_test_dotnet.4", parameters.dose_test_dotnet_cmd + ("4", ))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java.4", parameters.dose_test_java_cmd + ("4", ))
            #you can use a line like this to launch sate in the "current" safir_instance.
            #self.__launchProcess("sate.0", ("sate",))

        if "SAFIR_INSTANCE" in os.environ:
            del os.environ["SAFIR_INSTANCE"]  #unset the environment after we've launched the processes.

    #By default processes have 10 seconds to shut down nicely.
    def __kill(self, name, proc, timeout=10):
        try:
            if sys.platform == "win32":
                #can't send CTRL_C_EVENT to processes started with subprocess, unfortunately
                proc.send_signal(signal.CTRL_BREAK_EVENT)
            else:
                proc.terminate()
            for i in range(timeout * 10):
                if proc.poll() is not None:
                    return
                time.sleep(0.1)
            if proc.poll() is None:
                log("Failed to terminate", name, "nicely. Killing it instead!")
                proc.kill()
                proc.wait()
        except OSError:
            pass

    def killprocs(self, results):
        if hasattr(self, "safir_control"):
            self.__kill("safir_control", self.safir_control, 120)  #We give safir_control some extra time to stop
        if hasattr(self, "safir_control_1"):
            self.__kill("safir_control", self.safir_control_1, 120)  #We give safir_control some extra time to stop
        if hasattr(self, "safir_control_2"):
            self.__kill("safir_control", self.safir_control_2, 120)  #We give safir_control some extra time to stop
        if hasattr(self, "safir_control_3"):
            self.__kill("safir_control", self.safir_control_3, 120)  #We give safir_control some extra time to stop

        #Processes have up to 20 seconds to exit from the stop order
        future = time.time() + 20
        for name, (proc, output) in self.procs.items():
            while time.time() < future:
                if proc.poll() is not None:
                    break
                time.sleep(0.1)
            if proc.poll() is None:
                self.__kill(name, proc)
                proc.wait()

            results.write_test_result(proc.returncode == 0, name + ".returncode",
                                      "Process exited with return code " + str(proc.returncode) + ", expected 0")
            if proc.returncode != 0:
                log("", name, "exited with returncode", proc.returncode)
            if output is not None:
                output.close()

        if self.syslog is not None:
            #check that syslog output is empty
            log("Checking syslog contents")
            syslog_data = self.syslog.get_data(3)  # wait for 3 seconds to collect any output
            results.write_test_result(
                len(syslog_data) == 0, "syslog_output", "syslog is not empty:\n" + quoteattr(syslog_data))

    def run_sequencer(self, parameters):
        log("** Running test sequencer with languages set to", parameters.lang0, parameters.lang1, parameters.lang2, parameters.lang3, parameters.lang4)
        log("---- Output from dose_test_sequencer: ----")
        sequencer = self.__launchProcess("dose_test_sequencer", parameters.dose_test_sequencer_cmd, stdoutToFile=False)
        sequencer.wait()
        log("------------------------------------------")

    def wait_for_safir_control(self):
        self.safir_control.wait()
        if hasattr(self, "safir_control_1"):
            self.safir_control_1.wait()
        if hasattr(self, "safir_control_2"):
            self.safir_control_2.wait()
        if hasattr(self, "safir_control_3"):
            self.safir_control_3.wait()

def main():
    start_dir = os.getcwd()
    parameters = Parameters()

    while True:
        os.chdir(start_dir)
        rmdir("dose_test_output")
        mkdir("dose_test_output")
        os.chdir("dose_test_output")

        runner = Runner()
        results = Results()

        completed = False
        try:
            runner.initialize(parameters)
            if parameters.slave:
                runner.wait_for_safir_control()
            else:
                runner.run_sequencer(parameters)
                completed = True
        except:
            log("exception occurred!")
            traceback.print_exc()

        if parameters.multicomputer and parameters.stop_slaves:
            for node in ("server-1", "client-0", "client-1"):
                subprocess.call(["safir_control_cli", "-n", NODE_IDS[node], "-a", "STOP"])

        runner.killprocs(results)

        if completed:
            results.check_output(parameters)

            if results.num_tc_failed == 0:
                log("== All tests were successful!!")
            else:
                log("!!", results.num_tc_failed, "testcases appear to have failed!")

            if (results.num_tc_performed < 20 and parameters.single_testcase is None
                    and parameters.first_testcase is None and parameters.last_testcase is None):
                log("!! Less than 20 testcases seem to have been performed, this is a sign of trouble!")
                return 1

        if not parameters.run_until_failure or results.num_tc_failed > 0:
            break

    return 0

sys.exit(main())

#!/usr/bin/env python
# -*- coding: utf-8 -*-
###############################################################################
#
# Copyright Saab AB, 2011-2013 (http://safir.sourceforge.net)
#
# Created by: Lars Hagstrom (lars@foldspace.nu)
#
###############################################################################
#
# This file is part of Safir SDK Core.
#
# Safir SDK Core is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# Safir SDK Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Safir SDK Core.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
from __future__ import print_function
import sys, subprocess, os, shutil, difflib, time, xml.dom.minidom, glob, re, traceback, stat, signal
from xml.sax.saxutils import escape

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    import urllib.request as urllib
except ImportError:
    import urllib

def log(*args, **kwargs):
    print(*args, **kwargs)
    sys.stdout.flush()

def rmdir(directory):
    if os.path.exists(directory):
        try:
            shutil.rmtree(directory)
        except OSError:
            log("Failed to remove directory, will retry")
            time.sleep(0.2)
            shutil.rmtree(directory)

def mkdir(newdir):
    """works the way a good mkdir should :)
        - already exists, silently complete
        - regular file in the way, raise an exception
        - parent directory(ies) does not exist, make them as well
    """
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired " \
                      "dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            mkdir(head)
        if tail:
            os.mkdir(newdir)

class Parameters:
    def __init__(self):
        from optparse import OptionParser
        import tempfile

        parser = OptionParser()
        parser.add_option("--jenkins", action="store_true",dest="jenkins",default=False,
                          help="Set up the needed environment variables for a Jenkins automated build," +
                          "and respect the langX matrix variables")
        parser.add_option("--multinode", action="store_true",dest="multinode",default=False,
                          help="Run multinode tests instead of standalone tests. Both nodes are run on this computer.")
        parser.add_option("--multicomputer", action="store_true",dest="multicomputer",default=False,
                          help="Run multicomputer tests instead of standalone tests.")
        parser.add_option("--autostart-slave", action="store_true", dest="autostart_slave",default=False,
                          help="Automatically start a multicomputer slave (Server_1) through jenkins." +
                          "This is only applicable when using --multicomputer, and is implied when using --jenkins")
        parser.add_option("--slave", action="store_true",dest="slave",default=False,
                          help="Be a multicomputer slave")
        parser.add_option("--no-syslog", action="store_false",dest="check_syslog",default=True,
                          help="Do not check syslog output")
        parser.add_option("--no-java", action="store_true",dest="no_java",default=False,
                          help="Do not run java partners")
        parser.add_option("--lang0", action="store",dest="lang0",default="cpp",
                          help="Which partner 0 to run. [default: %default]. "
                          "If --jenkins is specified the Languages environment variable will override this.")
        parser.add_option("--lang1", action="store",dest="lang1",default="cpp",
                          help="Which partner 1 to run. [default: %default]. "
                          "If --jenkins is specified the Languages environment variable will override this.")
        parser.add_option("--lang2", action="store",dest="lang2",default="cpp",
                          help="Which partner 2 to run. [default: %default]. "
                          "If --jenkins is specified the Languages environment variable will override this.")
        parser.add_option("--single-testcase", action="store",
                          help="Run only a single testcase. Note that using this option will cause the script "
                          "to print some other errors, since not all tests are run")
        (options,args) = parser.parse_args()

        self.lang0 = options.lang0
        self.lang1 = options.lang1
        self.lang2 = options.lang2

        self.multinode = options.multinode
        self.multicomputer = options.multicomputer
        self.slave = options.slave
        self.check_syslog = options.check_syslog
        self.standalone = not options.multinode and not options.multicomputer and not options.slave

        self.no_java = options.no_java

        if options.autostart_slave and not self.multicomputer:
            log("--autostart-slave can only be used together with --multinode")
            sys.exit(1)
        if options.slave and options.multicomputer:
            log("Don't specify both --slave and --multinode")
            sys.exit(1)

        self.autostart_jenkins_slave = options.autostart_slave or (options.jenkins and self.multicomputer)

        if options.jenkins:
            #make stdout unbuffered for more direct output in jenkins log
            sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

            #Get env variables if they're set
            langs= os.environ.get("Languages")
            if langs is not None:
                splitlangs = langs.split("-")
                if len(splitlangs) != 3:
                    raise Exception("Invalid format of Languages environment variable: " + langs)
                self.lang0 = splitlangs[0]
                self.lang1 = splitlangs[1]
                self.lang2 = splitlangs[2]

        #This relies on the fact that we're installed in the bin directory on both linux and windows.
        install_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)),"..")

        #Get the default dou directory and set it as an environment variable that can be
        #picked up by the typesystem.ini that belongs to the test suite.
        #Note: The last part of this path is set by cmake during configuration/installation.
        os.environ["SAFIR_TEST_SUITE_DOU_DIRECTORY"] = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_DOU_BASE@")

        #Note: Last half of path is set by cmake during configuration/installation.
        self.test_data_directory = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_TEST_DATA@")
        log(self.test_data_directory)

        if self.standalone:
            config = "standalone"
        elif self.multinode:
            config = "multinode"
        elif self.multicomputer or self.slave:
            config = "multicomputer"

        #Set up to use our own test configuration
        os.environ["SAFIR_TEST_CONFIG_OVERRIDE"] = os.path.join(self.test_data_directory,
                                                                "dose",
                                                                "test_config",
                                                                config)

        jar_install_path = os.path.join(install_dir,
                                        "@SAFIR_INSTALL_DESTINATION_JAR@")

        self.safir_control_cmd = ("safir_control",)

        self.dope_main_cmd = ("dope_main",)
        self.foreach_cmd = ("foreach",)

        self.dose_test_cpp_cmd = ("dose_test_cpp",)
        #self.dose_test_ada_cmd = ("dose_test_ada",)
        #self.dose_test_ada_exe_name = self.dose_test_ada_cmd[0] + (".exe" if sys.platform == "win32" else "")
        self.dose_test_dotnet_cmd = ("dose_test_dotnet",)
        self.dose_test_java_cmd = ("java", "-Xcheck:jni", "-Xfuture", "-jar",
                                   os.path.join(jar_install_path,"dose_test_java.jar"))

        self.testcases_path = os.path.join(self.test_data_directory, "dose", "testcases")
        self.dose_test_sequencer_cmd = ("dose_test_sequencer",
                                        "-d",
                                        self.testcases_path,
                                        #"--context", "-1", #random context
                                        "-l", self.lang0, self.lang1, self.lang2)
        self.single_testcase = options.single_testcase
        if options.single_testcase is not None:
            self.dose_test_sequencer_cmd += ("--first", options.single_testcase,
                                             "--last", options.single_testcase)

        if self.multinode or self.multicomputer:
            self.dose_test_sequencer_cmd += ("--multinode",)

        self.expected_output_path = os.path.join(self.test_data_directory,
                                                 "dose",
                                                 "output_standalone" if self.standalone else "output_multinode")

        #this is needed for multicomputer tests
        self.tempdir = tempfile.mkdtemp(prefix="dose_test_backup")



class Results:
    def __init__(self):
        self.num_tc_failed = 0
        self.num_tc_performed = 0

    def write_test_result(self, expr, name, output):
        with open(name + ".junit.xml","w") as junitfile:
            junitfile.write("<?xml version=\"1.0\"?>\n<testsuite>\n  <testcase name=\"" + name + "\" classname=\"dose_test\"")
            if expr:
                """success"""
                junitfile.write("/>\n")
            else:
                """failure"""
                log(" -",name, "failed!")
                self.num_tc_failed += 1
                junitfile.write(">\n    <error message=\"Failed\">" +
                                output +
                                "\n</error>\n  </testcase>\n")
            junitfile.write("</testsuite>")
        return expr

    def split(self,data):
        result = dict()
        split_data = data.split("==========================================================================\n")
        for chunk in split_data:
            if len(chunk) == 0:
                continue
            chunk_lines = chunk.splitlines(True)
            number = int(chunk_lines[0].replace("TESTCASE ",""))
            result[number] = chunk_lines
        return result

    def create_tc_dict(self,parameters):
        testfilenames = os.listdir(parameters.testcases_path)
        testcases = dict()
        pattern = re.compile("([0-9]*)-(.*).xml")
        for tf in testfilenames:
            match = pattern.match(tf)
            if match:
                testcases[int(match.group(1))] = match.group(1) + "-" + match.group(2)
        return testcases


    def write_diff(self,tcname, tcno, diff0, diff1, diff2):
        res = len(diff0) == 0 and len(diff1) == 0 and len(diff2) == 0
        output = ""
        if not res:
            output += "(A line with a '-' in front means that it is missing, and one with a '+' in front means that it has been added, compared to the expected result.)\n\n"
            if len(diff0) != 0:
                output += "Partner 0 diff:\n" + escape("".join(diff0)) + "\n\n"
            if len(diff1) != 0:
                output += "Partner 1 diff:\n" + escape("".join(diff1)) + "\n\n"
            if len(diff2) != 0:
                output += "Partner 2 diff:\n" + escape("".join(diff2)) + "\n\n"

        self.write_test_result(res, tcname, output)
        return res

    def check_output(self,parameters):
        log("** Parsing test output")
        resdir = glob.glob("run0-*")
        if len(resdir) == 0:
            log("No output directories found, cannot parse output!")
            return
        elif len(resdir) != 1:
            log("Spurious directories where I am running, cannot parse output!")
            log(str(resdir))
            return
        resdir = resdir[0]

        tcnames = self.create_tc_dict(parameters)

        output = list((None,None,None))
        expected_output = list((None,None,None))
        alltc = list((None,None,None))

        for partner in range(3):
            filename = "partner" + str(partner) + ".txt"
            with open(os.path.join(resdir,filename)) as file:
                output[partner] = self.split(file.read())
            with open(os.path.join(parameters.expected_output_path,filename)) as file:
                expected_output[partner] = self.split(file.read())

        tcnos = list(set(expected_output[0].keys()))
        tcnos.sort()
        if parameters.single_testcase is None:
            self.write_test_result(len (set(tcnos) - set(output[0].keys())) == 0,
                                   "all_tests_performed",
                                   "The following tests appear to not have been run: "+
                                   str(sorted(list(set(tcnos) - set(output[0].keys())))))
        self.write_test_result(len (set(output[0].keys())- set(tcnos)) == 0,
                               "all_tests_have_results",
                               "The following tests appear to not to be listed in expected outputs: "+
                               str(sorted(list(set(output[0].keys())- set(tcnos)))))

        for tc in tcnos:
            if parameters.single_testcase is not None and tc != int(parameters.single_testcase):
                continue
            if tc not in output[0]:
                self.write_test_result(False,
                                       tcnames[tc],
                                       "Test does not appear to have been run")
                continue
            diff0 = list(difflib.unified_diff(expected_output[0][tc],output[0][tc]))
            diff1 = list(difflib.unified_diff(expected_output[1][tc],output[1][tc]))
            diff2 = list(difflib.unified_diff(expected_output[2][tc],output[2][tc]))
            self.write_diff(tcnames[tc], tc, diff0, diff1, diff2)
            self.num_tc_performed += 1


def preexec(): # Don't forward signals.
    os.setpgrp()

class Runner:
    def __init__(self):
        self.procs = dict()
        self.syslog = None

    def __launchProcess(self, name, cmd, stdoutToFile = True):
        if stdoutToFile:
            output = open(name + ".output.txt","w")
        else:
            output = None
        cf = 0
        if sys.platform == "win32":
            proc = subprocess.Popen(cmd,
                                    stdout = output,
                                    stderr = subprocess.STDOUT,
                                    creationflags = subprocess.CREATE_NEW_PROCESS_GROUP)
        else:
            proc = subprocess.Popen(cmd,
                                    stdout = output,
                                    stderr = subprocess.STDOUT,
                                    preexec_fn = preexec)

        self.procs[name] = (proc,output)
        return proc

    def initialize(self,parameters):
        sys.path.append(os.path.join(parameters.test_data_directory,"python"))
        if parameters.check_syslog:
           #load and start syslog server
           from syslog_server import SyslogServer
           self.syslog = SyslogServer("safir_show_config") #This should be in the PATH here, so no need to give full path

        if parameters.standalone:
            partners = (0,1,2)
        elif parameters.multinode or parameters.multicomputer:
            partners = (0,1)
        else: #slave
            os.environ["SAFIR_INSTANCE"] = "1"
            partners = (2,)

        log("** Starting safir_control and partners", str(partners))
        self.safir_control = self.__launchProcess("safir_control.0",
                                                  parameters.safir_control_cmd +
                                                  ("--force-id", ("888888" if parameters.slave else "999999")))

        self.__launchProcess("dope_main.0", parameters.dope_main_cmd)
        self.__launchProcess("foreach.0", parameters.foreach_cmd)

        for i in partners:
            self.__launchProcess("dose_test_cpp." + str(i), parameters.dose_test_cpp_cmd + (str(i),))
            self.__launchProcess("dose_test_dotnet." + str(i), parameters.dose_test_dotnet_cmd + (str(i),))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java." + str(i), parameters.dose_test_java_cmd + (str(i),))

        #start second node
        if parameters.multinode:
            os.environ["SAFIR_INSTANCE"] = "1"
            log(" + starting slave node")
            self.safir_control_1 = self.__launchProcess("safir_control.1",
                                                        parameters.safir_control_cmd + ("--force-id", "888888"))

            self.__launchProcess("dope_main.1", parameters.dope_main_cmd)
            self.__launchProcess("foreach.1", parameters.foreach_cmd)

            self.__launchProcess("dose_test_cpp.2", parameters.dose_test_cpp_cmd + ("2",))
            self.__launchProcess("dose_test_dotnet.2", parameters.dose_test_dotnet_cmd + ("2",))
            if not parameters.no_java:
                self.__launchProcess("dose_test_java.2", parameters.dose_test_java_cmd + ("2",))

        if "SAFIR_INSTANCE" in os.environ:
            del os.environ["SAFIR_INSTANCE"] #unset the environment after we've launched the processes.

    #By default processes have 10 seconds to shut down nicely.
    def __kill(self, name, proc, timeout = 10):
        try:
            if sys.platform == "win32":
                #can't send CTRL_C_EVENT to processes started with subprocess, unfortunately
                proc.send_signal(signal.CTRL_BREAK_EVENT)
            else:
                proc.terminate()
            for i in range (timeout * 10):
                if proc.poll() is not None:
                    return
                time.sleep(0.1)
            if proc.poll() is None:
                log("Failed to terminate", name, "nicely. Killing it instead!")
                proc.kill()
                proc.wait()
        except OSError:
            pass

    def killprocs(self, results):
        self.__kill("safir_control", self.safir_control,120) #We give safir_control some extra time to stop
        if hasattr(self,"safir_control_1"):
            self.__kill("safir_control", self.safir_control_1,120) #We give safir_control some extra time to stop

        #Processes have up to 20 seconds to exit from the stop order
        future = time.time() + 20 #ten seconds
        for name, (proc,output) in self.procs.items():
            while time.time() < future:
                if proc.poll() is not None:
                    break;
                time.sleep(0.1)
            if proc.poll() is None:
                self.__kill(name,proc)
                proc.wait()

            results.write_test_result(proc.returncode == 0,
                                      name + ".returncode",
                                      "Process exited with return code " + str(proc.returncode) + ", expected 0")
            if proc.returncode != 0:
                log("", name, "exited with returncode", proc.returncode)
            if output is not None:
                output.close()

        if self.syslog is not None:
            #check that syslog output is empty
            syslog_data = self.syslog.get_data(10) # wait for 10 seconds to collect any output
            results.write_test_result(len(syslog_data) == 0,
                                      "syslog_output",
                                      "syslog is not empty:\n" + xml.sax.saxutils.quoteattr(syslog_data))

    def run_sequencer(self,parameters):
        log("** Running test sequencer with languages set to", parameters.lang0, parameters.lang1, parameters.lang2)
        log("---- Output from dose_test_sequencer: ----")
        sequencer = self.__launchProcess("dose_test_sequencer",
                                         parameters.dose_test_sequencer_cmd,
                                         stdoutToFile = False)
        sequencer.wait()
        log("------------------------------------------")

    def wait_for_safir_control(self):
        self.safir_control.wait()
        if hasattr(self,"safir_control_1"):
            self.safir_control_1.wait()

class JenkinsInterface:
    def __init__(self, parameters):
        self.server = os.environ.get("JENKINS_URL_OVERRIDE")
        if self.server is None:
            self.server = os.environ.get("JENKINS_URL")
            if self.server is None:
                log("No JENKINS_URL found")
                sys.exit(1)
        log("Using jenkins server",self.server)

        cliurl = self.server + "/jnlpJars/jenkins-cli.jar"
        #log "will download jenkins-cli.jar using url", cliurl
        self.clijar = os.path.join(parameters.tempdir,"jenkins-cli.jar")
        urllib.urlretrieve(cliurl,self.clijar)

    def __run_command(self,cmd,input = None):
        args = list()
        args += ("java","-jar",self.clijar,"-s",self.server)

        if type(cmd) is str:
            args.append(cmd)
        else:
            args += cmd

        proc = subprocess.Popen(args,
                                stdout = subprocess.PIPE,
                                stderr = subprocess.STDOUT,
                                stdin = None if input is None else subprocess.PIPE)
        res = proc.communicate(input)
        if proc.returncode == 0:
            return res[0]
        else:
            log(res[0])
            raise Exception("Failed to run jenkins command", str(args))

    def __run_groovy(self,script):
        return self.__run_command(("groovy","="),script)

    def help(self):
        return self.__run_command("groovy")

    def who_am_i(self):
        return self.__run_command("who-am-i")

    def list_jobs(self):
        output = self.__run_groovy("import hudson.model.*\n" +
                                   "for(item in Hudson.instance.items) {println(item.name)}")
        jobs = output.splitlines()
        return jobs

    def __to_bool(self,output):
        output = output.strip()
        if output not in ("true","false"):
            raise Exception("Unexpected boolean value:" + output)
        return output == "true"


    def is_building(self,job):
        script = """
                 import hudson.model.*
                 item = Hudson.instance.getItem("JOB_NAME")
                 println(item.isBuilding())
                 """
        script = script.replace("JOB_NAME",job)
        output = self.__run_groovy(script)
        return self.__to_bool(output)

    def wait_for_job(self,job,duration=None):
        if duration is None:
            while self.is_building(job):
                time.sleep(1.0)
        else:
            future = time.time() + duration
            while time.time() < future and self.is_building(job):
                time.sleep(1.0)

    def build(self,job):
        self.__run_command(("build",job))
        while not self.is_building(job):
            time.sleep(1.0)

    def cancel_job(self,job):
        script = """
                 import hudson.model.*
                 item = Hudson.instance.getItem("JOB_NAME")
                 executor = item.getLastBuild().getExecutor()
                 if (executor != null)
                 {
                   executor.interrupt()
                 }
                 """
        script = script.replace("JOB_NAME",job)
        self.__run_groovy(script)

    def get_console_output(self,job):
        script = """
                 import hudson.model.*
                 item = Hudson.instance.getItem("JOB_NAME")
                 build = item.getLastBuild()
                 text = build.getLogText()
                 println ("text length " + text.length())
                 //build.getLogText().writeLogTo(0, System.out)
                 println(build.getLog())
                 println ("end log")
                 """
        script = script.replace("JOB_NAME",job)
        log(self.__run_groovy(script))


    def terminate_safir_control(self,job):
        """Send a SIGTERM to dose main, to let the slave script end nicely"""
        script = """
                 import hudson.model.*
                 import hudson.util.*
                 item = Hudson.instance.getItem("JOB_NAME")
                 executor = item.getLastBuild().getExecutor()
                 if (executor != null)
                 {
                   computer = executor.getOwner()
                   RemotingDiagnostics.executeGroovy("println \\"killall safir_control\\".execute().text", computer.getChannel())
                 }
                 """
        script = script.replace("JOB_NAME",job)
        self.__run_groovy(script)


class JenkinsController:
    def __init__(self,parameters):
        self.interface = JenkinsInterface(parameters)
        self.job_name = "multinode-test-slave-1"
        auth = self.interface.who_am_i()
        if auth.find("authenticated") == -1:
            log("Failed to authenticate using ssh keys, please check that keys are set up correctly")
            log(auth)
            sys.exit(1)

    def start_slave(self):
        log(" * Starting slave")
        self.interface.wait_for_job(self.job_name)
        self.interface.build(self.job_name)

    def stop_slave(self):
        try:
            log(" * Stopping slave")
            self.interface.terminate_safir_control(self.job_name)
            self.interface.wait_for_job(self.job_name,60)
            self.interface.cancel_job(self.job_name)
            self.interface.wait_for_job(self.job_name)
        except:
            log("Failed to stop slave!")


def main():
    rmdir("dose_test_output")
    mkdir("dose_test_output")
    os.chdir("dose_test_output")

    parameters = Parameters()

    if parameters.autostart_jenkins_slave:
        jenkinsController = JenkinsController(parameters)
        jenkinsController.start_slave()

    runner = Runner()
    results = Results()

    completed = False
    try:
        runner.initialize(parameters)
        if parameters.slave:
            runner.wait_for_safir_control()
        else:
            runner.run_sequencer(parameters)
        completed = True
    except:
        log("exception occurred!")
        traceback.print_exc()

    runner.killprocs(results)
    if parameters.autostart_jenkins_slave:
        jenkinsController.stop_slave()

    if completed:
        results.check_output(parameters)

        if results.num_tc_failed == 0:
            log("== All tests were successful!!")
        else:
            log("!!",results.num_tc_failed, "testcases appear to have failed!")

        if results.num_tc_performed<20 and parameters.single_testcase is None:
            log("!! Less than 20 testcases seem to have been performed, this is a sign of trouble!")
            return 1

    return 0


result = main()

sys.exit(result)

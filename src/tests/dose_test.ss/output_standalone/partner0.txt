==========================================================================
TESTCASE 0
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 recieves a local message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalMessage><Info xml:space="preserve">Local Message</Info></DoseTest.LocalMessage>


==========================================================================
TESTCASE 1
Description: Test of sending and subscribing of global messages
Expectation: Consumer 0 recieves a global message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Global Message</Info></DoseTest.GlobalMessage>


==========================================================================
TESTCASE 2
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 does NOT recieve a local message in a multinode conf, for singlenode consumer 0 recieves the message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalMessage><Info xml:space="preserve">Local Message</Info></DoseTest.LocalMessage>


==========================================================================
TESTCASE 4
Description: Test of unsubscription of local messages
Expectation: Consumer 0 recieves ONE local message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalMessage><Info xml:space="preserve">Local Message</Info></DoseTest.LocalMessage>


==========================================================================
TESTCASE 5
Description: Test of unsubscription of global messages
Expectation: Parter 0/Consumer 0 recieves ONE global message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Global Message</Info></DoseTest.GlobalMessage>


==========================================================================
TESTCASE 6
Description: Test of simulate overflows in message out queues.
Expectation: Overflow exception followed by a not overflow notification
--------- Setup -----------
--------- Test  -----------
Consumer 0: SimulateOverflows(false, true)
Caught Overflow exception
Consumer 0: SimulateOverflows(false, false)
Consumer 0: OnNotMessageOverflow

==========================================================================
TESTCASE 8
Description: Test of sending and subscribing of to a message with all types defined in it.
Expectation: Consumer 0 recieves a global message with the correct data in it.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.ComplexGlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalMessage><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve">&amp;&lt; &gt; &quot; '</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><BinaryMember></BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0"></Binary><Binary index="1">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>32</Int32><Int32>-32</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>32</Float32><Float32>-32</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><BooleanSequenceMember><Boolean>true</Boolean><Boolean>false</Boolean></BooleanSequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve"></String><String xml:space="preserve">rifaS</String></StringSequenceMember><EntityIdSequenceMember><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdSequenceMember><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>0</InstanceId><InstanceId>SomeInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>0</ChannelId><ChannelId>SomeChannel</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary></Binary><Binary>b25jZSBtb3JlLi4u</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>32001</Ampere32><Ampere32>-32001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>32002</CubicMeter32><CubicMeter32>-32002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>32003</Hertz32><Hertz32>-32003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>32005</Kelvin32><Kelvin32>-32005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>32006</Kilogram32><Kilogram32>-32006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>32007</Meter32><Meter32>-32007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>32008</MeterPerSecond32><MeterPerSecond32>-32008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>32009</MeterPerSecondSquared32><MeterPerSecondSquared32>-32009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>32010</Newton32><Newton32>-32010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>32011</Pascal32><Pascal32>-32011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>32012</Radian32><Radian32>-32012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>32013</RadianPerSecond32><RadianPerSecond32>-32013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>32014</RadianPerSecondSquared32><RadianPerSecondSquared32>-32014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>32015</Second32><Second32>-32015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>32016</SquareMeter32><SquareMeter32>-32016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>32017</Steradian32><Steradian32>-32017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>32018</Volt32><Volt32>-32018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>32019</Watt32><Watt32>-32019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>64001</Ampere64><Ampere64>-64001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>64002</CubicMeter64><CubicMeter64>-64002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>64003</Hertz64><Hertz64>-64003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>64004</Joule64><Joule64>-64004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>64005</Kelvin64><Kelvin64>-64005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>64006</Kilogram64><Kilogram64>-64006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>64007</Meter64><Meter64>-64007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>64008</MeterPerSecond64><MeterPerSecond64>-64008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>64009</MeterPerSecondSquared64><MeterPerSecondSquared64>-64009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>64010</Newton64><Newton64>-64010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>64011</Pascal64><Pascal64>-64011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>64012</Radian64><Radian64>-64012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>64013</RadianPerSecond64><RadianPerSecond64>-64013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>64014</RadianPerSecondSquared64><RadianPerSecondSquared64>-64014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>64015</Second64><Second64>-64015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>64016</SquareMeter64><SquareMeter64>-64016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>64017</Steradian64><Steradian64>-64017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>64018</Volt64><Volt64>-64018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>64019</Watt64><Watt64>-64019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalMessage>


==========================================================================
TESTCASE 9
Description: Test of sending and subscribing of global message of around 10Mb
Expectation: Consumer 0 recieves a global message and no errors are reported by the binary checker.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.ComplexGlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalMessage><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve"></StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve">Safir</String><String index="1" xml:space="preserve"></String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary><Binary index="1"></Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalMessage>


==========================================================================
TESTCASE 100
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (local)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 101
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 102
Description: Test of unsubscription of a service registration (local)
Expectation: Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 103
Description: Test the registration subscription blacklist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 104
Description: Test the registration subscription whitelist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 105
Description: Test of registration subscription including subclasses (local)
Expectation: Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_1

==========================================================================
TESTCASE 106
Description: Test of registration susbcription restart (local)
Expectation: Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 107
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (Global)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 108
Description: Test of registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 109
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_1

==========================================================================
TESTCASE 110
Description: Test of unsubscription of a service registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 111
Description: Test of registering of a service handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_0

==========================================================================
TESTCASE 112
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalService
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 113
Description: Test of registering a service handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 114
Description: Test of registering a service handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 150
Description: Testing of pending registration of global service handler
Expectation: Global Service should be Completed (cons 1) and Registered (cons 0)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 151
Description: Testing of pending registration of global service handler on one node
Expectation: Global Service should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 152
Description: Testing of removing pending registrations within one application
Expectation: Global Service: Consumer 0 gets a Completed, Service is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 153
Description: Testing of Pending registrations between nodes
Expectation: Global Service 0 gets registered (by someone else). The service gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 154
Description: Test of overregistering of global service handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = GLOBAL_HANDLER_0

==========================================================================
TESTCASE 155
Description: Testing of Pending registrations between apps in same node
Expectation: Partner 0 gets OnRegistered, OnUnregistered, OnCompletedRegistration and OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 200
Description: Test of using local service (within one partner)
Expectation: Partner0/Consumer 0 should get a service request and Partner0/consumer 1 should get a service response
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

==========================================================================
TESTCASE 201
Description: Test of using local service (between two partners)
Expectation: Consumer 0 should get a service request
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

==========================================================================
TESTCASE 202
Description: Test of using global service
Expectation: Partner2/Consumer 0 should get a service request and Partner0/consumer 1 should get a successful response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 203
Description: Test of sending a service request to a non-existing handler
Expectation: Partner0/consumer 1 should get an error response saying "not registered handler"
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The handler -3751679928010642333 is not registered for the type DoseTest.GlobalService!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 204
Description: Test of service request timeout (local request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirTimeout</Code><AdditionalInfo xml:space="preserve">The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalService!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 205
Description: Test of service request timeout (global request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirTimeout</Code><AdditionalInfo xml:space="preserve">The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalService!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 206
Description: Test of simulate overflow in request out queue
Expectation: Partner0/Consumer 1 should get an overflow exception and then a OnNotRequestOverflow
--------- Setup -----------
Consumer 1: SimulateOverflows(false, true)
--------- Test  -----------
Caught Overflow exception
Consumer 1: SimulateOverflows(false, false)
Consumer 1: OnNotRequestOverflow
==========================================================================
TESTCASE 207
Description: Test simulate overflow on service request in queue locally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 208
Description: Test simulate overflow on service request in queue globally
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 209
Description: Test overflow on service request in queue globally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses. Partner 2 should get 10 requests.
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 210
Description: Test overflow on service request in queue locally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses. Partner 2 should get 10 requests.
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

==========================================================================
TESTCASE 211
Description: Test of sending a local service request to a handler on another node
Expectation: Partner0/consumer 1 should get an error response saying "not registered handler"
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

==========================================================================
TESTCASE 212
Description: Test of sending a local service request to a handler that is registered on both nodes.
Expectation: P0/C1 and P2/C1 should get ONE response, P1 and P2 should get one request each.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalService></DoseTest.LocalService>

==========================================================================
TESTCASE 213
Description: Test that only the specified handler gets the request.
Expectation: Each partner should receive one (and only one) request, and p0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = 816403178076060765
  HandlerStr = 816403178076060765
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulService><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulService>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The handler 429369164906064768 is not registered for the type DoseTest.GlobalService!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService></DoseTest.GlobalService>

==========================================================================
TESTCASE 214
Description: Test of using global service with all types defined in it
Expectation: Partner0/Consumer 0 should get a service request with lots of stuff in it.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.ComplexGlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalService><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve">Safir</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><BinaryMember></BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0"></Binary><Binary index="1">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>32</Int32><Int32>-32</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>32</Float32><Float32>-32</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><BooleanSequenceMember><Boolean>true</Boolean><Boolean>false</Boolean></BooleanSequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve"></String><String xml:space="preserve">rifaS</String></StringSequenceMember><EntityIdSequenceMember><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdSequenceMember><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>0</InstanceId><InstanceId>SomeInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>0</ChannelId><ChannelId>SomeChannel</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary></Binary><Binary>b25jZSBtb3JlLi4u</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>32001</Ampere32><Ampere32>-32001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>32002</CubicMeter32><CubicMeter32>-32002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>32003</Hertz32><Hertz32>-32003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>32005</Kelvin32><Kelvin32>-32005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>32006</Kilogram32><Kilogram32>-32006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>32007</Meter32><Meter32>-32007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>32008</MeterPerSecond32><MeterPerSecond32>-32008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>32009</MeterPerSecondSquared32><MeterPerSecondSquared32>-32009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>32010</Newton32><Newton32>-32010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>32011</Pascal32><Pascal32>-32011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>32012</Radian32><Radian32>-32012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>32013</RadianPerSecond32><RadianPerSecond32>-32013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>32014</RadianPerSecondSquared32><RadianPerSecondSquared32>-32014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>32015</Second32><Second32>-32015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>32016</SquareMeter32><SquareMeter32>-32016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>32017</Steradian32><Steradian32>-32017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>32018</Volt32><Volt32>-32018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>32019</Watt32><Watt32>-32019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>64001</Ampere64><Ampere64>-64001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>64002</CubicMeter64><CubicMeter64>-64002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>64003</Hertz64><Hertz64>-64003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>64004</Joule64><Joule64>-64004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>64005</Kelvin64><Kelvin64>-64005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>64006</Kilogram64><Kilogram64>-64006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>64007</Meter64><Meter64>-64007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>64008</MeterPerSecond64><MeterPerSecond64>-64008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>64009</MeterPerSecondSquared64><MeterPerSecondSquared64>-64009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>64010</Newton64><Newton64>-64010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>64011</Pascal64><Pascal64>-64011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>64012</Radian64><Radian64>-64012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>64013</RadianPerSecond64><RadianPerSecond64>-64013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>64014</RadianPerSecondSquared64><RadianPerSecondSquared64>-64014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>64015</Second64><Second64>-64015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>64016</SquareMeter64><SquareMeter64>-64016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>64017</Steradian64><Steradian64>-64017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>64018</Volt64><Volt64>-64018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>64019</Watt64><Watt64>-64019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalService>

==========================================================================
TESTCASE 215
Description: Test of using global service of around 10Mb
Expectation: Partner0/Consumer 0 should get a service request and no errors should be reported by the binary checker.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.ComplexGlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalService><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve"></StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve">Safir</String><String index="1" xml:space="preserve"></String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary><Binary index="1"></Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalService>

==========================================================================
TESTCASE 300
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 301
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Parter 0/Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 302
Description: Test of unsubscription of a entity registration (local)
Expectation: Partner 0/Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 303
Description: Test the registration subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 304
Description: Test the registration subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 305
Description: Test of registration entity handler subscription including subclasses (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootEntity
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_1

==========================================================================
TESTCASE 306
Description: Test of registration entity handler subscription restart (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 307
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (Global)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 308
Description: Test of entity handler registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 309
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_1

==========================================================================
TESTCASE 310
Description: Test of unsubscription of a entity handler registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 311
Description: Test of registering of an entity handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_0

==========================================================================
TESTCASE 312
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 313
Description: Test of registering a entity handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 314
Description: Test of registering a entity handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 350
Description: Testing of pending registration of global entity handler
Expectation: Global Entity should be Completed (part 0/cons 1) and Registered (part 0/cons 0)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 351
Description: Testing of pending registration of global entity handler on one node
Expectation: Global Entity should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 352
Description: Testing of removing pending entity registrations within one application
Expectation: Global Entity: Consumer 0 gets a Completed, Entity is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 353
Description: Testing of Pending entity handler registrations between nodes
Expectation: Global Entity 0 gets registered (by someone else). The entity gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 354
Description: Test of double registration of global entity handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = GLOBAL_HANDLER_0

==========================================================================
TESTCASE 355
Description: Testing of registration of global entity injection handler
Expectation: partner 0/consumer 1 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity. Consumer 0 receives OnRegistered for InjectableEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 0)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>
  Current   = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 356
Description: Testing that iex injections are transfered to application when registering a corresponding handler
Expectation: partner 0/consumer 1 receives OnInjectedNewEntity for InjectableEntity instance 888888 (Info is "Some new info" and Int32Member is 123) and instance 999999 (Int64Member is 123456) followed by an OnInitialInjectionsDone. The read values correspond to the injected ones.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 888888)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info><Int32Member>123</Int32Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 999999)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>123456</Int64Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: Read entity (DoseTest.InjectableEntity, 888888):
  EntityId  = (DoseTest.InjectableEntity, 888888):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info><Int32Member>123</Int32Member></DoseTest.InjectableEntity>

Consumer 1: Read entity (DoseTest.InjectableEntity, 999999):
  EntityId  = (DoseTest.InjectableEntity, 999999):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>123456</Int64Member></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 357
Description: Testing of injection for a non-existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 358
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after the injectDelete
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 654321)
  Current  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 359
Description: Test that registering an injection handler for a type that has no injection property is ok.
Expectation: partner 0/consumer 0 receives OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 360
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 gets new and delete subscription
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 987654)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 987654)
  Current  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some new info</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 361
Description: Inject update and inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity, one OnInjectedUpdatedEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after each injection.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">First inject</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Second inject</Info></DoseTest.InjectableEntity>
  Current   = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">First inject</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 654321)
  Current  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Second inject</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 362
Description: Postpone OnInjectedNewEntity, redispatch is True.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and two OnInjectedNewEntity. The first P2 read gives a "not found" exception, second read gives an entity.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">qwerty</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">qwerty</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 363
Description: Postpone OnInjectedNewEntity, redispatch is False.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity (instance 654321) and one OnInjectedNewEntity(instance 123456).
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">qwerty</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 123456)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">ytrewq</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 364
Description: Test incomplete injection state.
Expectation: The first read gives a not found exception. The second read gives an existing instance
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">111111</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">222222</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: Read entity (DoseTest.InjectableEntity, 654321):
  EntityId  = (DoseTest.InjectableEntity, 654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">222222</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 365
Description: Reject of injected entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and OnInjectedNewEntity. P0 read gives 'not found'.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">qwerty</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 366
Description: Test a SetChanges call in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>99999999</Int64Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 367
Description: Test a SetAll call in an OnInjectedUpdated callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone, an OnInjectedNewEntity, and an OnInjectedUpdatedEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>99999999</Int64Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>777666</Int64Member></DoseTest.InjectableEntity>
  Current   = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>99999999</Int64Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Int64Member

==========================================================================
TESTCASE 368
Description: Test a SetChanges call, with an enity that isn't changed, in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The SetChanges call gives a software violation exception.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Int64Member>99999999</Int64Member></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 369
Description: Testing of Pending entity handler registrations between nodes
Expectation: Partner 1 gets 4 OnInitialInjectionsDone, all but the first is preceeded by an OnInjectedNewEntity.  Partner 2 gets OnCompletedRegistration, OnInjectedNewEntity, OnInitialInjectionsDone, OnRevokedRegistration. This sequence is repeated 3 times.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 370
Description: Test that unregistration of the owner makes created instances (of injectable type) become ghosts
Expectation: Partner 0 receives OnNewEntity and OnDeletedEntity twice, P2 takes over ownership from P1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 371
Description: Test that SetAll on an instance for which there is a ghost, performed before OnInitialInjectionDone, gives a GhostExistsException
Expectation: P0 gets a GhostExistsException
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.GhostExistsException
Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 111)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 222)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">qwerty</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 375
Description: Testing of injection for existing entity. Injector and handler reside on different nodes.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 676767)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some injected data</Info></DoseTest.InjectableEntity>
  Current   = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 376
Description: Postpone OnServiceRequest, redispatch is True.
Expectation: P0 receives three OnServiceRequest, the first and second with Info set to 'Service request 1' and the third with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: ResetCallbackActions
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 2</Info></DoseTest.GlobalService>

==========================================================================
TESTCASE 377
Description: Postpone OnServiceRequest, redispatch is True. ResumePostponed is called within the callback
Expectation: P0 receives three OnServiceRequest, the first and second with Info set to 'Service request 1' and the third with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: ResetCallbackActions
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 2</Info></DoseTest.GlobalService>

==========================================================================
TESTCASE 378
Description: Postpone OnServiceRequest, redispatch is False.
Expectation: P0 receives two OnServiceRequest, the first with Info set to 'Service request 1' and the second with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: ResetCallbackActions
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 2</Info></DoseTest.GlobalService>

==========================================================================
TESTCASE 379
Description: Postpone OnServiceRequest, redispatch is False. ResumePostponed is called within the callback
Expectation: P0 receives two OnServiceRequest, the first with Info set to 'Service request 1' and the second with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: ResetCallbackActions
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 1</Info></DoseTest.GlobalService>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalService><Info xml:space="preserve">Service request 2</Info></DoseTest.GlobalService>

==========================================================================
TESTCASE 380
Description: Postpone OnCreateRequest, redispatch is True.
Expectation: P0 receives three OnCreateRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Create request 1</Info></DoseTest.GlobalEntity>

Consumer 0: ResetCallbackActions
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Create request 1</Info></DoseTest.GlobalEntity>

Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Create request 2</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 381
Description: Postpone OnCreateRequest, redispatch is False.
Expectation: P0 receives two OnCreateRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Create request 1</Info></DoseTest.GlobalEntity>

Consumer 0: ResetCallbackActions
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Create request 2</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 382
Description: Postpone OnUpdateRequest, redispatch is True.
Expectation: P0 receives three OnUpdateRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Update request 1</Info></DoseTest.GlobalEntity>

Consumer 0: ResetCallbackActions
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Update request 1</Info></DoseTest.GlobalEntity>

Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Update request 2</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 383
Description: Postpone OnUpdateRequest, redispatch is False.
Expectation: P0 receives two OnUpdateRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Update request 1</Info></DoseTest.GlobalEntity>

Consumer 0: ResetCallbackActions
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Update request 2</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 384
Description: Postpone OnDeleteRequest, redispatch is True.
Expectation: P0 receives three OnDeleteRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

Consumer 0: ResetCallbackActions
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

==========================================================================
TESTCASE 385
Description: Postpone OnDeleteRequest, redispatch is False.
Expectation: P0 receives two OnDeleteRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 121212)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

Consumer 0: ResetCallbackActions
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 343434)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

==========================================================================
TESTCASE 386
Description: Postpone OnMessage, redispatch is True.
Expectation: P0 receives three OnMessage, the first and second with Info set to 'Message 1' and the third with Info set to 'Message 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Message 1</Info></DoseTest.GlobalMessage>


Consumer 0: ResetCallbackActions
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Message 1</Info></DoseTest.GlobalMessage>


Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Message 2</Info></DoseTest.GlobalMessage>


==========================================================================
TESTCASE 387
Description: Postpone OnMessage, redispatch is False.
Expectation: P0 receives two OnMessage, the first with Info set to 'Message 1' and the second with Info set to 'Message 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Message 1</Info></DoseTest.GlobalMessage>


Consumer 0: ResetCallbackActions
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">Message 2</Info></DoseTest.GlobalMessage>


==========================================================================
TESTCASE 400
Description: Test of owner setting entity and read (local)
Expectation: The Info field should be "Updated information"
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.LocalEntity, 0):
  EntityId  = (DoseTest.LocalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 401
Description: Test of non-owner setting entity owned by another connection
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.AccessDeniedException
==========================================================================
TESTCASE 402
Description: Test of setting an entity using an unregistered handler
Expectation: This is considered a programming error and a SoftwareViolation exception should be thrown
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.Typesystem.SoftwareViolationException
==========================================================================
TESTCASE 403
Description: Test of owner deleting instance (global)
Expectation: The created instance shall be found and after deletion exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.GlobalEntity, 987654321):
  EntityId  = (DoseTest.GlobalEntity, 987654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>

Consumer 1: Read entity (DoseTest.GlobalEntity, 987654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 404
Description: Test of non-owner deleting entity within the same connection as owner
Expectation: Exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.LocalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 405
Description: Test of non-owner deleting entity
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.AccessDeniedException
==========================================================================
TESTCASE 406
Description: Test of handler deleting non-existing instance.
Expectation: This should be a NOP
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 407
Description: Test of deleting all owned instances (global)
Expectation: 2 created instances shall be found and after deletion no instances should be found (exception Safir.Dob.NotFoundException shall be thrown)
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
  EntityId  = (DoseTest.GlobalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>

Consumer 1: Read entity (DoseTest.GlobalEntity, 1):
  EntityId  = (DoseTest.GlobalEntity, 1):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 1: Read entity (DoseTest.GlobalEntity, 1):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 408
Description: Test of delete of a non-existant entity
Expectation: No exception should be thrown!
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 430
Description: Testing that a slow entity subscriber will not get all intermediate states for local entities.
Expectation: Partner 0/Consumer receives one OnNewEntity (info=Two), one OnUpdated (info=Four) and one OnDeleteEntity callback. Nowhere in the output should the intermediate states "One", "Three" and "Five" be visible.
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Four</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Four</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 431
Description: Testing that a slow entity subscriber will not get all intermediate states for global entities.
Expectation: Partner 0/Consumer receives one OnNewEntity (info=Two), one OnUpdated (info=Four) and one OnDeleteEntity callback. Nowhere in the output should the intermediate states "One", "Three" and "Five" be visible.
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Two</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Four</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Two</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Four</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 432
Description: Testing that local entities are not propagated to other nodes
Expectation: Only partner 0 gets an OnNewEntity, not partner 2.
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Some Data</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Some Data</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 450
Description: Testing subscription and unsubscription of local entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks for 2 instances
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 444444444)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Four Information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 555555555)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Five Information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 451
Description: Testing subscription of local entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 452
Description: Testing subscription of local entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer receives two OnNewEntity and one OnDeleteEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 453
Description: Testing subscription of local entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 454
Description: Testing subscription of local entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and LocalEntity and OnUpdatedEntity callback for LocalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6496287506980868109
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">New information</Info></DoseTest.RootEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = 1075591959784142265
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = 1075591959784142265
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 455
Description: Testing subscription and unsubscription of local entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 456
Description: Testing subscription of local entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks for instance 12345
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 457
Description: Testing subscription of local entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeletedEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 458
Description: Testing subscription of local entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 459
Description: Testing subscription and unsubscription of global entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 460
Description: Testing subscription of global entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 461
Description: Testing subscription of global entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 462
Description: Testing subscription of global entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 463
Description: Testing subscription of global entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and GlobalEntity and OnUpdatedEntity callback for GlobalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6496287506980868109
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">New information</Info></DoseTest.RootEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = 1075591959784142265
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = 1075591959784142265
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 464
Description: Testing subscription and unsubscription of global entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 465
Description: Testing subscription of global entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 466
Description: Testing subscription of global entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity callbac)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 467
Description: Testing subscription of global entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">New information</Info></DoseTest.GlobalEntity>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated information</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 468
Description: Test the entity subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 469
Description: Test the entity subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 1)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 471
Description: Testing subscription of local parent entity using typeid without includeSubclasses
Expectation: Partner 0/Consumer 0 receives 1 OnNewEntity and 1 OnUpdatedEntity callbacks for RootEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6496287506980868109
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">New information</Info></DoseTest.RootEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6496287506980868109
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">Update information</Info></DoseTest.RootEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">New information</Info></DoseTest.RootEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 475
Description: Testing subscription and unsubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Even more new information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 476
Description: Testing that setting up the same subscription twice is a null operation
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Even more new information</Info></DoseTest.LocalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">New information</Info></DoseTest.LocalEntity>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 480
Description: Test of special subscription WantsGhostDelete
Expectation: Partner 0/Consumer 0 receives one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 481
Description: Test of special subscription WantsLastState
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla, one OnUpdatedEntity with info set to MoreBlaBla, and one OnDeletedEntity. Partner 2/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity.
--------- Setup -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

--------- Test  -----------
Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">MoreBlabla</Info></DoseTest.InjectableEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Blabla</Info></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 54321)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">MoreBlabla</Info></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 482
Description: Test of special subscription WantsLastState when last state is 'created'
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription callbacks.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousVolatileEntity><Info xml:space="preserve">Blabla</Info></DoseTest.SynchronousVolatileEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousVolatileEntity, 54321)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousVolatileEntity><Info xml:space="preserve">Blabla</Info></DoseTest.SynchronousVolatileEntity>

==========================================================================
TESTCASE 483
Description: Test of special subscription DoesntWantSourceIsPermanentStore
Expectation: Partner 0/Consumer 0 receives only an OnDeletedEntity (no OnNewEntity). Partner 2/Consumer 0 receives one OneNewEntity and one OnDeletedEntity.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousPermanentEntity, 56789)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousPermanentEntity><Info xml:space="preserve">Blabla</Info></DoseTest.SynchronousPermanentEntity>

==========================================================================
TESTCASE 484
Description: Test of special subscription DoesntWantSourceIsPermanentStore
Expectation: Partner 0/Consumer 0 receives only an OnUpdatedEntity and an OnDeletedEntity (no OnNewEntity). Partner 2/Consumer 0 receives one OnNewEntity, one OnUpdatedEntity and one OnDeletedEntity.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 56789)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousPermanentEntity><Info xml:space="preserve">qwerty</Info></DoseTest.SynchronousPermanentEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousPermanentEntity><Info xml:space="preserve">Blabla</Info></DoseTest.SynchronousPermanentEntity>
  Changed top-level members: 
    Info

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousPermanentEntity, 56789)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousPermanentEntity><Info xml:space="preserve">qwerty</Info></DoseTest.SynchronousPermanentEntity>

==========================================================================
TESTCASE 485
Description: Test of special subscription timestampChangeInfo
Expectation: Partner 0/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with changed top-member 'Info', another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity). Partner 2/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with no changed top-members, another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more info</MoreInfo></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more info</MoreInfo></DoseTest.InjectableEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more info</MoreInfo></DoseTest.InjectableEntity>
  Changed top-level members: 
    Info

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more changed info</MoreInfo></DoseTest.InjectableEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more info</MoreInfo></DoseTest.InjectableEntity>
  Changed top-level members: 
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 565656)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.InjectableEntity><Info xml:space="preserve">Some info</Info><MoreInfo xml:space="preserve">Some more changed info</MoreInfo></DoseTest.InjectableEntity>

==========================================================================
TESTCASE 500
Description: Test of sending create request (owner on this node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Created</Info></DoseTest.LocalEntity>

Consumer 1: Read entity (DoseTest.LocalEntity, 345678):
  EntityId  = (DoseTest.LocalEntity, 345678):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Created</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 501
Description: Test of sending create request (owner on other node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 1: Read entity (DoseTest.GlobalEntity, 987654):
  EntityId  = (DoseTest.GlobalEntity, 987654):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 502
Description: Test of sending update request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated</Info></DoseTest.LocalEntity>

Consumer 1: Read entity (DoseTest.LocalEntity, 565656):
  EntityId  = (DoseTest.LocalEntity, 565656):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 503
Description: Test of sending update request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
  EntityId  = (DoseTest.GlobalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 504
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.LocalEntity, 0) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 505
Description: Test of sending delete request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 0)

Consumer 1: Read entity (DoseTest.LocalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 506
Description: Test of sending delete request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.Success><Info xml:space="preserve">Succesful response</Info></DoseTest.Success>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 0)

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 507
Description: Test of sending delete request of non-created instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.LocalEntity, 0) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 0)

==========================================================================
TESTCASE 508
Description: Test of entity request timeout (local request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirTimeout</Code><AdditionalInfo xml:space="preserve">The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.LocalEntity!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Created</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 509
Description: Test of entity request timeout (global request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirTimeout</Code><AdditionalInfo xml:space="preserve">The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalEntity!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 510
Description: Test of overflow notification while sending entity requests
Expectation: Partner 0/Consumer 1 gets an overflow exception and then a response, a OnNotRequestOverflow notification, followed by 9 responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnNotRequestOverflow
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 511
Description: Test of sending update request of non-created global instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 0) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 512
Description: Test of sending delete request of non-created global instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 0) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 0)

==========================================================================
TESTCASE 513
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.LocalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone.999999;0;partner_test_connection;1</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Updated</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 514
Description: Test of sending global update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone.999999;0;partner_test_connection;2</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 515
Description: Test of sending local delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.LocalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone.999999;0;partner_test_connection;1</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 88889999)

==========================================================================
TESTCASE 516
Description: Test of sending global delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone.999999;0;partner_test_connection;2</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 88889999)

==========================================================================
TESTCASE 517
Description: Test of sending requests and subscribing to an entity with all types defined in it.
Expectation: P2 receives requests (cre, upd, del) with correct data in them, and P0 gets corresponding subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.ComplexGlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve">Safir</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><BinaryMember></BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0"></Binary><Binary index="1">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>32</Int32><Int32>-32</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>32</Float32><Float32>-32</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><BooleanSequenceMember><Boolean>true</Boolean><Boolean>false</Boolean></BooleanSequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve"></String><String xml:space="preserve">rifaS</String></StringSequenceMember><EntityIdSequenceMember><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdSequenceMember><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>0</InstanceId><InstanceId>SomeInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>0</ChannelId><ChannelId>SomeChannel</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary></Binary><Binary>b25jZSBtb3JlLi4u</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>32001</Ampere32><Ampere32>-32001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>32002</CubicMeter32><CubicMeter32>-32002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>32003</Hertz32><Hertz32>-32003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>32005</Kelvin32><Kelvin32>-32005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>32006</Kilogram32><Kilogram32>-32006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>32007</Meter32><Meter32>-32007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>32008</MeterPerSecond32><MeterPerSecond32>-32008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>32009</MeterPerSecondSquared32><MeterPerSecondSquared32>-32009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>32010</Newton32><Newton32>-32010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>32011</Pascal32><Pascal32>-32011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>32012</Radian32><Radian32>-32012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>32013</RadianPerSecond32><RadianPerSecond32>-32013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>32014</RadianPerSecondSquared32><RadianPerSecondSquared32>-32014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>32015</Second32><Second32>-32015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>32016</SquareMeter32><SquareMeter32>-32016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>32017</Steradian32><Steradian32>-32017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>32018</Volt32><Volt32>-32018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>32019</Watt32><Watt32>-32019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>64001</Ampere64><Ampere64>-64001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>64002</CubicMeter64><CubicMeter64>-64002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>64003</Hertz64><Hertz64>-64003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>64004</Joule64><Joule64>-64004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>64005</Kelvin64><Kelvin64>-64005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>64006</Kilogram64><Kilogram64>-64006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>64007</Meter64><Meter64>-64007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>64008</MeterPerSecond64><MeterPerSecond64>-64008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>64009</MeterPerSecondSquared64><MeterPerSecondSquared64>-64009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>64010</Newton64><Newton64>-64010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>64011</Pascal64><Pascal64>-64011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>64012</Radian64><Radian64>-64012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>64013</RadianPerSecond64><RadianPerSecond64>-64013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>64014</RadianPerSecondSquared64><RadianPerSecondSquared64>-64014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>64015</Second64><Second64>-64015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>64016</SquareMeter64><SquareMeter64>-64016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>64017</Steradian64><Steradian64>-64017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>64018</Volt64><Volt64>-64018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>64019</Watt64><Watt64>-64019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    BooleanMember
    EnumerationMember
    StringMember
    EmptyStringMember
    EntityIdMember
    EntityIdMember2
    TypeIdMember
    InstanceIdMember
    InstanceIdMember2
    ChannelIdMember
    ChannelIdMember2
    HandlerIdMember
    HandlerIdMember2
    ObjectMember
    BinaryMember
    EmptyBinaryMember
    TestClassMember
    Ampere32Member
    CubicMeter32Member
    Hertz32Member
    Joule32Member
    Kelvin32Member
    Kilogram32Member
    Meter32Member
    MeterPerSecond32Member
    MeterPerSecondSquared32Member
    Newton32Member
    Pascal32Member
    Radian32Member
    RadianPerSecond32Member
    RadianPerSecondSquared32Member
    Second32Member
    SquareMeter32Member
    Steradian32Member
    Volt32Member
    Watt32Member
    Ampere64Member
    CubicMeter64Member
    Hertz64Member
    Joule64Member
    Kelvin64Member
    Kilogram64Member
    Meter64Member
    MeterPerSecond64Member
    MeterPerSecondSquared64Member
    Newton64Member
    Pascal64Member
    Radian64Member
    RadianPerSecond64Member
    RadianPerSecondSquared64Member
    Second64Member
    SquareMeter64Member
    Steradian64Member
    Volt64Member
    Watt64Member
    Int32ArrayMember
    Int64ArrayMember
    Float32ArrayMember
    Float64ArrayMember
    BooleanArrayMember
    EnumerationArrayMember
    StringArrayMember
    EntityIdArrayMember
    TypeIdArrayMember
    InstanceIdArrayMember
    ChannelIdArrayMember
    HandlerIdArrayMember
    ObjectArrayMember
    BinaryArrayMember
    TestClassArrayMember
    Ampere32ArrayMember
    CubicMeter32ArrayMember
    Hertz32ArrayMember
    Joule32ArrayMember
    Kelvin32ArrayMember
    Kilogram32ArrayMember
    Meter32ArrayMember
    MeterPerSecond32ArrayMember
    MeterPerSecondSquared32ArrayMember
    Newton32ArrayMember
    Pascal32ArrayMember
    Radian32ArrayMember
    RadianPerSecond32ArrayMember
    RadianPerSecondSquared32ArrayMember
    Second32ArrayMember
    SquareMeter32ArrayMember
    Steradian32ArrayMember
    Volt32ArrayMember
    Watt32ArrayMember
    Ampere64ArrayMember
    CubicMeter64ArrayMember
    Hertz64ArrayMember
    Joule64ArrayMember
    Kelvin64ArrayMember
    Kilogram64ArrayMember
    Meter64ArrayMember
    MeterPerSecond64ArrayMember
    MeterPerSecondSquared64ArrayMember
    Newton64ArrayMember
    Pascal64ArrayMember
    Radian64ArrayMember
    RadianPerSecond64ArrayMember
    RadianPerSecondSquared64ArrayMember
    Second64ArrayMember
    SquareMeter64ArrayMember
    Steradian64ArrayMember
    Volt64ArrayMember
    Watt64ArrayMember
    Int32SequenceMember
    Int64SequenceMember
    Float32SequenceMember
    Float64SequenceMember
    BooleanSequenceMember
    EnumerationSequenceMember
    StringSequenceMember
    EntityIdSequenceMember
    EntityIdSequenceMember2
    TypeIdSequenceMember
    InstanceIdSequenceMember
    InstanceIdSequenceMember2
    ChannelIdSequenceMember
    ChannelIdSequenceMember2
    HandlerIdSequenceMember
    HandlerIdSequenceMember2
    ObjectSequenceMember
    BinarySequenceMember
    TestClassSequenceMember
    Ampere32SequenceMember
    CubicMeter32SequenceMember
    Hertz32SequenceMember
    Joule32SequenceMember
    Kelvin32SequenceMember
    Kilogram32SequenceMember
    Meter32SequenceMember
    MeterPerSecond32SequenceMember
    MeterPerSecondSquared32SequenceMember
    Newton32SequenceMember
    Pascal32SequenceMember
    Radian32SequenceMember
    RadianPerSecond32SequenceMember
    RadianPerSecondSquared32SequenceMember
    Second32SequenceMember
    SquareMeter32SequenceMember
    Steradian32SequenceMember
    Volt32SequenceMember
    Watt32SequenceMember
    Ampere64SequenceMember
    CubicMeter64SequenceMember
    Hertz64SequenceMember
    Joule64SequenceMember
    Kelvin64SequenceMember
    Kilogram64SequenceMember
    Meter64SequenceMember
    MeterPerSecond64SequenceMember
    MeterPerSecondSquared64SequenceMember
    Newton64SequenceMember
    Pascal64SequenceMember
    Radian64SequenceMember
    RadianPerSecond64SequenceMember
    RadianPerSecondSquared64SequenceMember
    Second64SequenceMember
    SquareMeter64SequenceMember
    Steradian64SequenceMember
    Volt64SequenceMember
    Watt64SequenceMember

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.ComplexGlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>320</Int32Member><Int64Member>640</Int64Member><Float32Member>320</Float32Member><Float64Member>640</Float64Member><BooleanMember>false</BooleanMember><EnumerationMember>MySecond</EnumerationMember><StringMember xml:space="preserve">Safir SDK</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>1</instanceId></EntityIdMember><TypeIdMember>Object</TypeIdMember><InstanceIdMember>AnotherInstance</InstanceIdMember><ChannelIdMember>AnotherChannel</ChannelIdMember><HandlerIdMember>AnotherHandler</HandlerIdMember><ObjectMember type="DoseTest.TestItem"></ObjectMember><BinaryMember>b25jZSBtb3JlLi4u</BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember></TestClassMember><Ampere32Member>320001</Ampere32Member><CubicMeter32Member>320002</CubicMeter32Member><Hertz32Member>320003</Hertz32Member><Joule32Member>320004</Joule32Member><Kelvin32Member>320005</Kelvin32Member><Kilogram32Member>320006</Kilogram32Member><Meter32Member>320007</Meter32Member><MeterPerSecond32Member>320008</MeterPerSecond32Member><MeterPerSecondSquared32Member>320009</MeterPerSecondSquared32Member><Newton32Member>320010</Newton32Member><Pascal32Member>320011</Pascal32Member><Radian32Member>320012</Radian32Member><RadianPerSecond32Member>320013</RadianPerSecond32Member><RadianPerSecondSquared32Member>320014</RadianPerSecondSquared32Member><Second32Member>320015</Second32Member><SquareMeter32Member>320016</SquareMeter32Member><Steradian32Member>320017</Steradian32Member><Volt32Member>320018</Volt32Member><Watt32Member>320019</Watt32Member><Ampere64Member>640001</Ampere64Member><CubicMeter64Member>640002</CubicMeter64Member><Hertz64Member>640003</Hertz64Member><Joule64Member>640004</Joule64Member><Kelvin64Member>640005</Kelvin64Member><Kilogram64Member>640006</Kilogram64Member><Meter64Member>640007</Meter64Member><MeterPerSecond64Member>640008</MeterPerSecond64Member><MeterPerSecondSquared64Member>640009</MeterPerSecondSquared64Member><Newton64Member>640010</Newton64Member><Pascal64Member>640011</Pascal64Member><Radian64Member>640012</Radian64Member><RadianPerSecond64Member>640013</RadianPerSecond64Member><RadianPerSecondSquared64Member>640014</RadianPerSecondSquared64Member><Second64Member>640015</Second64Member><SquareMeter64Member>640016</SquareMeter64Member><Steradian64Member>640017</Steradian64Member><Volt64Member>640018</Volt64Member><Watt64Member>640019</Watt64Member><Int32ArrayMember><Int32 index="0">320</Int32><Int32 index="1">-320</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">640</Int64><Int64 index="1">-640</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">320</Float32><Float32 index="1">-320</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">640</Float64><Float64 index="1">-640</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">b25jZSBtb3JlLi4u</Binary><Binary index="1">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">320001</Ampere32><Ampere32 index="1">-320001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">320002</CubicMeter32><CubicMeter32 index="1">-320002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">320003</Hertz32><Hertz32 index="1">-320003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">320004</Joule32><Joule32 index="1">-320004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">320005</Kelvin32><Kelvin32 index="1">-320005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">320006</Kilogram32><Kilogram32 index="1">-320006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">320007</Meter32><Meter32 index="1">-320007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">320008</MeterPerSecond32><MeterPerSecond32 index="1">-320008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">320009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-320009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">320010</Newton32><Newton32 index="1">-320010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">320011</Pascal32><Pascal32 index="1">-320011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">320012</Radian32><Radian32 index="1">-320012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">320013</RadianPerSecond32><RadianPerSecond32 index="1">-320013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">320014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-320014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">320015</Second32><Second32 index="1">-320015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">320016</SquareMeter32><SquareMeter32 index="1">-320016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">320017</Steradian32><Steradian32 index="1">-320017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">320018</Volt32><Volt32 index="1">-320018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">320019</Watt32><Watt32 index="1">-320019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">640001</Ampere64><Ampere64 index="1">-640001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">640002</CubicMeter64><CubicMeter64 index="1">-640002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">640003</Hertz64><Hertz64 index="1">-640003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">640004</Joule64><Joule64 index="1">-640004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">640005</Kelvin64><Kelvin64 index="1">-640005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">640006</Kilogram64><Kilogram64 index="1">-640006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">640007</Meter64><Meter64 index="1">-640007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">640008</MeterPerSecond64><MeterPerSecond64 index="1">-640008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">640009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-640009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">640010</Newton64><Newton64 index="1">-640010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">640011</Pascal64><Pascal64 index="1">-640011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">640012</Radian64><Radian64 index="1">-640012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">640013</RadianPerSecond64><RadianPerSecond64 index="1">-640013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">640014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-640014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">640015</Second64><Second64 index="1">-640015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">640016</SquareMeter64><SquareMeter64 index="1">-640016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">640017</Steradian64><Steradian64 index="1">-640017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">640018</Volt64><Volt64 index="1">-640018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">640019</Watt64><Watt64 index="1">-640019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>320</Int32><Int32>-320</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>320</Float32><Float32>-320</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve">rifaS</String><String xml:space="preserve"></String></StringSequenceMember><EntityIdSequenceMember2><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId></EntityIdSequenceMember2><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>1</InstanceId><InstanceId>SomeOtherInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>20</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary>b25jZSBtb3JlLi4u</Binary><Binary>VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>320001</Ampere32><Ampere32>-320001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>320002</CubicMeter32><CubicMeter32>-320002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>320003</Hertz32><Hertz32>-320003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>320005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>320006</Kilogram32><Kilogram32>-320006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>320007</Meter32><Meter32>-320007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>320008</MeterPerSecond32><MeterPerSecond32>-320008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>320009</MeterPerSecondSquared32><MeterPerSecondSquared32>-320009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>320010</Newton32><Newton32>-320010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>320011</Pascal32><Pascal32>-320011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>320012</Radian32><Radian32>-320012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>320013</RadianPerSecond32><RadianPerSecond32>-320013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>320014</RadianPerSecondSquared32><RadianPerSecondSquared32>-320014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>320015</Second32><Second32>-320015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>320016</SquareMeter32><SquareMeter32>-320016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>320017</Steradian32><Steradian32>-320017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>320018</Volt32><Volt32>-320018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>320019</Watt32><Watt32>-320019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>640001</Ampere64><Ampere64>-640001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>640002</CubicMeter64><CubicMeter64>-640002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>640003</Hertz64><Hertz64>-640003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>640004</Joule64><Joule64>-640004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>640005</Kelvin64><Kelvin64>-640005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>640006</Kilogram64><Kilogram64>-640006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>640007</Meter64><Meter64>-640007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>640008</MeterPerSecond64><MeterPerSecond64>-640008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>640009</MeterPerSecondSquared64><MeterPerSecondSquared64>-640009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>640010</Newton64><Newton64>-640010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>640011</Pascal64><Pascal64>-640011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>640012</Radian64><Radian64>-640012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>640013</RadianPerSecond64><RadianPerSecond64>-640013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>640014</RadianPerSecondSquared64><RadianPerSecondSquared64>-640014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>640015</Second64><Second64>-640015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>640016</SquareMeter64><SquareMeter64>-640016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>640017</Steradian64><Steradian64>-640017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>640018</Volt64><Volt64>-640018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>640019</Watt64><Watt64>-640019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve">Safir</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><BinaryMember></BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0"></Binary><Binary index="1">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>32</Int32><Int32>-32</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>32</Float32><Float32>-32</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><BooleanSequenceMember><Boolean>true</Boolean><Boolean>false</Boolean></BooleanSequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve"></String><String xml:space="preserve">rifaS</String></StringSequenceMember><EntityIdSequenceMember><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdSequenceMember><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>0</InstanceId><InstanceId>SomeInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>0</ChannelId><ChannelId>SomeChannel</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary></Binary><Binary>b25jZSBtb3JlLi4u</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>32001</Ampere32><Ampere32>-32001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>32002</CubicMeter32><CubicMeter32>-32002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>32003</Hertz32><Hertz32>-32003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>32005</Kelvin32><Kelvin32>-32005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>32006</Kilogram32><Kilogram32>-32006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>32007</Meter32><Meter32>-32007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>32008</MeterPerSecond32><MeterPerSecond32>-32008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>32009</MeterPerSecondSquared32><MeterPerSecondSquared32>-32009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>32010</Newton32><Newton32>-32010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>32011</Pascal32><Pascal32>-32011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>32012</Radian32><Radian32>-32012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>32013</RadianPerSecond32><RadianPerSecond32>-32013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>32014</RadianPerSecondSquared32><RadianPerSecondSquared32>-32014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>32015</Second32><Second32>-32015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>32016</SquareMeter32><SquareMeter32>-32016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>32017</Steradian32><Steradian32>-32017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>32018</Volt32><Volt32>-32018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>32019</Watt32><Watt32>-32019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>64001</Ampere64><Ampere64>-64001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>64002</CubicMeter64><CubicMeter64>-64002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>64003</Hertz64><Hertz64>-64003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>64004</Joule64><Joule64>-64004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>64005</Kelvin64><Kelvin64>-64005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>64006</Kilogram64><Kilogram64>-64006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>64007</Meter64><Meter64>-64007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>64008</MeterPerSecond64><MeterPerSecond64>-64008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>64009</MeterPerSecondSquared64><MeterPerSecondSquared64>-64009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>64010</Newton64><Newton64>-64010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>64011</Pascal64><Pascal64>-64011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>64012</Radian64><Radian64>-64012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>64013</RadianPerSecond64><RadianPerSecond64>-64013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>64014</RadianPerSecondSquared64><RadianPerSecondSquared64>-64014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>64015</Second64><Second64>-64015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>64016</SquareMeter64><SquareMeter64>-64016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>64017</Steradian64><Steradian64>-64017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>64018</Volt64><Volt64>-64018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>64019</Watt64><Watt64>-64019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalEntity>
  Changed top-level members: 
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    BooleanMember
    EnumerationMember
    StringMember
    EntityIdMember
    TypeIdMember
    InstanceIdMember
    ChannelIdMember
    HandlerIdMember
    ObjectMember
    BinaryMember
    TestClassMember
    Ampere32Member
    CubicMeter32Member
    Hertz32Member
    Joule32Member
    Kelvin32Member
    Kilogram32Member
    Meter32Member
    MeterPerSecond32Member
    MeterPerSecondSquared32Member
    Newton32Member
    Pascal32Member
    Radian32Member
    RadianPerSecond32Member
    RadianPerSecondSquared32Member
    Second32Member
    SquareMeter32Member
    Steradian32Member
    Volt32Member
    Watt32Member
    Ampere64Member
    CubicMeter64Member
    Hertz64Member
    Joule64Member
    Kelvin64Member
    Kilogram64Member
    Meter64Member
    MeterPerSecond64Member
    MeterPerSecondSquared64Member
    Newton64Member
    Pascal64Member
    Radian64Member
    RadianPerSecond64Member
    RadianPerSecondSquared64Member
    Second64Member
    SquareMeter64Member
    Steradian64Member
    Volt64Member
    Watt64Member
    Int32ArrayMember
    Int64ArrayMember
    Float32ArrayMember
    Float64ArrayMember
    BinaryArrayMember
    TestClassArrayMember
    Ampere32ArrayMember
    CubicMeter32ArrayMember
    Hertz32ArrayMember
    Joule32ArrayMember
    Kelvin32ArrayMember
    Kilogram32ArrayMember
    Meter32ArrayMember
    MeterPerSecond32ArrayMember
    MeterPerSecondSquared32ArrayMember
    Newton32ArrayMember
    Pascal32ArrayMember
    Radian32ArrayMember
    RadianPerSecond32ArrayMember
    RadianPerSecondSquared32ArrayMember
    Second32ArrayMember
    SquareMeter32ArrayMember
    Steradian32ArrayMember
    Volt32ArrayMember
    Watt32ArrayMember
    Ampere64ArrayMember
    CubicMeter64ArrayMember
    Hertz64ArrayMember
    Joule64ArrayMember
    Kelvin64ArrayMember
    Kilogram64ArrayMember
    Meter64ArrayMember
    MeterPerSecond64ArrayMember
    MeterPerSecondSquared64ArrayMember
    Newton64ArrayMember
    Pascal64ArrayMember
    Radian64ArrayMember
    RadianPerSecond64ArrayMember
    RadianPerSecondSquared64ArrayMember
    Second64ArrayMember
    SquareMeter64ArrayMember
    Steradian64ArrayMember
    Volt64ArrayMember
    Watt64ArrayMember
    Int32SequenceMember
    Float32SequenceMember
    BooleanSequenceMember
    StringSequenceMember
    EntityIdSequenceMember
    EntityIdSequenceMember2
    InstanceIdSequenceMember
    ChannelIdSequenceMember
    ObjectSequenceMember
    BinarySequenceMember
    TestClassSequenceMember
    Ampere32SequenceMember
    CubicMeter32SequenceMember
    Hertz32SequenceMember
    Kelvin32SequenceMember
    Kilogram32SequenceMember
    Meter32SequenceMember
    MeterPerSecond32SequenceMember
    MeterPerSecondSquared32SequenceMember
    Newton32SequenceMember
    Pascal32SequenceMember
    Radian32SequenceMember
    RadianPerSecond32SequenceMember
    RadianPerSecondSquared32SequenceMember
    Second32SequenceMember
    SquareMeter32SequenceMember
    Steradian32SequenceMember
    Volt32SequenceMember
    Watt32SequenceMember
    Ampere64SequenceMember
    CubicMeter64SequenceMember
    Hertz64SequenceMember
    Joule64SequenceMember
    Kelvin64SequenceMember
    Kilogram64SequenceMember
    Meter64SequenceMember
    MeterPerSecond64SequenceMember
    MeterPerSecondSquared64SequenceMember
    Newton64SequenceMember
    Pascal64SequenceMember
    Radian64SequenceMember
    RadianPerSecond64SequenceMember
    RadianPerSecondSquared64SequenceMember
    Second64SequenceMember
    SquareMeter64SequenceMember
    Steradian64SequenceMember
    Volt64SequenceMember
    Watt64SequenceMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.ComplexGlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>320</Int32Member><Int64Member>640</Int64Member><Float32Member>320</Float32Member><Float64Member>640</Float64Member><BooleanMember>false</BooleanMember><EnumerationMember>MySecond</EnumerationMember><StringMember xml:space="preserve">Safir SDK</StringMember><EmptyStringMember xml:space="preserve"></EmptyStringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>1</instanceId></EntityIdMember><TypeIdMember>Object</TypeIdMember><InstanceIdMember>AnotherInstance</InstanceIdMember><ChannelIdMember>AnotherChannel</ChannelIdMember><HandlerIdMember>AnotherHandler</HandlerIdMember><ObjectMember type="DoseTest.TestItem"></ObjectMember><BinaryMember>b25jZSBtb3JlLi4u</BinaryMember><EmptyBinaryMember></EmptyBinaryMember><TestClassMember></TestClassMember><Ampere32Member>320001</Ampere32Member><CubicMeter32Member>320002</CubicMeter32Member><Hertz32Member>320003</Hertz32Member><Joule32Member>320004</Joule32Member><Kelvin32Member>320005</Kelvin32Member><Kilogram32Member>320006</Kilogram32Member><Meter32Member>320007</Meter32Member><MeterPerSecond32Member>320008</MeterPerSecond32Member><MeterPerSecondSquared32Member>320009</MeterPerSecondSquared32Member><Newton32Member>320010</Newton32Member><Pascal32Member>320011</Pascal32Member><Radian32Member>320012</Radian32Member><RadianPerSecond32Member>320013</RadianPerSecond32Member><RadianPerSecondSquared32Member>320014</RadianPerSecondSquared32Member><Second32Member>320015</Second32Member><SquareMeter32Member>320016</SquareMeter32Member><Steradian32Member>320017</Steradian32Member><Volt32Member>320018</Volt32Member><Watt32Member>320019</Watt32Member><Ampere64Member>640001</Ampere64Member><CubicMeter64Member>640002</CubicMeter64Member><Hertz64Member>640003</Hertz64Member><Joule64Member>640004</Joule64Member><Kelvin64Member>640005</Kelvin64Member><Kilogram64Member>640006</Kilogram64Member><Meter64Member>640007</Meter64Member><MeterPerSecond64Member>640008</MeterPerSecond64Member><MeterPerSecondSquared64Member>640009</MeterPerSecondSquared64Member><Newton64Member>640010</Newton64Member><Pascal64Member>640011</Pascal64Member><Radian64Member>640012</Radian64Member><RadianPerSecond64Member>640013</RadianPerSecond64Member><RadianPerSecondSquared64Member>640014</RadianPerSecondSquared64Member><Second64Member>640015</Second64Member><SquareMeter64Member>640016</SquareMeter64Member><Steradian64Member>640017</Steradian64Member><Volt64Member>640018</Volt64Member><Watt64Member>640019</Watt64Member><Int32ArrayMember><Int32 index="0">320</Int32><Int32 index="1">-320</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">640</Int64><Int64 index="1">-640</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">320</Float32><Float32 index="1">-320</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">640</Float64><Float64 index="1">-640</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">b25jZSBtb3JlLi4u</Binary><Binary index="1">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">320001</Ampere32><Ampere32 index="1">-320001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">320002</CubicMeter32><CubicMeter32 index="1">-320002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">320003</Hertz32><Hertz32 index="1">-320003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">320004</Joule32><Joule32 index="1">-320004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">320005</Kelvin32><Kelvin32 index="1">-320005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">320006</Kilogram32><Kilogram32 index="1">-320006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">320007</Meter32><Meter32 index="1">-320007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">320008</MeterPerSecond32><MeterPerSecond32 index="1">-320008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">320009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-320009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">320010</Newton32><Newton32 index="1">-320010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">320011</Pascal32><Pascal32 index="1">-320011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">320012</Radian32><Radian32 index="1">-320012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">320013</RadianPerSecond32><RadianPerSecond32 index="1">-320013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">320014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-320014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">320015</Second32><Second32 index="1">-320015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">320016</SquareMeter32><SquareMeter32 index="1">-320016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">320017</Steradian32><Steradian32 index="1">-320017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">320018</Volt32><Volt32 index="1">-320018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">320019</Watt32><Watt32 index="1">-320019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">640001</Ampere64><Ampere64 index="1">-640001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">640002</CubicMeter64><CubicMeter64 index="1">-640002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">640003</Hertz64><Hertz64 index="1">-640003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">640004</Joule64><Joule64 index="1">-640004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">640005</Kelvin64><Kelvin64 index="1">-640005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">640006</Kilogram64><Kilogram64 index="1">-640006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">640007</Meter64><Meter64 index="1">-640007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">640008</MeterPerSecond64><MeterPerSecond64 index="1">-640008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">640009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-640009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">640010</Newton64><Newton64 index="1">-640010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">640011</Pascal64><Pascal64 index="1">-640011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">640012</Radian64><Radian64 index="1">-640012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">640013</RadianPerSecond64><RadianPerSecond64 index="1">-640013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">640014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-640014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">640015</Second64><Second64 index="1">-640015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">640016</SquareMeter64><SquareMeter64 index="1">-640016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">640017</Steradian64><Steradian64 index="1">-640017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">640018</Volt64><Volt64 index="1">-640018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">640019</Watt64><Watt64 index="1">-640019</Watt64></Watt64ArrayMember><Int32SequenceMember><Int32>320</Int32><Int32>-320</Int32></Int32SequenceMember><Int64SequenceMember><Int64>64</Int64><Int64>-64</Int64></Int64SequenceMember><Float32SequenceMember><Float32>320</Float32><Float32>-320</Float32></Float32SequenceMember><Float64SequenceMember><Float64>64</Float64><Float64>-64</Float64></Float64SequenceMember><EnumerationSequenceMember><DoseTest.TestEnum>MyFirst</DoseTest.TestEnum><DoseTest.TestEnum>MySecond</DoseTest.TestEnum></EnumerationSequenceMember><StringSequenceMember><String xml:space="preserve">rifaS</String><String xml:space="preserve"></String></StringSequenceMember><EntityIdSequenceMember2><EntityId><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId><EntityId><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId></EntityIdSequenceMember2><TypeIdSequenceMember><TypeId>DoseTest.TestItem</TypeId><TypeId>DoseTest.TestEnum</TypeId></TypeIdSequenceMember><InstanceIdSequenceMember><InstanceId>1</InstanceId><InstanceId>SomeOtherInstance</InstanceId></InstanceIdSequenceMember><ChannelIdSequenceMember><ChannelId>20</ChannelId></ChannelIdSequenceMember><HandlerIdSequenceMember><HandlerId>0</HandlerId><HandlerId>SomeHandler</HandlerId></HandlerIdSequenceMember><ObjectSequenceMember><Object></Object></ObjectSequenceMember><BinarySequenceMember><Binary>b25jZSBtb3JlLi4u</Binary><Binary>VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary></BinarySequenceMember><TestClassSequenceMember><DoseTest.TestItem><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassSequenceMember><Ampere32SequenceMember><Ampere32>320001</Ampere32><Ampere32>-320001</Ampere32></Ampere32SequenceMember><CubicMeter32SequenceMember><CubicMeter32>320002</CubicMeter32><CubicMeter32>-320002</CubicMeter32></CubicMeter32SequenceMember><Hertz32SequenceMember><Hertz32>320003</Hertz32><Hertz32>-320003</Hertz32></Hertz32SequenceMember><Joule32SequenceMember><Joule32>32004</Joule32><Joule32>-32004</Joule32></Joule32SequenceMember><Kelvin32SequenceMember><Kelvin32>320005</Kelvin32></Kelvin32SequenceMember><Kilogram32SequenceMember><Kilogram32>320006</Kilogram32><Kilogram32>-320006</Kilogram32></Kilogram32SequenceMember><Meter32SequenceMember><Meter32>320007</Meter32><Meter32>-320007</Meter32></Meter32SequenceMember><MeterPerSecond32SequenceMember><MeterPerSecond32>320008</MeterPerSecond32><MeterPerSecond32>-320008</MeterPerSecond32></MeterPerSecond32SequenceMember><MeterPerSecondSquared32SequenceMember><MeterPerSecondSquared32>320009</MeterPerSecondSquared32><MeterPerSecondSquared32>-320009</MeterPerSecondSquared32></MeterPerSecondSquared32SequenceMember><Newton32SequenceMember><Newton32>320010</Newton32><Newton32>-320010</Newton32></Newton32SequenceMember><Pascal32SequenceMember><Pascal32>320011</Pascal32><Pascal32>-320011</Pascal32></Pascal32SequenceMember><Radian32SequenceMember><Radian32>320012</Radian32><Radian32>-320012</Radian32></Radian32SequenceMember><RadianPerSecond32SequenceMember><RadianPerSecond32>320013</RadianPerSecond32><RadianPerSecond32>-320013</RadianPerSecond32></RadianPerSecond32SequenceMember><RadianPerSecondSquared32SequenceMember><RadianPerSecondSquared32>320014</RadianPerSecondSquared32><RadianPerSecondSquared32>-320014</RadianPerSecondSquared32></RadianPerSecondSquared32SequenceMember><Second32SequenceMember><Second32>320015</Second32><Second32>-320015</Second32></Second32SequenceMember><SquareMeter32SequenceMember><SquareMeter32>320016</SquareMeter32><SquareMeter32>-320016</SquareMeter32></SquareMeter32SequenceMember><Steradian32SequenceMember><Steradian32>320017</Steradian32><Steradian32>-320017</Steradian32></Steradian32SequenceMember><Volt32SequenceMember><Volt32>320018</Volt32><Volt32>-320018</Volt32></Volt32SequenceMember><Watt32SequenceMember><Watt32>320019</Watt32><Watt32>-320019</Watt32></Watt32SequenceMember><Ampere64SequenceMember><Ampere64>640001</Ampere64><Ampere64>-640001</Ampere64></Ampere64SequenceMember><CubicMeter64SequenceMember><CubicMeter64>640002</CubicMeter64><CubicMeter64>-640002</CubicMeter64></CubicMeter64SequenceMember><Hertz64SequenceMember><Hertz64>640003</Hertz64><Hertz64>-640003</Hertz64></Hertz64SequenceMember><Joule64SequenceMember><Joule64>640004</Joule64><Joule64>-640004</Joule64></Joule64SequenceMember><Kelvin64SequenceMember><Kelvin64>640005</Kelvin64><Kelvin64>-640005</Kelvin64></Kelvin64SequenceMember><Kilogram64SequenceMember><Kilogram64>640006</Kilogram64><Kilogram64>-640006</Kilogram64></Kilogram64SequenceMember><Meter64SequenceMember><Meter64>640007</Meter64><Meter64>-640007</Meter64></Meter64SequenceMember><MeterPerSecond64SequenceMember><MeterPerSecond64>640008</MeterPerSecond64><MeterPerSecond64>-640008</MeterPerSecond64></MeterPerSecond64SequenceMember><MeterPerSecondSquared64SequenceMember><MeterPerSecondSquared64>640009</MeterPerSecondSquared64><MeterPerSecondSquared64>-640009</MeterPerSecondSquared64></MeterPerSecondSquared64SequenceMember><Newton64SequenceMember><Newton64>640010</Newton64><Newton64>-640010</Newton64></Newton64SequenceMember><Pascal64SequenceMember><Pascal64>640011</Pascal64><Pascal64>-640011</Pascal64></Pascal64SequenceMember><Radian64SequenceMember><Radian64>640012</Radian64><Radian64>-640012</Radian64></Radian64SequenceMember><RadianPerSecond64SequenceMember><RadianPerSecond64>640013</RadianPerSecond64><RadianPerSecond64>-640013</RadianPerSecond64></RadianPerSecond64SequenceMember><RadianPerSecondSquared64SequenceMember><RadianPerSecondSquared64>640014</RadianPerSecondSquared64><RadianPerSecondSquared64>-640014</RadianPerSecondSquared64></RadianPerSecondSquared64SequenceMember><Second64SequenceMember><Second64>640015</Second64><Second64>-640015</Second64></Second64SequenceMember><SquareMeter64SequenceMember><SquareMeter64>640016</SquareMeter64><SquareMeter64>-640016</SquareMeter64></SquareMeter64SequenceMember><Steradian64SequenceMember><Steradian64>640017</Steradian64><Steradian64>-640017</Steradian64></Steradian64SequenceMember><Volt64SequenceMember><Volt64>640018</Volt64><Volt64>-640018</Volt64></Volt64SequenceMember><Watt64SequenceMember><Watt64>640019</Watt64><Watt64>-640019</Watt64></Watt64SequenceMember></DoseTest.ComplexGlobalEntity>

==========================================================================
TESTCASE 518
Description: Test of sending requests and subscribing to an entity with all types defined in it.
Expectation: P2 receives requests (cre, upd, del) with correct data in them, and P0 gets corresponding subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.ComplexGlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve"></StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve">Safir</String><String index="1" xml:space="preserve"></String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary><Binary index="1"></Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalEntity>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    BooleanMember
    EnumerationMember
    StringMember
    EmptyStringMember
    EntityIdMember
    EntityIdMember2
    TypeIdMember
    InstanceIdMember
    InstanceIdMember2
    ChannelIdMember
    ChannelIdMember2
    HandlerIdMember
    HandlerIdMember2
    ObjectMember
    BinaryMember
    EmptyBinaryMember
    TestClassMember
    Ampere32Member
    CubicMeter32Member
    Hertz32Member
    Joule32Member
    Kelvin32Member
    Kilogram32Member
    Meter32Member
    MeterPerSecond32Member
    MeterPerSecondSquared32Member
    Newton32Member
    Pascal32Member
    Radian32Member
    RadianPerSecond32Member
    RadianPerSecondSquared32Member
    Second32Member
    SquareMeter32Member
    Steradian32Member
    Volt32Member
    Watt32Member
    Ampere64Member
    CubicMeter64Member
    Hertz64Member
    Joule64Member
    Kelvin64Member
    Kilogram64Member
    Meter64Member
    MeterPerSecond64Member
    MeterPerSecondSquared64Member
    Newton64Member
    Pascal64Member
    Radian64Member
    RadianPerSecond64Member
    RadianPerSecondSquared64Member
    Second64Member
    SquareMeter64Member
    Steradian64Member
    Volt64Member
    Watt64Member
    Int32ArrayMember
    Int64ArrayMember
    Float32ArrayMember
    Float64ArrayMember
    BooleanArrayMember
    EnumerationArrayMember
    StringArrayMember
    EntityIdArrayMember
    TypeIdArrayMember
    InstanceIdArrayMember
    ChannelIdArrayMember
    HandlerIdArrayMember
    ObjectArrayMember
    BinaryArrayMember
    TestClassArrayMember
    Ampere32ArrayMember
    CubicMeter32ArrayMember
    Hertz32ArrayMember
    Joule32ArrayMember
    Kelvin32ArrayMember
    Kilogram32ArrayMember
    Meter32ArrayMember
    MeterPerSecond32ArrayMember
    MeterPerSecondSquared32ArrayMember
    Newton32ArrayMember
    Pascal32ArrayMember
    Radian32ArrayMember
    RadianPerSecond32ArrayMember
    RadianPerSecondSquared32ArrayMember
    Second32ArrayMember
    SquareMeter32ArrayMember
    Steradian32ArrayMember
    Volt32ArrayMember
    Watt32ArrayMember
    Ampere64ArrayMember
    CubicMeter64ArrayMember
    Hertz64ArrayMember
    Joule64ArrayMember
    Kelvin64ArrayMember
    Kilogram64ArrayMember
    Meter64ArrayMember
    MeterPerSecond64ArrayMember
    MeterPerSecondSquared64ArrayMember
    Newton64ArrayMember
    Pascal64ArrayMember
    Radian64ArrayMember
    RadianPerSecond64ArrayMember
    RadianPerSecondSquared64ArrayMember
    Second64ArrayMember
    SquareMeter64ArrayMember
    Steradian64ArrayMember
    Volt64ArrayMember
    Watt64ArrayMember
    Int32SequenceMember
    Int64SequenceMember
    Float32SequenceMember
    Float64SequenceMember
    BooleanSequenceMember
    EnumerationSequenceMember
    StringSequenceMember
    EntityIdSequenceMember
    EntityIdSequenceMember2
    TypeIdSequenceMember
    InstanceIdSequenceMember
    InstanceIdSequenceMember2
    ChannelIdSequenceMember
    ChannelIdSequenceMember2
    HandlerIdSequenceMember
    HandlerIdSequenceMember2
    ObjectSequenceMember
    BinarySequenceMember
    TestClassSequenceMember
    Ampere32SequenceMember
    CubicMeter32SequenceMember
    Hertz32SequenceMember
    Joule32SequenceMember
    Kelvin32SequenceMember
    Kilogram32SequenceMember
    Meter32SequenceMember
    MeterPerSecond32SequenceMember
    MeterPerSecondSquared32SequenceMember
    Newton32SequenceMember
    Pascal32SequenceMember
    Radian32SequenceMember
    RadianPerSecond32SequenceMember
    RadianPerSecondSquared32SequenceMember
    Second32SequenceMember
    SquareMeter32SequenceMember
    Steradian32SequenceMember
    Volt32SequenceMember
    Watt32SequenceMember
    Ampere64SequenceMember
    CubicMeter64SequenceMember
    Hertz64SequenceMember
    Joule64SequenceMember
    Kelvin64SequenceMember
    Kilogram64SequenceMember
    Meter64SequenceMember
    MeterPerSecond64SequenceMember
    MeterPerSecondSquared64SequenceMember
    Newton64SequenceMember
    Pascal64SequenceMember
    Radian64SequenceMember
    RadianPerSecond64SequenceMember
    RadianPerSecondSquared64SequenceMember
    Second64SequenceMember
    SquareMeter64SequenceMember
    Steradian64SequenceMember
    Volt64SequenceMember
    Watt64SequenceMember

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.ComplexGlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>320</Int32Member><Int64Member>640</Int64Member><Float32Member>320</Float32Member><Float64Member>640</Float64Member><BooleanMember>false</BooleanMember><EnumerationMember>MySecond</EnumerationMember><StringMember xml:space="preserve">Safir SDK</StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>1</instanceId></EntityIdMember><TypeIdMember>Object</TypeIdMember><InstanceIdMember>AnotherInstance</InstanceIdMember><ChannelIdMember>AnotherChannel</ChannelIdMember><HandlerIdMember>AnotherHandler</HandlerIdMember><ObjectMember type="DoseTest.TestItem"></ObjectMember><BinaryMember>b25jZSBtb3JlLi4u</BinaryMember><TestClassMember></TestClassMember><Ampere32Member>320001</Ampere32Member><CubicMeter32Member>320002</CubicMeter32Member><Hertz32Member>320003</Hertz32Member><Joule32Member>320004</Joule32Member><Kelvin32Member>320005</Kelvin32Member><Kilogram32Member>320006</Kilogram32Member><Meter32Member>320007</Meter32Member><MeterPerSecond32Member>320008</MeterPerSecond32Member><MeterPerSecondSquared32Member>320009</MeterPerSecondSquared32Member><Newton32Member>320010</Newton32Member><Pascal32Member>320011</Pascal32Member><Radian32Member>320012</Radian32Member><RadianPerSecond32Member>320013</RadianPerSecond32Member><RadianPerSecondSquared32Member>320014</RadianPerSecondSquared32Member><Second32Member>320015</Second32Member><SquareMeter32Member>320016</SquareMeter32Member><Steradian32Member>320017</Steradian32Member><Volt32Member>320018</Volt32Member><Watt32Member>320019</Watt32Member><Ampere64Member>640001</Ampere64Member><CubicMeter64Member>640002</CubicMeter64Member><Hertz64Member>640003</Hertz64Member><Joule64Member>640004</Joule64Member><Kelvin64Member>640005</Kelvin64Member><Kilogram64Member>640006</Kilogram64Member><Meter64Member>640007</Meter64Member><MeterPerSecond64Member>640008</MeterPerSecond64Member><MeterPerSecondSquared64Member>640009</MeterPerSecondSquared64Member><Newton64Member>640010</Newton64Member><Pascal64Member>640011</Pascal64Member><Radian64Member>640012</Radian64Member><RadianPerSecond64Member>640013</RadianPerSecond64Member><RadianPerSecondSquared64Member>640014</RadianPerSecondSquared64Member><Second64Member>640015</Second64Member><SquareMeter64Member>640016</SquareMeter64Member><Steradian64Member>640017</Steradian64Member><Volt64Member>640018</Volt64Member><Watt64Member>640019</Watt64Member><Int32ArrayMember><Int32 index="0">320</Int32><Int32 index="1">-320</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">640</Int64><Int64 index="1">-640</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">320</Float32><Float32 index="1">-320</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">640</Float64><Float64 index="1">-640</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">320001</Ampere32><Ampere32 index="1">-320001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">320002</CubicMeter32><CubicMeter32 index="1">-320002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">320003</Hertz32><Hertz32 index="1">-320003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">320004</Joule32><Joule32 index="1">-320004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">320005</Kelvin32><Kelvin32 index="1">-320005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">320006</Kilogram32><Kilogram32 index="1">-320006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">320007</Meter32><Meter32 index="1">-320007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">320008</MeterPerSecond32><MeterPerSecond32 index="1">-320008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">320009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-320009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">320010</Newton32><Newton32 index="1">-320010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">320011</Pascal32><Pascal32 index="1">-320011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">320012</Radian32><Radian32 index="1">-320012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">320013</RadianPerSecond32><RadianPerSecond32 index="1">-320013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">320014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-320014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">320015</Second32><Second32 index="1">-320015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">320016</SquareMeter32><SquareMeter32 index="1">-320016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">320017</Steradian32><Steradian32 index="1">-320017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">320018</Volt32><Volt32 index="1">-320018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">320019</Watt32><Watt32 index="1">-320019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">640001</Ampere64><Ampere64 index="1">-640001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">640002</CubicMeter64><CubicMeter64 index="1">-640002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">640003</Hertz64><Hertz64 index="1">-640003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">640004</Joule64><Joule64 index="1">-640004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">640005</Kelvin64><Kelvin64 index="1">-640005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">640006</Kilogram64><Kilogram64 index="1">-640006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">640007</Meter64><Meter64 index="1">-640007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">640008</MeterPerSecond64><MeterPerSecond64 index="1">-640008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">640009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-640009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">640010</Newton64><Newton64 index="1">-640010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">640011</Pascal64><Pascal64 index="1">-640011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">640012</Radian64><Radian64 index="1">-640012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">640013</RadianPerSecond64><RadianPerSecond64 index="1">-640013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">640014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-640014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">640015</Second64><Second64 index="1">-640015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">640016</SquareMeter64><SquareMeter64 index="1">-640016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">640017</Steradian64><Steradian64 index="1">-640017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">640018</Volt64><Volt64 index="1">-640018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">640019</Watt64><Watt64 index="1">-640019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalEntity>
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>32</Int32Member><Int64Member>64</Int64Member><Float32Member>32</Float32Member><Float64Member>64</Float64Member><BooleanMember>true</BooleanMember><EnumerationMember>MyFirst</EnumerationMember><StringMember xml:space="preserve"></StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityIdMember><TypeIdMember>DoseTest.TestItem</TypeIdMember><InstanceIdMember>SomeInstance</InstanceIdMember><ChannelIdMember>SomeChannel</ChannelIdMember><HandlerIdMember>SomeHandler</HandlerIdMember><ObjectMember></ObjectMember><TestClassMember><MyInt>-32</MyInt></TestClassMember><Ampere32Member>32001</Ampere32Member><CubicMeter32Member>32002</CubicMeter32Member><Hertz32Member>32003</Hertz32Member><Joule32Member>32004</Joule32Member><Kelvin32Member>32005</Kelvin32Member><Kilogram32Member>32006</Kilogram32Member><Meter32Member>32007</Meter32Member><MeterPerSecond32Member>32008</MeterPerSecond32Member><MeterPerSecondSquared32Member>32009</MeterPerSecondSquared32Member><Newton32Member>32010</Newton32Member><Pascal32Member>32011</Pascal32Member><Radian32Member>32012</Radian32Member><RadianPerSecond32Member>32013</RadianPerSecond32Member><RadianPerSecondSquared32Member>32014</RadianPerSecondSquared32Member><Second32Member>32015</Second32Member><SquareMeter32Member>32016</SquareMeter32Member><Steradian32Member>32017</Steradian32Member><Volt32Member>32018</Volt32Member><Watt32Member>32019</Watt32Member><Ampere64Member>64001</Ampere64Member><CubicMeter64Member>64002</CubicMeter64Member><Hertz64Member>64003</Hertz64Member><Joule64Member>64004</Joule64Member><Kelvin64Member>64005</Kelvin64Member><Kilogram64Member>64006</Kilogram64Member><Meter64Member>64007</Meter64Member><MeterPerSecond64Member>64008</MeterPerSecond64Member><MeterPerSecondSquared64Member>64009</MeterPerSecondSquared64Member><Newton64Member>64010</Newton64Member><Pascal64Member>64011</Pascal64Member><Radian64Member>64012</Radian64Member><RadianPerSecond64Member>64013</RadianPerSecond64Member><RadianPerSecondSquared64Member>64014</RadianPerSecondSquared64Member><Second64Member>64015</Second64Member><SquareMeter64Member>64016</SquareMeter64Member><Steradian64Member>64017</Steradian64Member><Volt64Member>64018</Volt64Member><Watt64Member>64019</Watt64Member><Int32ArrayMember><Int32 index="0">32</Int32><Int32 index="1">-32</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">64</Int64><Int64 index="1">-64</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">32</Float32><Float32 index="1">-32</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">64</Float64><Float64 index="1">-64</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve">Safir</String><String index="1" xml:space="preserve"></String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">VGVzdGluZyBiaW5hcnkgdHlwZQ==</Binary><Binary index="1"></Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>3200</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-3200</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">32001</Ampere32><Ampere32 index="1">-32001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">32002</CubicMeter32><CubicMeter32 index="1">-32002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">32003</Hertz32><Hertz32 index="1">-32003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">32004</Joule32><Joule32 index="1">-32004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">32005</Kelvin32><Kelvin32 index="1">-32005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">32006</Kilogram32><Kilogram32 index="1">-32006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">32007</Meter32><Meter32 index="1">-32007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">32008</MeterPerSecond32><MeterPerSecond32 index="1">-32008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">32009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-32009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">32010</Newton32><Newton32 index="1">-32010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">32011</Pascal32><Pascal32 index="1">-32011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">32012</Radian32><Radian32 index="1">-32012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">32013</RadianPerSecond32><RadianPerSecond32 index="1">-32013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">32014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-32014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">32015</Second32><Second32 index="1">-32015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">32016</SquareMeter32><SquareMeter32 index="1">-32016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">32017</Steradian32><Steradian32 index="1">-32017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">32018</Volt32><Volt32 index="1">-32018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">32019</Watt32><Watt32 index="1">-32019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">64001</Ampere64><Ampere64 index="1">-64001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">64002</CubicMeter64><CubicMeter64 index="1">-64002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">64003</Hertz64><Hertz64 index="1">-64003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">64004</Joule64><Joule64 index="1">-64004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">64005</Kelvin64><Kelvin64 index="1">-64005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">64006</Kilogram64><Kilogram64 index="1">-64006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">64007</Meter64><Meter64 index="1">-64007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">64008</MeterPerSecond64><MeterPerSecond64 index="1">-64008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">64009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-64009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">64010</Newton64><Newton64 index="1">-64010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">64011</Pascal64><Pascal64 index="1">-64011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">64012</Radian64><Radian64 index="1">-64012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">64013</RadianPerSecond64><RadianPerSecond64 index="1">-64013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">64014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-64014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">64015</Second64><Second64 index="1">-64015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">64016</SquareMeter64><SquareMeter64 index="1">-64016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">64017</Steradian64><Steradian64 index="1">-64017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">64018</Volt64><Volt64 index="1">-64018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">64019</Watt64><Watt64 index="1">-64019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalEntity>
  Changed top-level members: 
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    BooleanMember
    EnumerationMember
    StringMember
    EntityIdMember
    TypeIdMember
    InstanceIdMember
    ChannelIdMember
    HandlerIdMember
    ObjectMember
    BinaryMember
    TestClassMember
    Ampere32Member
    CubicMeter32Member
    Hertz32Member
    Joule32Member
    Kelvin32Member
    Kilogram32Member
    Meter32Member
    MeterPerSecond32Member
    MeterPerSecondSquared32Member
    Newton32Member
    Pascal32Member
    Radian32Member
    RadianPerSecond32Member
    RadianPerSecondSquared32Member
    Second32Member
    SquareMeter32Member
    Steradian32Member
    Volt32Member
    Watt32Member
    Ampere64Member
    CubicMeter64Member
    Hertz64Member
    Joule64Member
    Kelvin64Member
    Kilogram64Member
    Meter64Member
    MeterPerSecond64Member
    MeterPerSecondSquared64Member
    Newton64Member
    Pascal64Member
    Radian64Member
    RadianPerSecond64Member
    RadianPerSecondSquared64Member
    Second64Member
    SquareMeter64Member
    Steradian64Member
    Volt64Member
    Watt64Member
    Int32ArrayMember
    Int64ArrayMember
    Float32ArrayMember
    Float64ArrayMember
    StringArrayMember
    BinaryArrayMember
    TestClassArrayMember
    Ampere32ArrayMember
    CubicMeter32ArrayMember
    Hertz32ArrayMember
    Joule32ArrayMember
    Kelvin32ArrayMember
    Kilogram32ArrayMember
    Meter32ArrayMember
    MeterPerSecond32ArrayMember
    MeterPerSecondSquared32ArrayMember
    Newton32ArrayMember
    Pascal32ArrayMember
    Radian32ArrayMember
    RadianPerSecond32ArrayMember
    RadianPerSecondSquared32ArrayMember
    Second32ArrayMember
    SquareMeter32ArrayMember
    Steradian32ArrayMember
    Volt32ArrayMember
    Watt32ArrayMember
    Ampere64ArrayMember
    CubicMeter64ArrayMember
    Hertz64ArrayMember
    Joule64ArrayMember
    Kelvin64ArrayMember
    Kilogram64ArrayMember
    Meter64ArrayMember
    MeterPerSecond64ArrayMember
    MeterPerSecondSquared64ArrayMember
    Newton64ArrayMember
    Pascal64ArrayMember
    Radian64ArrayMember
    RadianPerSecond64ArrayMember
    RadianPerSecondSquared64ArrayMember
    Second64ArrayMember
    SquareMeter64ArrayMember
    Steradian64ArrayMember
    Volt64ArrayMember
    Watt64ArrayMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.ComplexGlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <?xml version="1.0" encoding="utf-8"?><DoseTest.ComplexGlobalEntity><Int32Member>320</Int32Member><Int64Member>640</Int64Member><Float32Member>320</Float32Member><Float64Member>640</Float64Member><BooleanMember>false</BooleanMember><EnumerationMember>MySecond</EnumerationMember><StringMember xml:space="preserve">Safir SDK</StringMember><EntityIdMember><name>DoseTest.RootEntity</name><instanceId>1</instanceId></EntityIdMember><TypeIdMember>Object</TypeIdMember><InstanceIdMember>AnotherInstance</InstanceIdMember><ChannelIdMember>AnotherChannel</ChannelIdMember><HandlerIdMember>AnotherHandler</HandlerIdMember><ObjectMember type="DoseTest.TestItem"></ObjectMember><BinaryMember>b25jZSBtb3JlLi4u</BinaryMember><TestClassMember></TestClassMember><Ampere32Member>320001</Ampere32Member><CubicMeter32Member>320002</CubicMeter32Member><Hertz32Member>320003</Hertz32Member><Joule32Member>320004</Joule32Member><Kelvin32Member>320005</Kelvin32Member><Kilogram32Member>320006</Kilogram32Member><Meter32Member>320007</Meter32Member><MeterPerSecond32Member>320008</MeterPerSecond32Member><MeterPerSecondSquared32Member>320009</MeterPerSecondSquared32Member><Newton32Member>320010</Newton32Member><Pascal32Member>320011</Pascal32Member><Radian32Member>320012</Radian32Member><RadianPerSecond32Member>320013</RadianPerSecond32Member><RadianPerSecondSquared32Member>320014</RadianPerSecondSquared32Member><Second32Member>320015</Second32Member><SquareMeter32Member>320016</SquareMeter32Member><Steradian32Member>320017</Steradian32Member><Volt32Member>320018</Volt32Member><Watt32Member>320019</Watt32Member><Ampere64Member>640001</Ampere64Member><CubicMeter64Member>640002</CubicMeter64Member><Hertz64Member>640003</Hertz64Member><Joule64Member>640004</Joule64Member><Kelvin64Member>640005</Kelvin64Member><Kilogram64Member>640006</Kilogram64Member><Meter64Member>640007</Meter64Member><MeterPerSecond64Member>640008</MeterPerSecond64Member><MeterPerSecondSquared64Member>640009</MeterPerSecondSquared64Member><Newton64Member>640010</Newton64Member><Pascal64Member>640011</Pascal64Member><Radian64Member>640012</Radian64Member><RadianPerSecond64Member>640013</RadianPerSecond64Member><RadianPerSecondSquared64Member>640014</RadianPerSecondSquared64Member><Second64Member>640015</Second64Member><SquareMeter64Member>640016</SquareMeter64Member><Steradian64Member>640017</Steradian64Member><Volt64Member>640018</Volt64Member><Watt64Member>640019</Watt64Member><Int32ArrayMember><Int32 index="0">320</Int32><Int32 index="1">-320</Int32></Int32ArrayMember><Int64ArrayMember><Int64 index="0">640</Int64><Int64 index="1">-640</Int64></Int64ArrayMember><Float32ArrayMember><Float32 index="0">320</Float32><Float32 index="1">-320</Float32></Float32ArrayMember><Float64ArrayMember><Float64 index="0">640</Float64><Float64 index="1">-640</Float64></Float64ArrayMember><BooleanArrayMember><Boolean index="0">true</Boolean><Boolean index="1">false</Boolean></BooleanArrayMember><EnumerationArrayMember><DoseTest.TestEnum index="0">MyFirst</DoseTest.TestEnum><DoseTest.TestEnum index="1">MySecond</DoseTest.TestEnum></EnumerationArrayMember><StringArrayMember><String index="0" xml:space="preserve"></String><String index="1" xml:space="preserve">rifaS</String></StringArrayMember><EntityIdArrayMember><EntityId index="0"><name>DoseTest.RootEntity</name><instanceId>0</instanceId></EntityId><EntityId index="1"><name>DoseTest.RootEntity</name><instanceId>SomeInstance</instanceId></EntityId></EntityIdArrayMember><TypeIdArrayMember><TypeId index="0">DoseTest.TestItem</TypeId><TypeId index="1">DoseTest.TestEnum</TypeId></TypeIdArrayMember><InstanceIdArrayMember><InstanceId index="0">0</InstanceId><InstanceId index="1">SomeInstance</InstanceId></InstanceIdArrayMember><ChannelIdArrayMember><ChannelId index="0">0</ChannelId><ChannelId index="1">SomeChannel</ChannelId></ChannelIdArrayMember><HandlerIdArrayMember><HandlerId index="0">0</HandlerId><HandlerId index="1">SomeHandler</HandlerId></HandlerIdArrayMember><ObjectArrayMember><Object index="0"></Object><Object index="1"></Object></ObjectArrayMember><BinaryArrayMember><Binary index="0">b25jZSBtb3JlLi4u</Binary></BinaryArrayMember><TestClassArrayMember><DoseTest.TestItem index="0"><MyInt>32000</MyInt></DoseTest.TestItem><DoseTest.TestItem index="1"><MyInt>-32000</MyInt></DoseTest.TestItem></TestClassArrayMember><Ampere32ArrayMember><Ampere32 index="0">320001</Ampere32><Ampere32 index="1">-320001</Ampere32></Ampere32ArrayMember><CubicMeter32ArrayMember><CubicMeter32 index="0">320002</CubicMeter32><CubicMeter32 index="1">-320002</CubicMeter32></CubicMeter32ArrayMember><Hertz32ArrayMember><Hertz32 index="0">320003</Hertz32><Hertz32 index="1">-320003</Hertz32></Hertz32ArrayMember><Joule32ArrayMember><Joule32 index="0">320004</Joule32><Joule32 index="1">-320004</Joule32></Joule32ArrayMember><Kelvin32ArrayMember><Kelvin32 index="0">320005</Kelvin32><Kelvin32 index="1">-320005</Kelvin32></Kelvin32ArrayMember><Kilogram32ArrayMember><Kilogram32 index="0">320006</Kilogram32><Kilogram32 index="1">-320006</Kilogram32></Kilogram32ArrayMember><Meter32ArrayMember><Meter32 index="0">320007</Meter32><Meter32 index="1">-320007</Meter32></Meter32ArrayMember><MeterPerSecond32ArrayMember><MeterPerSecond32 index="0">320008</MeterPerSecond32><MeterPerSecond32 index="1">-320008</MeterPerSecond32></MeterPerSecond32ArrayMember><MeterPerSecondSquared32ArrayMember><MeterPerSecondSquared32 index="0">320009</MeterPerSecondSquared32><MeterPerSecondSquared32 index="1">-320009</MeterPerSecondSquared32></MeterPerSecondSquared32ArrayMember><Newton32ArrayMember><Newton32 index="0">320010</Newton32><Newton32 index="1">-320010</Newton32></Newton32ArrayMember><Pascal32ArrayMember><Pascal32 index="0">320011</Pascal32><Pascal32 index="1">-320011</Pascal32></Pascal32ArrayMember><Radian32ArrayMember><Radian32 index="0">320012</Radian32><Radian32 index="1">-320012</Radian32></Radian32ArrayMember><RadianPerSecond32ArrayMember><RadianPerSecond32 index="0">320013</RadianPerSecond32><RadianPerSecond32 index="1">-320013</RadianPerSecond32></RadianPerSecond32ArrayMember><RadianPerSecondSquared32ArrayMember><RadianPerSecondSquared32 index="0">320014</RadianPerSecondSquared32><RadianPerSecondSquared32 index="1">-320014</RadianPerSecondSquared32></RadianPerSecondSquared32ArrayMember><Second32ArrayMember><Second32 index="0">320015</Second32><Second32 index="1">-320015</Second32></Second32ArrayMember><SquareMeter32ArrayMember><SquareMeter32 index="0">320016</SquareMeter32><SquareMeter32 index="1">-320016</SquareMeter32></SquareMeter32ArrayMember><Steradian32ArrayMember><Steradian32 index="0">320017</Steradian32><Steradian32 index="1">-320017</Steradian32></Steradian32ArrayMember><Volt32ArrayMember><Volt32 index="0">320018</Volt32><Volt32 index="1">-320018</Volt32></Volt32ArrayMember><Watt32ArrayMember><Watt32 index="0">320019</Watt32><Watt32 index="1">-320019</Watt32></Watt32ArrayMember><Ampere64ArrayMember><Ampere64 index="0">640001</Ampere64><Ampere64 index="1">-640001</Ampere64></Ampere64ArrayMember><CubicMeter64ArrayMember><CubicMeter64 index="0">640002</CubicMeter64><CubicMeter64 index="1">-640002</CubicMeter64></CubicMeter64ArrayMember><Hertz64ArrayMember><Hertz64 index="0">640003</Hertz64><Hertz64 index="1">-640003</Hertz64></Hertz64ArrayMember><Joule64ArrayMember><Joule64 index="0">640004</Joule64><Joule64 index="1">-640004</Joule64></Joule64ArrayMember><Kelvin64ArrayMember><Kelvin64 index="0">640005</Kelvin64><Kelvin64 index="1">-640005</Kelvin64></Kelvin64ArrayMember><Kilogram64ArrayMember><Kilogram64 index="0">640006</Kilogram64><Kilogram64 index="1">-640006</Kilogram64></Kilogram64ArrayMember><Meter64ArrayMember><Meter64 index="0">640007</Meter64><Meter64 index="1">-640007</Meter64></Meter64ArrayMember><MeterPerSecond64ArrayMember><MeterPerSecond64 index="0">640008</MeterPerSecond64><MeterPerSecond64 index="1">-640008</MeterPerSecond64></MeterPerSecond64ArrayMember><MeterPerSecondSquared64ArrayMember><MeterPerSecondSquared64 index="0">640009</MeterPerSecondSquared64><MeterPerSecondSquared64 index="1">-640009</MeterPerSecondSquared64></MeterPerSecondSquared64ArrayMember><Newton64ArrayMember><Newton64 index="0">640010</Newton64><Newton64 index="1">-640010</Newton64></Newton64ArrayMember><Pascal64ArrayMember><Pascal64 index="0">640011</Pascal64><Pascal64 index="1">-640011</Pascal64></Pascal64ArrayMember><Radian64ArrayMember><Radian64 index="0">640012</Radian64><Radian64 index="1">-640012</Radian64></Radian64ArrayMember><RadianPerSecond64ArrayMember><RadianPerSecond64 index="0">640013</RadianPerSecond64><RadianPerSecond64 index="1">-640013</RadianPerSecond64></RadianPerSecond64ArrayMember><RadianPerSecondSquared64ArrayMember><RadianPerSecondSquared64 index="0">640014</RadianPerSecondSquared64><RadianPerSecondSquared64 index="1">-640014</RadianPerSecondSquared64></RadianPerSecondSquared64ArrayMember><Second64ArrayMember><Second64 index="0">640015</Second64><Second64 index="1">-640015</Second64></Second64ArrayMember><SquareMeter64ArrayMember><SquareMeter64 index="0">640016</SquareMeter64><SquareMeter64 index="1">-640016</SquareMeter64></SquareMeter64ArrayMember><Steradian64ArrayMember><Steradian64 index="0">640017</Steradian64><Steradian64 index="1">-640017</Steradian64></Steradian64ArrayMember><Volt64ArrayMember><Volt64 index="0">640018</Volt64><Volt64 index="1">-640018</Volt64></Volt64ArrayMember><Watt64ArrayMember><Watt64 index="0">640019</Watt64><Watt64 index="1">-640019</Watt64></Watt64ArrayMember></DoseTest.ComplexGlobalEntity>

==========================================================================
TESTCASE 520
Description: A handler receives an update request for a non-existing entity.
Expectation: Partner 0 receives a SafirNotRegistered response.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 321321) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone.999999;0;partner_test_connection;2</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">hej pa dig!</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 550
Description: Test of IsCreated
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
Consumer 0: The instance (DoseTest.LocalEntity, 0) is not created.
Consumer 0: The instance (DoseTest.LocalEntity, 0) is created.
==========================================================================
TESTCASE 551
Description: Test of IsCreated when other connection is owner
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
Consumer 0: The instance (DoseTest.GlobalEntity, 0) is not created.
Consumer 0: The instance (DoseTest.GlobalEntity, 0) is created.
==========================================================================
TESTCASE 560
Description: Test of reception of an EntityHandlerResponse when the handler decides instance id
Expectation: Partner 0/Consumer 0 receives an EntityIdResponse with member Assigned set to -6778878277529052275
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = Safir.Dob.EntityIdResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.EntityIdResponse><Assigned><name>DoseTest.GlobalEntity</name><instanceId>-6778878277529052275</instanceId></Assigned></Safir.Dob.EntityIdResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 561
Description: Test of reception of an OnCreateRequest where the handler decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Handler decides instance id) without instance id
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnCreateRequest (Handler decides instance id): 
  Type       = 6042018368104450073
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 0: Handler created instance -6778878277529052275
==========================================================================
TESTCASE 562
Description: Test of reception of an OnCreateRequest where the requestor decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Requestor decides instance id) with instance id 789789789
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 789789789)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 570
Description: Test that only the specified handler gets the request.
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 0)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = 816403178076060765
  HandlerStr = 816403178076060765
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulCreate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulCreate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulCreate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulCreate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulCreate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulCreate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The handler 429369164906064768 is not registered for the type DoseTest.GlobalEntity!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Created</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 571
Description: Test of sending update request of created instance (owner on other node)
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 0)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = 816403178076060765
  HandlerStr = 816403178076060765
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulUpdate><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulUpdate>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 3) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Updated</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 572
Description: Test of sending update request of created instance (owner on other node)
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 0)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = 816403178076060765
  HandlerStr = 816403178076060765

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulDelete><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulDelete>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 0)

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulDelete><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulDelete>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 1)

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><DoseTest.SuccessfulDelete><Info xml:space="preserve">AutoResponse</Info></DoseTest.SuccessfulDelete>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 2)

Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ErrorResponse><Code xml:space="preserve">SafirNotRegistered</Code><AdditionalInfo xml:space="preserve">The instance (DoseTest.GlobalEntity, 3) does not exist!</AdditionalInfo></Safir.Dob.ErrorResponse>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 3)

==========================================================================
TESTCASE 600
Description: Test of GetQueueSize
Expectation: Queue size should be 0 for all queues
--------- Setup -----------
--------- Test  -----------
Consumer 0: The size of MessageOutQueue is 0
Consumer 0: The size of RequestOutQueue is 0
Consumer 0: The size of MessageOutQueue is 0
Consumer 0: The size of RequestOutQueue is 0
Consumer 0: The size of MessageOutQueue is 0
Consumer 0: The size of RequestOutQueue is 0
==========================================================================
TESTCASE 601
Description: Test of GetQueueCapacity
Expectation: Queue capacity should be 10 for all queues
--------- Setup -----------
--------- Test  -----------
Consumer 0: The capacity of MessageOutQueue is 10
Consumer 0: The capacity of MessageInQueue is 10
Consumer 0: The capacity of RequestOutQueue is 10
Consumer 0: The capacity of RequestInQueue is 10
Consumer 0: The capacity of MessageOutQueue is 10
Consumer 0: The capacity of MessageInQueue is 20
Consumer 0: The capacity of RequestOutQueue is 10
Consumer 0: The capacity of RequestInQueue is 10
Consumer 0: The capacity of MessageOutQueue is 20
Consumer 0: The capacity of MessageInQueue is 10
Consumer 0: The capacity of RequestOutQueue is 10
Consumer 0: The capacity of RequestInQueue is 10
Consumer 0: The capacity of MessageOutQueue is 10
Consumer 0: The capacity of MessageInQueue is 10
Consumer 0: The capacity of RequestOutQueue is 10
Consumer 0: The capacity of RequestInQueue is 20
Consumer 0: The capacity of MessageOutQueue is 10
Consumer 0: The capacity of MessageInQueue is 10
Consumer 0: The capacity of RequestOutQueue is 20
Consumer 0: The capacity of RequestInQueue is 10
==========================================================================
TESTCASE 610
Description: Closing and reopening a connection repeatedly
Expectation: No exceptions
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 700
Description: Test of iterating a single entity type
Expectation: There should be two entities (Info set to "One" and "Two")
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.LocalEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">One</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 701
Description: Test of iterating an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.GlobalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">Two</Info></DoseTest.GlobalEntity>
  EntityId  = (DoseTest.GlobalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">One</Info></DoseTest.GlobalEntity>
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;0</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">One</Info></DoseTest.LocalEntity>
  EntityId  = (DoseTest.RootEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">Two</Info></DoseTest.RootEntity>
  EntityId  = (DoseTest.RootEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.RootEntity><Info xml:space="preserve">One</Info></DoseTest.RootEntity>

==========================================================================
TESTCASE 702
Description: Test of iterating a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.LocalEntity:

==========================================================================
TESTCASE 703
Description: Test of iterating an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:

==========================================================================
TESTCASE 704
Description: Test of iterating an entity class tree where there are ghosts
Expectation: There should be two Local entities (One and Two), twice (the iteration is done twice).
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">One</Info></DoseTest.LocalEntity>

Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">Two</Info></DoseTest.LocalEntity>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.LocalEntity><Info xml:space="preserve">One</Info></DoseTest.LocalEntity>

==========================================================================
TESTCASE 710
Description: Test GetNumberOfInstances with entities of a single type
Expectation: There should be two local entities set by default handler.
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 711
Description: Test of GetNumberOfInstances on an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local, all set by default handler
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 6
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 6
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 712
Description: Test of GetNumberOfInstances on a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 0
==========================================================================
TESTCASE 713
Description: Test of GetNumberOfInstances on an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = true): 0
==========================================================================
TESTCASE 714
Description: Test of GetNumberOfInstances on an entity class tree where there are ghosts
Expectation: There should be two Local entities twice, then the ghosts are removed and the checks are done again.
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 720
Description: Test GetInstanceIdPolicy.
Expectation: Handler_1 uses RequestorDecidesInstanceId and Handler_2 uses HandlerDecidesInstanceId.
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetInstanceIdPolicy (type = DoseTest.LocalEntity, handler = Handler_1): RequestorDecidesInstanceId
Consumer 0: GetInstanceIdPolicy (type = DoseTest.LocalEntity, handler = Handler_2): HandlerDecidesInstanceId
==========================================================================
TESTCASE 800
Description: Test of synchronous volatile persistence
Expectation: Partner 0 receives OnNewInjectedEntity. Partner 1 receives OnNewEntity and OnDeletedEntity
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 12345)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousVolatileEntity><Info xml:space="preserve">Blabla</Info></DoseTest.SynchronousVolatileEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 815
Description: Test of overregistration of a handler for a synchronous volatile persistence type. The instance is deleted by the new registerer when injected.
Expectation: Node 0 receives OnInitialInjectionsDone and OnRevokedRegistration. Node 1 receives OnNewEntity and OnDeletedEntity. Node 2 receives OnInjectedNewEntity and OnInitialInjectionsDone.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 830
Description: Test of volatile persistence with two different handlers for the same type
Expectation: Partner 0 receives OnNewInjectedEntity for instance 678678. Partner 1 receives OnNewInjectedEntity for instance 353535
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P0_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 678678)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousVolatileEntity><Info xml:space="preserve">Partner0BlaBla</Info></DoseTest.SynchronousVolatileEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = -8491672046075317202

==========================================================================
TESTCASE 850
Description: Check that ghost instances get dispatched to correct handler when there are sevaral handlers for a type.
Expectation: Partner 0 receives no OnNewInjectedEntity. Partner 0 receives one OnNewInjectedEntity for instance 353535.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P0_HANDLER

--------- Test  -----------
==========================================================================
TESTCASE 900
Description: Test of sending and subscribing of global messages in different contexts
Expectation: Partner 0 recieves one global message with info "context 0". Partner 1 recieves one global message with info "context 1".
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalMessage><Info xml:space="preserve">context 0</Info></DoseTest.GlobalMessage>


==========================================================================
TESTCASE 901
Description: Test of sending and subscribing of a context shared message.
Expectation: Both partner 0 and partner 1 recieves the context shared message.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.ContextSharedMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedMessage><Info xml:space="preserve">context shared info</Info></DoseTest.ContextSharedMessage>


==========================================================================
TESTCASE 902
Description: Test of sending a context shared message from context != 0.
Expectation: Partner 0 gets a Software violation exception
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.Typesystem.SoftwareViolationException
==========================================================================
TESTCASE 910
Description: Test of registering/unregistering with different contexts
Expectation: Partner 0(context 0) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 911
Description: Test of registering/unregistering with different contexts. Registration subcriber in context 1.
Expectation: Partner 0 (context 1) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 912
Description: Test of registering/unregistering with different contexts
Expectation: P0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 920
Description: Testing of pending registration of global service handler in different contexts
Expectation: Both partner 1 and 2 should receive an OnCompletedRegistration.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 921
Description: Testing of pending registration of global service handler with contexts
Expectation: P0 should receive OnRegistered, OnUnregistered and OnRegistered of Global Service. P1 should receive OnRegistered and OnUnregistered. P2 should receive OnCompletedRegistration
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 922
Description: Testing of pending registration of global service handler with contexts
Expectation: P0 should receive OnRegistered and OnUnregistered. P1 should receive OnRegistered, OnUnregistered and OnRegistered. P2 should receive OnCompletedRegistration
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 925
Description: Test that a service request is sent to handler in correct context.
Expectation: Partner 1 (context 1) receives one OnServiceRequest. Partner 0 (context 0) receives no service request.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 926
Description: Test that a service request on a ContextShared service can be sent from any context.
Expectation: P0 (context 0) receives two OnServiceRequest. P1 and P2 receive an OnResponse (DoseTest.SucessfullService)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.ContextSharedService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedService></DoseTest.ContextSharedService>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.ContextSharedService
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;1;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedService></DoseTest.ContextSharedService>

==========================================================================
TESTCASE 927
Description: Test of register a context shared service from context != 0.
Expectation: Partner 0 gets a Software violation exception
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.Typesystem.SoftwareViolationException
==========================================================================
TESTCASE 940
Description: Test of registering/unregistering entity handlers in different contexts
Expectation: Partner 0(context 0) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 941
Description: Test of registering/unregistering entity handlers in different contexts. Registration subcriber in context 1.
Expectation: Partner 0 (context 1) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 942
Description: Test of registering/unregistering entity handlers in different contexts
Expectation: P0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 950
Description: Testing of pending registration of global entity handler in different contexts
Expectation: Both partner 1 and 2 should receive one OnCompletedRegistration and one OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 951
Description: Testing of pending registration of global entity handler with contexts
Expectation: P0 should receive OnRegistered, OnUnregistered and OnRegistered of Global Entity. P1 should receive OnRegistered and OnUnregistered. P2 should receive OnCompletedRegistration and OnInitialInjectionsDone
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 952
Description: Testing of pending registration of global entity handler with contexts
Expectation: P0 should receive OnRegistered and OnUnregistered. P1 should receive OnRegistered, OnUnregistered and OnRegistered. P2 should receive OnCompletedRegistration and OnInitialInjectionsDone
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 955
Description: Test that an entity create request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnCreateRequest. P0 (context 0) receives no entity create request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 956
Description: Test that an entity update request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnUpdateRequest. P0 (context 0) receives no entity update request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 957
Description: Test that an entity delete request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnDeleteRequest. P0 (context 0) receives no entity delete request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 960
Description: Test that an entity create request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnCreateRequest(instance 111 and 222). P1 and P2 receive an OnResponse (DoseTest.SuccessfulCreate)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.ContextSharedEntity, 111)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedEntity><Info xml:space="preserve">Create request from context 0</Info></DoseTest.ContextSharedEntity>

Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.ContextSharedEntity, 222)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;1;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedEntity><Info xml:space="preserve">Create request from context 1</Info></DoseTest.ContextSharedEntity>

==========================================================================
TESTCASE 961
Description: Test that an entity update request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnUpdateRequest. P1 and P2 receive an OnResponse (DoseTest.Success)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnUpdateRequest: 
  Entity     = (DoseTest.ContextSharedEntity, 345)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedEntity><Info xml:space="preserve">Update request from context 0</Info></DoseTest.ContextSharedEntity>

Consumer 1: OnUpdateRequest: 
  Entity     = (DoseTest.ContextSharedEntity, 345)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;1;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <?xml version="1.0" encoding="utf-8"?><DoseTest.ContextSharedEntity><Info xml:space="preserve">Update request from context 1</Info></DoseTest.ContextSharedEntity>

==========================================================================
TESTCASE 962
Description: Test that an entity delete request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnDeleteRequest. P1 and P2 receive an OnResponse (DoseTest.SuccessfulDelete)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnDeleteRequest: 
  Entity     = (DoseTest.ContextSharedEntity, 345)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

Consumer 1: OnDeleteRequest: 
  Entity     = (DoseTest.ContextSharedEntity, 678)
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;1;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

==========================================================================
TESTCASE 965
Description: Test that a connection in context 0 "sees" only entities in context 0.
Expectation: P0 "sees" one GlobalEntity instance (321).
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.GlobalEntity, 321):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">This is a GlobalEntity</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 966
Description: Test that a connection in context 1 "sees" entities in context 1 and ContextShared entities.
Expectation: P2 "sees" one ContextSharedEntity instance (2222) and one GlobalEntity2 instance (3333).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 970
Description: Test that ghosts from correct context is injected
Expectation: P0 receives OnNewInjectedEntity with SynchronousVolatileEntity (inst 54321), member 'Info' has value "Context 0". P1 receives OnNewInjectedEntity with SynchronousVolatileEntity (inst 54321), member 'Info' has value "Context 1".
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 54321)
  Injection = <?xml version="1.0" encoding="utf-8"?><DoseTest.SynchronousVolatileEntity><Info xml:space="preserve">Context 0</Info></DoseTest.SynchronousVolatileEntity>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 980
Description: Test to read the current context for a connection.
Expectation: Partner 0 's test connection is opened in context 0 and Partner 1 's test connection is opened in context 1
--------- Setup -----------
--------- Test  -----------
Consumer 0: The test connection is opened in context 0
==========================================================================
TESTCASE 1000
Description: Test a foreach update request with a brief response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful brief response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.BriefResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.BriefResponse><NumberOfSuccessResponses>2</NumberOfSuccessResponses><NumberOfErrorResponses>0</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses></Safir.Utilities.ForEach.BriefResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.UpdateRequest><TemplateEntityRequest type="DoseTest.GlobalEntity"><Info xml:space="preserve">KalleKula</Info></TemplateEntityRequest><ResponseType>Brief</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.UpdateRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
  EntityId  = (DoseTest.GlobalEntity, 123):
  Owner     = -5453762115588730630
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -5453762115588730630
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
  EntityId  = (DoseTest.GlobalEntity, 456):
  Owner     = -6040750362377884435
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6040750362377884435
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 1001
Description: Test a foreach update request with a brief response containing both one successful and two unsuccessful response.
Expectation: Partner 1 and 2 should get an update request. Partner 0 should get a brief response with one success and two errors. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.BriefResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.BriefResponse><NumberOfSuccessResponses>1</NumberOfSuccessResponses><NumberOfErrorResponses>2</NumberOfErrorResponses><NumberOfResponses>3</NumberOfResponses></Safir.Utilities.ForEach.BriefResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.UpdateRequest><TemplateEntityRequest type="DoseTest.GlobalEntity"><Info xml:space="preserve">KalleKula</Info></TemplateEntityRequest><ResponseType>Brief</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId><EntityId index="2"><name>DoseTest.GlobalEntity</name><instanceId>789</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.UpdateRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
  EntityId  = (DoseTest.GlobalEntity, 123):
  Owner     = -5453762115588730630
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -5453762115588730630
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
  EntityId  = (DoseTest.GlobalEntity, 456):
  Owner     = -6040750362377884435
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6040750362377884435
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 1002
Description: Test a foreach update request with a full response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful full response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.FullResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.FullResponse><NumberOfSuccessResponses>2</NumberOfSuccessResponses><NumberOfErrorResponses>0</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses><Response><Safir.Dob.Response type="DoseTest.Success" index="0"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response><Safir.Dob.Response type="DoseTest.Success" index="1"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response></Response></Safir.Utilities.ForEach.FullResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.UpdateRequest><TemplateEntityRequest type="DoseTest.GlobalEntity"><Info xml:space="preserve">KalleKula</Info></TemplateEntityRequest><ResponseType>Full</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.UpdateRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
  EntityId  = (DoseTest.GlobalEntity, 123):
  Owner     = -5453762115588730630
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -5453762115588730630
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
  EntityId  = (DoseTest.GlobalEntity, 456):
  Owner     = -6040750362377884435
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6040750362377884435
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 1003
Description: Test a foreach update request with a full response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get an update request. Partner 0 should get a full response with one success and one error. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.FullResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.FullResponse><NumberOfSuccessResponses>1</NumberOfSuccessResponses><NumberOfErrorResponses>1</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses><Response><Safir.Dob.Response type="DoseTest.Success" index="0"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response><Safir.Dob.Response type="Safir.Dob.ErrorResponse" index="1"><Code xml:space="preserve">BadBadbad</Code></Safir.Dob.Response></Response></Safir.Utilities.ForEach.FullResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.UpdateRequest><TemplateEntityRequest type="DoseTest.GlobalEntity"><Info xml:space="preserve">KalleKula</Info></TemplateEntityRequest><ResponseType>Full</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.UpdateRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
  EntityId  = (DoseTest.GlobalEntity, 123):
  Owner     = -5453762115588730630
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -5453762115588730630
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
  EntityId  = (DoseTest.GlobalEntity, 456):
  Owner     = -6040750362377884435
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6040750362377884435
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 1004
Description: Test a foreach update request with a immediate response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful immediate response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.SuccessResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.SuccessResponse></Safir.Dob.SuccessResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.UpdateRequest><TemplateEntityRequest type="DoseTest.GlobalEntity"><Info xml:space="preserve">KalleKula</Info></TemplateEntityRequest><ResponseType>Immediate</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.UpdateRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
  EntityId  = (DoseTest.GlobalEntity, 123):
  Owner     = -5453762115588730630
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;1</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -5453762115588730630
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
  EntityId  = (DoseTest.GlobalEntity, 456):
  Owner     = -6040750362377884435
  OwnerConn = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;partner_test_connection;2</ConnectionName></Safir.Dob.ConnectionInfo>
  OwnerStr  = -6040750362377884435
  Entity    = <?xml version="1.0" encoding="utf-8"?><DoseTest.GlobalEntity><Info xml:space="preserve">KalleKula</Info></DoseTest.GlobalEntity>

==========================================================================
TESTCASE 1005
Description: Test a foreach delete request with a brief response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful brief response. The read of the instances should give Not Found
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.BriefResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.BriefResponse><NumberOfSuccessResponses>2</NumberOfSuccessResponses><NumberOfErrorResponses>0</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses></Safir.Utilities.ForEach.BriefResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.DeleteRequest><ResponseType>Brief</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.DeleteRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 1006
Description: Test a foreach delete request with a brief response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get a delete request. Partner 0 should get a brief response with one success and one error. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.BriefResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.BriefResponse><NumberOfSuccessResponses>1</NumberOfSuccessResponses><NumberOfErrorResponses>1</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses></Safir.Utilities.ForEach.BriefResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.DeleteRequest><ResponseType>Brief</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.DeleteRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 1007
Description: Test a foreach delete request with a full response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful full response. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.FullResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.FullResponse><NumberOfSuccessResponses>2</NumberOfSuccessResponses><NumberOfErrorResponses>0</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses><Response><Safir.Dob.Response type="DoseTest.Success" index="0"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response><Safir.Dob.Response type="DoseTest.Success" index="1"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response></Response></Safir.Utilities.ForEach.FullResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.DeleteRequest><ResponseType>Full</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.DeleteRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 1008
Description: Test a foreach delete request with a full response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get a delete request. Partner 0 should get a full response with one success and one error. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Utilities.ForEach.FullResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.FullResponse><NumberOfSuccessResponses>1</NumberOfSuccessResponses><NumberOfErrorResponses>1</NumberOfErrorResponses><NumberOfResponses>2</NumberOfResponses><Response><Safir.Dob.Response type="DoseTest.Success" index="0"><Info xml:space="preserve">Succesful response</Info></Safir.Dob.Response><Safir.Dob.Response type="Safir.Dob.ErrorResponse" index="1"><Code xml:space="preserve">BadBadbad</Code></Safir.Dob.Response></Response></Safir.Utilities.ForEach.FullResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.DeleteRequest><ResponseType>Full</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.DeleteRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 1009
Description: Test a foreach delete request with a immediate response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful immediate response. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.SuccessResponse
  IsSuccess  = true
  Sender     = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.ConnectionInfo><NodeId>999999</NodeId><ConnectionName xml:space="preserve">StandAlone.999999;0;ForEach-context0;0</ConnectionName></Safir.Dob.ConnectionInfo>
  Response   = <?xml version="1.0" encoding="utf-8"?><Safir.Dob.SuccessResponse></Safir.Dob.SuccessResponse>
  Request    = <?xml version="1.0" encoding="utf-8"?><Safir.Utilities.ForEach.DeleteRequest><ResponseType>Immediate</ResponseType><OperateOn><EntityId index="0"><name>DoseTest.GlobalEntity</name><instanceId>123</instanceId></EntityId><EntityId index="1"><name>DoseTest.GlobalEntity</name><instanceId>456</instanceId></EntityId></OperateOn></Safir.Utilities.ForEach.DeleteRequest>

Consumer 0: Read entity (DoseTest.GlobalEntity, 123):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: Read entity (DoseTest.GlobalEntity, 456):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 1100
Description: Test of the backdoor keeper.
Expectation: Partner 0 shall report: 1.Backdoor is not started. 2.Backdoor is started. 3.Received command "test-command 2 olle" 4.Backdoor is not started. 5.Backdoor is started. 6.Received command "test-command 4 bertil bertilsson".
--------- Setup -----------
Consumer 0: The backdoor is not started
Consumer 0: StartBackdoor
Consumer 0: The backdoor is started
Consumer 0: Got a backdoor HandleCommand callback. Command tokens:
test-command 2 olle 
Consumer 0: StopBackdoor
Consumer 0: The backdoor is not started
Consumer 0: StartBackdoor
Consumer 0: The backdoor is started
Consumer 0: Got a backdoor HandleCommand callback. Command tokens:
test-command 4 bertil bertilsson 
--------- Test  -----------
==========================================================================
TESTCASE 1101
Description: Test that a backdoor keeper can be "restarted" when the main connection has been closed and opened in a different context.
Expectation: Partner 0 shall receive command "test-command 1" and "test-command 3"
--------- Setup -----------
Consumer 0: StartBackdoor
Consumer 0: Got a backdoor HandleCommand callback. Command tokens:
test-command 1 
Consumer 0: StartBackdoor
Consumer 0: Got a backdoor HandleCommand callback. Command tokens:
test-command 3 
--------- Test  -----------
==========================================================================
TESTCASE 9999
Description: Empty Test case
Expectation: Nothing
--------- Setup -----------
--------- Test  -----------

#
# Config file for the SafirSDKCore package
#
# This file will set up the variables and functions needed to build and link Safir
# programs, including building safir_generated libraries.
#
# After having run find_package(SafirSDKCore) the following variables and functions will
# be defined:
#
# SAFIR_SDK_CORE_LIBRARIES - Libraries that Safir applications should link to.
# SAFIR_SDK_CORE_LIBRARIES_DIR - Location of Safir SDK Core libraries
# SAFIR_SDK_CORE_INCLUDE_DIRS - Location of Safir SDK Core headers
#
# ADD_SAFIR_GENERATED_LIBRARY(NAME <target name>
#                             [DOU_FILES <file1> .. <fileN>]
#                             [DOM_FILES <file1> .. <fileN>]
#                             [NAMESPACE_MAPPINGS <file1> .. <fileN>]
#                             [GLOB]
#                             [DEPENDENCIES <dep1> .. <depN>]
#
#  NAME: Name of the target to create. If for example NAME is Foo the C++ libraries will
#        be called safir_generated-Foo-cpp.dll on windows.
#  DOU_FILES: The dou files to use to generate code.
#  DOM_FILES: Property mappings that should be installed as part of this target.
#  NAMESPACE_MAPPINGS: Java namespace mappings.
#  GLOB: Use this to automatically find dou, dom and namespace.txt files in the current source directory.
#        This option can not be used together with DOU_FILES, DOM_FILES and NAMESPACE_MAPPINGS.
#  DEPENDENCIES: Dependencies to other safir_generated targets within the build tree.
#
# INSTALL_SAFIR_GENERATED_LIBRARY(TARGETS <target1> .. <targetN>
#                                 [CXX_RUNTIME <c++ windows .dll destination dir>]
#                                 [CXX_LIBRARY <c++ linux .so destination dir>]
#                                 [CXX_ARCHIVE <c++ windows .lib destination dir>]
#                                 [CXX_INCLUDE <c++ include destination dir>]
#                                 [JAR <java .jar destination dir>]
#                                 [DOTNET <dotnet .dll destination dir>]
#                                 [DOU_BASE <dou base destination dir>])
#
# Notes:
#  1. Dotnet assemblies are not installed into GAC.
#  2. Dou files will be installed into <DOU_BASE>/<target name> directory.
#  3. Both CXX_LIBRARY and CXX_RUNTIME have to be specified to install the C++ libraries..
#  4. If CXX_ARCHIVE is not specified CXX_LIBRARY will be used as windows .lib destination
#  5. The CXX_RUNTIME, CXX_LIBRARY and CXX_ARCHIVE parameters work the same way as in the
#     CMake builtin INSTALL(TARGET ...).
#
# This file will actually define some other variables, some of which are used by the
# example apps build scripts to make CMake build Java and .Net. If you're trying to do
# that, have a look at those build scripts, and/or get in touch with us and we'll try to
# help you out or provide documentation on those variables and functions.
#
# There are even more things defined by this file but they may change without notice. If
# you believe you need one of them, please let us know and we can add them to the
# documented interface and make sure we don't mess up your CMake scripts without knowing.
#

# Compute paths
set(SAFIR_SDK_CORE_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR})

#finding the install directory is based on how we install the cmake files
#which is defined in the top level CMakeLists.txt file.
if (MSVC)
  get_filename_component(SAFIR_SDK_CORE_INSTALL_DIR ${CMAKE_CURRENT_LIST_DIR}/../ ABSOLUTE)
else()
  get_filename_component(SAFIR_SDK_CORE_INSTALL_DIR ${CMAKE_CURRENT_LIST_DIR}/../../.. ABSOLUTE)
endif()

include("${SAFIR_SDK_CORE_CMAKE_DIR}/BuildSafirGenerated.cmake")

SET(SAFIR_SDK_CORE_INCLUDE_DIRS "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_INCLUDE@")
SET(SAFIR_SDK_CORE_EXECUTABLES_DIR "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_BIN@")
SET(SAFIR_SDK_CORE_LIBRARIES_DIR "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_LIB@")

set(SAFIR_SDK_CORE_CSHARP_LIBRARY_PATH "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_CSHARP@")
set(SAFIR_SDK_CORE_JAVA_DIR "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_JAR@")
set(SAFIR_SDK_CORE_GENERATION_DIR "${SAFIR_SDK_CORE_INSTALL_DIR}/@SAFIR_INSTALL_DESTINATION_GENERATION@")

set(libraries swre_interface_cpp douf_time_cpp dose_cpp
              safir_generated-Core-cpp dots_cpp logging_cpp lluf_utils)

if (MSVC)
  #on windows we assume that boost has been installed into the
  #the safir installation directory, like our installer does.
  foreach(lib IN LISTS libraries)
    list (APPEND SAFIR_SDK_CORE_LIBRARIES
            debug "${SAFIR_SDK_CORE_LIBRARIES_DIR}/${lib}d.lib"
            optimized "${SAFIR_SDK_CORE_LIBRARIES_DIR}/${lib}.lib")
  endforeach()
else()
  include("${SAFIR_SDK_CORE_CMAKE_DIR}/SafirSDKCore.cmake")
  set(SAFIR_SDK_CORE_LIBRARIES ${libraries})
endif()
unset(libraries)

set(SAFIR_SDK_CORE_DOTNET_SETTINGS "${SAFIR_SDK_CORE_CMAKE_DIR}/SafirLoadCSharp.cmake")
set(SAFIR_SDK_CORE_JAVA_SETTINGS "${SAFIR_SDK_CORE_CMAKE_DIR}/SafirLoadJava.cmake")

SET(SAFIR_VERSION_MAJOR @SAFIR_VERSION_MAJOR@)
SET(SAFIR_VERSION_MINOR @SAFIR_VERSION_MINOR@)
SET(SAFIR_VERSION_PATCH @SAFIR_VERSION_PATCH@)
SET(SAFIR_VERSION_SUFFIX @SAFIR_VERSION_SUFFIX@)
SET(SAFIR_VERSION_STRING "${SAFIR_VERSION_MAJOR}.${SAFIR_VERSION_MINOR}.${SAFIR_VERSION_PATCH}${SAFIR_VERSION_SUFFIX}")

#We need some boost libraries
find_package(Boost COMPONENTS system thread REQUIRED)

#use dynamic linking with boost
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

==========================================================================
TESTCASE 0
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 recieves a local message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalMessage</name><members><member><name>Info</name><value>Local Message</value></member></members></object>


==========================================================================
TESTCASE 1
Description: Test of sending and subscribing of global messages
Expectation: Consumer 0 recieves a global message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalMessage</name><members><member><name>Info</name><value>Global Message</value></member></members></object>


==========================================================================
TESTCASE 2
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 does NOT recieve a local message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalMessage</name><members><member><name>Info</name><value>Local Message</value></member></members></object>


==========================================================================
TESTCASE 4
Description: Test of unsubscription of local messages
Expectation: Consumer 0 recieves ONE local message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.LocalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalMessage</name><members><member><name>Info</name><value>Local Message</value></member></members></object>


==========================================================================
TESTCASE 5
Description: Test of unsubscription of global messages
Expectation: Parter 0/Consumer 0 recieves ONE global message
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalMessage</name><members><member><name>Info</name><value>Global Message</value></member></members></object>


==========================================================================
TESTCASE 6
Description: Test of simulate overflows in message out queues.
Expectation: Overflow exception followed by a not overflow notification
--------- Setup -----------
--------- Test  -----------
Consumer 0: SimulateOverflows(false, true)
Caught Overflow exception
Consumer 0: SimulateOverflows(false, false)
Consumer 0: OnNotMessageOverflow

==========================================================================
TESTCASE 7
Description: Test of simulate overflows on message in queues.
Expectation: No messages received in partner 0
--------- Setup -----------
--------- Test  -----------
Consumer 0: SimulateOverflows(true, false)
Consumer 0: SimulateOverflows(false, false)
==========================================================================
TESTCASE 100
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (local)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 101
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 102
Description: Test of unsubscription of a service registration (local)
Expectation: Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 103
Description: Test the registration subscription blacklist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 104
Description: Test the registration subscription whitelist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 105
Description: Test of registration subscription including subclasses (local)
Expectation: Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_1

==========================================================================
TESTCASE 106
Description: Test of registration susbcription restart (local)
Expectation: Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 107
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (Global)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 108
Description: Test of registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 109
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_1

==========================================================================
TESTCASE 110
Description: Test of unsubscription of a service registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 111
Description: Test of registering of a service handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.LocalService
  HandlerId = LOCAL_HANDLER_0

==========================================================================
TESTCASE 112
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalService
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnUnregistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 113
Description: Test of registering a service handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 114
Description: Test of registering a service handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 150
Description: Testing of pending registration of global service handler
Expectation: Global Service should be Completed (cons 1) and Registered (cons 0)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 151
Description: Testing of pending registration of global service handler on one node
Expectation: Global Service should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 152
Description: Testing of removing pending registrations within one application
Expectation: Global Service: Consumer 0 gets a Completed, Service is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 153
Description: Testing of Pending registrations between nodes
Expectation: Global Service 0 gets registered (by someone else). The service gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 154
Description: Test of overregistering of global service handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = GLOBAL_HANDLER_0

==========================================================================
TESTCASE 155
Description: Testing of Pending registrations between apps in same node
Expectation: Partner 0 gets OnRegistered, OnUnregistered, OnCompletedRegistration and OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 200
Description: Test of using local service (within one partner)
Expectation: Partner0/Consumer 0 should get a service request and Partner0/consumer 1 should get a service response
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

==========================================================================
TESTCASE 201
Description: Test of using local service (between two partners)
Expectation: Consumer 0 should get a service request
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

==========================================================================
TESTCASE 202
Description: Test of using global service
Expectation: Partner2/Consumer 0 should get a service request and Partner0/consumer 1 should get a successful response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 203
Description: Test of sending a service request to a non-existing handler
Expectation: Partner0/consumer 1 should get an error response saying "not registered handler" 
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The handler -3751679928010642333 is not registered for the type DoseTest.GlobalService!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 204
Description: Test of service request timeout (local request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirTimeout</value></member><member><name>AdditionalInfo</name><value>The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalService!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 205
Description: Test of service request timeout (global request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirTimeout</value></member><member><name>AdditionalInfo</name><value>The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalService!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 206
Description: Test of simulate overflow in request out queue
Expectation: Partner0/Consumer 1 should get an overflow exception and then a OnNotRequestOverflow
--------- Setup -----------
Consumer 1: SimulateOverflows(false, true)
--------- Test  -----------
Caught Overflow exception
Consumer 1: SimulateOverflows(false, false)
Consumer 1: OnNotRequestOverflow
==========================================================================
TESTCASE 207
Description: Test simulate overflow on service request in queue locally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 208
Description: Test simulate overflow on service request in queue globally
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnNotRequestOverflow
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 300
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 301
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Parter 0/Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 302
Description: Test of unsubscription of a entity registration (local)
Expectation: Partner 0/Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 303
Description: Test the registration subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 304
Description: Test the registration subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = HANDLER_1

==========================================================================
TESTCASE 305
Description: Test of registration entity handler subscription including subclasses (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootEntity
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_1

==========================================================================
TESTCASE 306
Description: Test of registration entity handler subscription restart (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 307
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (Global)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 308
Description: Test of entity handler registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 309
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_0

Consumer 0: OnRegistered:
  Type      = DoseTest.RootService
  HandlerId = ROOT_HANDLER_1

==========================================================================
TESTCASE 310
Description: Test of unsubscription of a entity handler registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 311
Description: Test of registering of an entity handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.LocalEntity
  HandlerId = LOCAL_HANDLER_0

==========================================================================
TESTCASE 312
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 2: OnUnregistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 313
Description: Test of registering a entity handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.LocalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 314
Description: Test of registering a entity handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 350
Description: Testing of pending registration of global entity handler
Expectation: Global Entity should be Completed (part 0/cons 1) and Registered (part 0/cons 0)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 351
Description: Testing of pending registration of global entity handler on one node
Expectation: Global Entity should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 352
Description: Testing of removing pending entity registrations within one application
Expectation: Global Entity: Consumer 0 gets a Completed, Entity is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 353
Description: Testing of Pending entity handler registrations between nodes
Expectation: Global Entity 0 gets registered (by someone else). The entity gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 354
Description: Test of double registration of global entity handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRevokedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = GLOBAL_HANDLER_0

==========================================================================
TESTCASE 355
Description: Testing of registration of global entity injection handler
Expectation: partner 0/consumer 1 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity. Consumer 0 receives OnRegistered for InjectableEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnRegistered:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 0)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 356
Description: Testing that iex injections are transfered to application when registering a corresponding handler
Expectation: partner 0/consumer 1 receives OnInjectedNewEntity for InjectableEntity instance 888888 (Info is "Some new info" and Int32Member is 123) and instance 999999 (Int64Member is 123456). The read values correspond to the injected ones.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 888888)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name><value>123</value></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 999999)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name><value>123456</value></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: Read entity (DoseTest.InjectableEntity, 888888):
  EntityId  = (DoseTest.InjectableEntity, 888888):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member><member><name>Int32Member</name><value>123</value></member></members></object>

Consumer 1: Read entity (DoseTest.InjectableEntity, 999999):
  EntityId  = (DoseTest.InjectableEntity, 999999):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Int64Member</name><value>123456</value></member></members></object>

==========================================================================
TESTCASE 357
Description: Testing of injection for a non-existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 358
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after the injectDelete
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 654321)
  Current  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member></members></object>

==========================================================================
TESTCASE 359
Description: Test that registering an injection handler for a type that has no injection property is ok.
Expectation: partner 0/consumer 0 receives OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 360
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 gets new and delete subscription
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 987654)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 987654)
  Current  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some new info</value></member></members></object>

==========================================================================
TESTCASE 361
Description: Inject update and inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity, one OnInjectedUpdatedEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after each injection.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>First inject</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Second inject</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>First inject</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 0: OnInjectedDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 654321)
  Current  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Second inject</value></member></members></object>

==========================================================================
TESTCASE 362
Description: Postpone OnInjectedNewEntity, redispatch is True.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and two OnInjectedNewEntity. The first P2 read gives a "not found" exception, second read gives an entity.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>qwerty</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>qwerty</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 363
Description: Postpone OnInjectedNewEntity, redispatch is False.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity (instance 654321) and one OnInjectedNewEntity(instance 123456).
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>qwerty</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 123456)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>ytrewq</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 364
Description: Test incomplete injection state.
Expectation: The first read gives a not found exception. The second read gives an existing instance
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>111111</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 0: ResetCallbackActions
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>222222</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 1: Read entity (DoseTest.InjectableEntity, 654321):
  EntityId  = (DoseTest.InjectableEntity, 654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>222222</value></member></members></object>

==========================================================================
TESTCASE 365
Description: Reject of injected entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and OnInjectedNewEntity. P0 read gives 'not found'.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>qwerty</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 366
Description: Test a SetChanges call in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name><value>99999999</value></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 367
Description: Test a SetAll call in an OnInjectedUpdated callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone, an OnInjectedNewEntity, and an OnInjectedUpdatedEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name><value>99999999</value></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Int64Member</name><value>777666</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Int64Member</name><value>99999999</value></member></members></object>
  Changed top-level members: 
    Int64Member

==========================================================================
TESTCASE 368
Description: Test a SetChanges call, with an enity that isn't changed, in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The SetChanges call gives a software violation exception.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.Typesystem.SoftwareViolationException
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 654321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name><value>99999999</value></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

==========================================================================
TESTCASE 370
Description: Test that unregistration of the owner makes created instances (of injectable type) become ghosts
Expectation: Partner 0 receives OnNewEntity and OnDeletedEntity twice, P2 takes over ownership from P1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>

==========================================================================
TESTCASE 375
Description: Testing of injection for existing entity. Injector and handler reside on different nodes.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 676767)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some injected data</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 400
Description: Test of owner setting entity and read (local)
Expectation: The Info field should be "Updated information"
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.LocalEntity, 0):
  EntityId  = (DoseTest.LocalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 401
Description: Test of non-owner setting entity owned by another connection
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.AccessDeniedException
==========================================================================
TESTCASE 402
Description: Test of setting an entity using an unregistered handler
Expectation: This is considered a programming error and a SoftwareViolation exception should be thrown
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.Typesystem.SoftwareViolationException
==========================================================================
TESTCASE 403
Description: Test of owner deleting instance (global)
Expectation: The created instance shall be found and after deletion exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.GlobalEntity, 987654321):
  EntityId  = (DoseTest.GlobalEntity, 987654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>

Consumer 1: Read entity (DoseTest.GlobalEntity, 987654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 404
Description: Test of non-owner deleting entity within the same connection as owner
Expectation: Exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.LocalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 405
Description: Test of non-owner deleting entity
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
Caught FundamentalException in ExecuteAction: Safir.Dob.AccessDeniedException
==========================================================================
TESTCASE 406
Description: Test of handler deleting non-existing instance.
Expectation: This should be a NOP
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 407
Description: Test of deleting all owned instances (global)
Expectation: 2 created instances shall be found and after deletion no instances should be found (exception Safir.Dob.NotFoundException shall be thrown)
--------- Setup -----------
--------- Test  -----------
Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
  EntityId  = (DoseTest.GlobalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>

Consumer 1: Read entity (DoseTest.GlobalEntity, 1):
  EntityId  = (DoseTest.GlobalEntity, 1):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
Consumer 1: Read entity (DoseTest.GlobalEntity, 1):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 408
Description: Test of delete of a non-existant entity
Expectation: No exception should be thrown!
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 450
Description: Testing subscription and unsubscription of local entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks for 2 instances
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 444444444)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Four Information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 555555555)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Five Information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 451
Description: Testing subscription of local entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 452
Description: Testing subscription of local entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer receives two OnNewEntity and one OnDeleteEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 453
Description: Testing subscription of local entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 454
Description: Testing subscription of local entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and LocalEntity and OnUpdatedEntity callback for LocalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = -6496287506980868109
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = 1075591959784142265
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = 1075591959784142265
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 455
Description: Testing subscription and unsubscription of local entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 456
Description: Testing subscription of local entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks for instance 12345
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 457
Description: Testing subscription of local entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeletedEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 458
Description: Testing subscription of local entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.LocalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 459
Description: Testing subscription and unsubscription of global entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 460
Description: Testing subscription of global entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 461
Description: Testing subscription of global entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 462
Description: Testing subscription of global entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 463
Description: Testing subscription of global entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and GlobalEntity and OnUpdatedEntity callback for GlobalEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = -6496287506980868109
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = 1075591959784142265
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = 1075591959784142265
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = 1075591959784142265
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 464
Description: Testing subscription and unsubscription of global entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 465
Description: Testing subscription of global entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 466
Description: Testing subscription of global entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity callbac)
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 467
Description: Testing subscription of global entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.GlobalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 2: OnDeletedEntity:
  EntityId       = (DoseTest.GlobalEntity, 0)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated information</value></member></members></object>

==========================================================================
TESTCASE 468
Description: Test the entity subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 0
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 469
Description: Test the entity subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 1
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 1)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

==========================================================================
TESTCASE 471
Description: Testing subscription of local parent entity using typeid without includeSubclasses
Expectation: Partner 0/Consumer 0 receives 1 OnNewEntity and 1 OnUpdatedEntity callbacks for RootEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = -6496287506980868109
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.RootEntity, 0)
  Owner     = -6496287506980868109
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = -6496287506980868109
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>Update information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 475
Description: Testing subscription and unsubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Even more new information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 476
Description: Testing that setting up the same subscription twice is a null operation
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
Consumer 2: OnNewEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 2: OnUpdatedEntity:
  EntityId  = (DoseTest.LocalEntity, 0)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Even more new information</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>New information</value></member></members></object>
  Changed top-level members: 
    Info

==========================================================================
TESTCASE 480
Description: Test of special subscription WantsGhostDelete
Expectation: Partner 0/Consumer 0 receives one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 12345)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>

==========================================================================
TESTCASE 481
Description: Test of special subscription WantsLastState
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla, one OnUpdatedEntity with info set to MoreBlaBla, and one OnDeletedEntity. Partner 2/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity.
--------- Setup -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

--------- Test  -----------
Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>MoreBlabla</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 54321)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>MoreBlabla</value></member></members></object>

==========================================================================
TESTCASE 482
Description: Test of special subscription WantsLastState when last state is 'created'
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription callbacks.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 54321)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousVolatileEntity, 54321)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>

==========================================================================
TESTCASE 483
Description: Test of special subscription DoesntWantSourceIsPermanentStore
Expectation: Partner 0/Consumer 0 receives only an OnDeletedEntity (no OnNewEntity). Partner 2/Consumer 0 receives one OneNewEntity and one OnDeletedEntity.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousPermanentEntity, 56789)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value>Blabla</value></member></members></object>

==========================================================================
TESTCASE 484
Description: Test of special subscription timestampChangeInfo
Expectation: Partner 0/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with changed top-member 'Info', another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity). Partner 2/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with no changed top-members, another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more info</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more info</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more info</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 0: OnUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more changed info</value></member></members></object>
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more info</value></member></members></object>
  Changed top-level members: 
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 565656)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value>Some info</value></member><member><name>MoreInfo</name><value>Some more changed info</value></member></members></object>

==========================================================================
TESTCASE 500
Description: Test of sending create request (owner on this node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

Consumer 1: Read entity (DoseTest.LocalEntity, 345678):
  EntityId  = (DoseTest.LocalEntity, 345678):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 501
Description: Test of sending create request (owner on other node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

Consumer 1: Read entity (DoseTest.GlobalEntity, 987654):
  EntityId  = (DoseTest.GlobalEntity, 987654):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 502
Description: Test of sending update request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: Read entity (DoseTest.LocalEntity, 565656):
  EntityId  = (DoseTest.LocalEntity, 565656):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 503
Description: Test of sending update request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
  EntityId  = (DoseTest.GlobalEntity, 0):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 504
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.LocalEntity, 0) does not exist!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 505
Description: Test of sending delete request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 0)

Consumer 1: Read entity (DoseTest.LocalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 506
Description: Test of sending delete request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value>Succesful response</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 0)

Consumer 1: Read entity (DoseTest.GlobalEntity, 0):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 507
Description: Test of sending delete request of non-created instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.LocalEntity, 0) does not exist!</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 0)

==========================================================================
TESTCASE 508
Description: Test of entity request timeout (local request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirTimeout</value></member><member><name>AdditionalInfo</name><value>The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.LocalEntity!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 509
Description: Test of entity request timeout (global request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirTimeout</value></member><member><name>AdditionalInfo</name><value>The handler DEFAULT_HANDLER did not respond to the request of type DoseTest.GlobalEntity!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 510
Description: Test of overflow notification while sending entity requests
Expectation: Partner 0/Consumer 1 gets an overflow exception and then a response, a OnNotRequestOverflow notification, followed by 9 responses
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnNotRequestOverflow
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value>AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 511
Description: Test of sending update request of non-created global instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.GlobalEntity, 0) does not exist!</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 512
Description: Test of sending delete request of non-created global instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.GlobalEntity, 0) does not exist!</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 0)

==========================================================================
TESTCASE 513
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.LocalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone;partner_test_connection;1</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 514
Description: Test of sending global update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.GlobalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone;partner_test_connection;2</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Updated</value></member></members></object>

==========================================================================
TESTCASE 515
Description: Test of sending local delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.LocalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone;partner_test_connection;1</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.LocalEntity, 88889999)

==========================================================================
TESTCASE 516
Description: Test of sending global delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.GlobalEntity, 88889999) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone;partner_test_connection;2</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 88889999)

==========================================================================
TESTCASE 520
Description: A handler receives an update request for a non-existing entity.
Expectation: Partner 0 receives a SafirNotRegistered response.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = Safir.Dob.ErrorResponse
  IsSuccess  = false
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ErrorResponse</name><members><member><name>Code</name><value>SafirNotRegistered</value></member><member><name>AdditionalInfo</name><value>The instance (DoseTest.GlobalEntity, 321321) does not exist, or isn't owned by handler DEFAULT_HANDLER and/or connection StandAlone;partner_test_connection;2</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>hej pa dig!</value></member></members></object>

==========================================================================
TESTCASE 550
Description: Test of IsCreated
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
Consumer 0: The instance (DoseTest.LocalEntity, 0) is not created.
Consumer 0: The instance (DoseTest.LocalEntity, 0) is created.
==========================================================================
TESTCASE 551
Description: Test of IsCreated when other connection is owner
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
Consumer 0: The instance (DoseTest.GlobalEntity, 0) is not created.
Consumer 0: The instance (DoseTest.GlobalEntity, 0) is created.
==========================================================================
TESTCASE 560
Description: Test of reception of an EntityHandlerResponse when the handler decides instance id
Expectation: Partner 0/Consumer 0 receives an EntityIdResponse with member Assigned set to -6778878277529052275
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = Safir.Dob.EntityIdResponse
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.EntityIdResponse</name><members><member><name>Assigned</name><entityId><name>DoseTest.GlobalEntity</name><instanceId>-6778878277529052275</instanceId></entityId></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 561
Description: Test of reception of an OnCreateRequest where the handler decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Handler decides instance id) without instance id
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnCreateRequest (Handler decides instance id): 
  Type       = 6042018368104450073
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

Consumer 0: Handler created instance -6778878277529052275
==========================================================================
TESTCASE 562
Description: Test of reception of an OnCreateRequest where the requestor decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Requestor decides instance id) with instance id 789789789
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 789789789)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Created</value></member></members></object>

==========================================================================
TESTCASE 600
Description: Test of GetQueueSize
Expectation: Queue size should be 0 for all queues
--------- Setup -----------
--------- Test  -----------
Consumer 0: The size of MessageOutQueue is 0
Consumer 0: The size of RequestOutQueue is 0
==========================================================================
TESTCASE 601
Description: Test of GetQueueSize
Expectation: Queue capacity should be 10 for all queues
--------- Setup -----------
--------- Test  -----------
Consumer 0: The capacity of MessageOutQueue is 10
Consumer 0: The capacity of RequestOutQueue is 10
==========================================================================
TESTCASE 700
Description: Test of iterating a single entity type
Expectation: There should be two entities (Info set to "One" and "Two")
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.LocalEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>One</value></member></members></object>

==========================================================================
TESTCASE 701
Description: Test of iterating an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.GlobalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.GlobalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value>One</value></member></members></object>
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>One</value></member></members></object>
  EntityId  = (DoseTest.RootEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.RootEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.RootEntity</name><members><member><name>Info</name><value>One</value></member></members></object>

==========================================================================
TESTCASE 702
Description: Test of iterating a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.LocalEntity:

==========================================================================
TESTCASE 703
Description: Test of iterating an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:

==========================================================================
TESTCASE 704
Description: Test of iterating an entity class tree where there are ghosts
Expectation: There should be two Local entities (One and Two), twice (the iteration is done twice).
--------- Setup -----------
--------- Test  -----------
Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>One</value></member></members></object>

Consumer 0: Iterating over entities of type DoseTest.RootEntity:
  EntityId  = (DoseTest.LocalEntity, -1340913877349967190):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>Two</value></member></members></object>
  EntityId  = (DoseTest.LocalEntity, 4888228064704512518):
     Owner     = DEFAULT_HANDLER
     OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value>StandAlone;partner_test_connection;1</value></member><member><name>ConnectionId</name></member></members></object>
     OwnerStr  = DEFAULT_HANDLER
     Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value>One</value></member></members></object>

==========================================================================
TESTCASE 710
Description: Test GetNumberOfInstances with entities of a single type
Expectation: There should be two local entities set by default handler.
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 711
Description: Test of GetNumberOfInstances on an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local, all set by default handler
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 6
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 6
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 712
Description: Test of GetNumberOfInstances on a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 0
==========================================================================
TESTCASE 713
Description: Test of GetNumberOfInstances on an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = true): 0
==========================================================================
TESTCASE 714
Description: Test of GetNumberOfInstances on an entity class tree where there are ghosts
Expectation: There should be two Local entities twice, then the ghosts are removed and the checks are done again.
--------- Setup -----------
--------- Test  -----------
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ALL_HANDLERS, includeSubclasses = false): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.LocalEntity, handler = ANOTHER_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.GlobalEntity, handler = DEFAULT_HANDLER, includeSubclasses = false): 0
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = DEFAULT_HANDLER, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ALL_HANDLERS, includeSubclasses = true): 2
Consumer 0: GetNumberOfInstances (type = DoseTest.RootEntity, handler = ANOTHER_HANDLER, includeSubclasses = true): 0
==========================================================================
TESTCASE 800
Description: Test of synchronous volatile persistence
Expectation: Partner 0 receives OnNewInjectedEntity. Partner 1 receives OnNewEntity and OnDeletedEntity
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 12345)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value>Blabla</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 830
Description: Test of volatile persistence with two different handlers for the same type
Expectation: Partner 0 receives OnNewInjectedEntity for instance 678678. Partner 1 receives OnNewInjectedEntity for instance 353535
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P0_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 678678)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value>Partner0BlaBla</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = -8491672046075317202

==========================================================================
TESTCASE 850
Description: Check that ghost instances get dispatched to correct handler when there are sevaral handlers for a type.
Expectation: Partner 0 receives no OnNewInjectedEntity. Partner 0 receives one OnNewInjectedEntity for instance 353535.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P0_HANDLER

--------- Test  -----------
==========================================================================
TESTCASE 999
Description: Empty Test case
Expectation: Nothing
--------- Setup -----------
--------- Test  -----------

<?xml version="1.0" encoding="utf-8"?>
<object xmlns="urn:safir-dots-unit">
  <name>DoseTest.Items.TestCase</name>
  <members>
    <member>
      <!-- This test is valid only in multinode mode -->
      <name>TestConfig</name>
      <value>DoseTest.TestConfigEnum.Multinode</value>
    </member>
    <member>
      <name>Description</name>
      <value>Test that a split/join, where P2 makes an unreg/reg/set while disconnected, gives consistent caches when joined.</value>
    </member>
    <member>
      <name>Expectation</name>
      <value>Caches in node 0 and node 1 are consistent (HANDLER1 is registered. Instance 1244 exists with text "Instance 1244 updated by new registration")</value>
    </member>
    <member>
      <name>TestCaseSetupActions</name>
      <arrayElements>
        
        <!-- Register redundant handlers -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>0</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.RegisterEntityHandlerPending</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>InstanceIdPolicy</name>
                <value>Safir.Dob.InstanceIdPolicy.RequestorDecidesInstanceId</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.RegisterEntityHandlerPending</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>InstanceIdPolicy</name>
                <value>Safir.Dob.InstanceIdPolicy.RequestorDecidesInstanceId</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>

        <!-- Create an instance in P0 -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>0</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.SetAll</value>
              </member>
              <member>
                <name>Instance</name>
                <value>1244</value>
              </member>
              <member>
                <name>Object</name>
                <object>
                  <name>DoseTest.SynchronousVolatileEntity</name>
                  <members>
                    <member>
                      <name>Info</name>
                      <value>Instance 1244 created by partner 0, Handler 1</value>
                    </member>
                  </members>
                </object>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        
        <!-- Disconnect the nodes (assuming that partner 0 and 2 are running in separate nodes) -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>0</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InhibitOutgoingTraffic</value>
              </member>
              <member>
                <name>Inhibit</name>
                <value>True</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InhibitOutgoingTraffic</value>
              </member>
              <member>
                <name>Inhibit</name>
                <value>True</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <!-- Wait for the nodes to detect the communication failure -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.Sleep</value>
              </member>
              <member>
                <name>SleepDuration</name>
                <value>10</value>
              </member>
            </members>
          </object>
        </arrayElement>
      </arrayElements>
    </member>
    <member>
      <name>TestActions</name>
      <arrayElements>
        
        <!-- Now do different things in the disconnected nodes -->

        <!-- P2 makes an unreg/reg/set -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.UnregisterHandler</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.RegisterEntityHandlerPending</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>InstanceIdPolicy</name>
                <value>Safir.Dob.InstanceIdPolicy.RequestorDecidesInstanceId</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.SetAll</value>
              </member>
              <member>
                <name>Instance</name>
                <value>1244</value>
              </member>
              <member>
                <name>Object</name>
                <object>
                  <name>DoseTest.SynchronousVolatileEntity</name>
                  <members>
                    <member>
                      <name>Info</name>
                      <value>Instance 1244 updated by new registration.</value>
                    </member>
                  </members>
                </object>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>

        <!-- Connect the nodes -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>0</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InhibitOutgoingTraffic</value>
              </member>
              <member>
                <name>Inhibit</name>
                <value>False</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InhibitOutgoingTraffic</value>
              </member>
              <member>
                <name>Inhibit</name>
                <value>False</value>
              </member>
            </members>
          </object>
        </arrayElement>        
        
        <!-- Wait for the nodes to detect each other and to exchange pools -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.Sleep</value>
              </member>
              <member>
                <name>SleepDuration</name>
                <value>30</value>
              </member>
            </members>
          </object>
        </arrayElement>

        <!-- Check content in node 0 pool -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>1</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.SubscribeRegistration</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>ALL_HANDLERS</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>RestartSubscription</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>1</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.GetEntityIterator</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <!-- Also set up a subscription that gives ghosts -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>1</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InjectorSubscribeEntity</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeUpdates</name>
                <value>true</value>
              </member>
              <member>
                <name>RestartSubscription</name>
                <value>true</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>WantsGhostDelete</name>
                <value>true</value>
              </member>
              <member>
                <name>WantsLastState</name>
                <value>true</value>
              </member>
              <member>
                <name>DoesntWantSourceIsPermanentStore</name>
                <value>false</value>
              </member>
              <member>
                <name>WantsAllStateChanges</name>
                <value>false</value>
              </member>
              <member>
                <name>TimestampChangeInfo</name>
                <value>false</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>        

        <!-- Check content in node 1 pool -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.SubscribeRegistration</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>ALL_HANDLERS</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>RestartSubscription</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.GetEntityIterator</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <!-- Also set up a subscription that gives ghosts -->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.InjectorSubscribeEntity</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeUpdates</name>
                <value>true</value>
              </member>
              <member>
                <name>RestartSubscription</name>
                <value>true</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>WantsGhostDelete</name>
                <value>true</value>
              </member>
              <member>
                <name>WantsLastState</name>
                <value>true</value>
              </member>
              <member>
                <name>DoesntWantSourceIsPermanentStore</name>
                <value>false</value>
              </member>
              <member>
                <name>WantsAllStateChanges</name>
                <value>false</value>
              </member>
              <member>
                <name>TimestampChangeInfo</name>
                <value>false</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>        

        <!-- Clean up testcase -->

        <!-- Unsubscribe node 0-->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>1</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.UnsubscribeRegistration</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>ALL_HANDLERS</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>1</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.UnsubscribeEntity</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>

        <!-- Unsubscribe node 1-->
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.UnsubscribeRegistration</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>ALL_HANDLERS</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>
        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.UnsubscribeEntity</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>IncludeSubclasses</name>
                <value>true</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>        
        
        <!-- Delete all existing instances -->

        <arrayElement>
          <object>
            <name>DoseTest.Action</name>
            <members>
              <member>
                <name>Partner</name>
                <value>2</value>
              </member>
              <member>
                <name>ActionKind</name>
                <value>DoseTest.ActionEnum.DeleteAllInstances</value>
              </member>
              <member>
                <name>TypeId</name>
                <value>DoseTest.SynchronousVolatileEntity</value>
              </member>
              <member>
                <name>Handler</name>
                <value>HANDLER1</value>
              </member>
              <member>
                <name>Consumer</name>
                <value>0</value>
              </member>
            </members>
          </object>
        </arrayElement>

      </arrayElements>
    </member>
  </members>
</object>


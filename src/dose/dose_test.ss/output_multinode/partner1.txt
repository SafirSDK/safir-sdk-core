==========================================================================
TESTCASE 0
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 recieves a local message
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 1
Description: Test of sending and subscribing of global messages
Expectation: Consumer 0 recieves a global message
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 2
Description: Test of sending and subscribing of local messages
Expectation: Consumer 0 does NOT recieve a local message in a multinode conf, for singlenode consumer 0 recieves the message
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 3
Description: Test of overflow notification while sending message
Expectation: Overflow exception followed by a not overflow notification
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 4
Description: Test of unsubscription of local messages
Expectation: Consumer 0 recieves ONE local message
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 5
Description: Test of unsubscription of global messages
Expectation: Parter 0/Consumer 0 recieves ONE global message
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 6
Description: Test of simulate overflows in message out queues.
Expectation: Overflow exception followed by a not overflow notification
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 7
Description: Test of simulate overflows on message in queues.
Expectation: No messages received in partner 0
--------- Setup -----------
--------- Test  -----------
Caught Overflow exception
Consumer 0: OnNotMessageOverflow

==========================================================================
TESTCASE 8
Description: Test of sending and subscribing of to a message with all types defined in it.
Expectation: Consumer 0 recieves a global message with the correct data in it.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 9
Description: Test of sending and subscribing of global message of around 10Mb
Expectation: Consumer 0 recieves a global message and no errors are reported by the binary checker.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 100
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (local)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 101
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 102
Description: Test of unsubscription of a service registration (local)
Expectation: Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 103
Description: Test the registration subscription blacklist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 104
Description: Test the registration subscription whitelist
Expectation: Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 105
Description: Test of registration subscription including subclasses (local)
Expectation: Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 106
Description: Test of registration susbcription restart (local)
Expectation: Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 107
Description: Test of registering/unregistering a service handler while a subscription for registrations exists (Global)
Expectation: Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 108
Description: Test of registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 109
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 110
Description: Test of unsubscription of a service registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 111
Description: Test of registering of a service handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 112
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalService
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 113
Description: Test of registering a service handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 114
Description: Test of registering a service handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 150
Description: Testing of pending registration of global service handler
Expectation: Global Service should be Completed (cons 1) and Registered (cons 0)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 151
Description: Testing of pending registration of global service handler on one node
Expectation: Global Service should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 152
Description: Testing of removing pending registrations within one application
Expectation: Global Service: Consumer 0 gets a Completed, Service is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 153
Description: Testing of Pending registrations between nodes
Expectation: Global Service 0 gets registered (by someone else). The service gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 154
Description: Test of overregistering of global service handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 155
Description: Testing of Pending registrations between apps in same node
Expectation: Partner 0 gets OnRegistered, OnUnregistered, OnCompletedRegistration and OnRegistered
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 200
Description: Test of using local service (within one partner)
Expectation: Partner0/Consumer 0 should get a service request and Partner0/consumer 1 should get a service response
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 201
Description: Test of using local service (between two partners)
Expectation: Consumer 0 should get a service request
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

==========================================================================
TESTCASE 202
Description: Test of using global service
Expectation: Partner2/Consumer 0 should get a service request and Partner0/consumer 1 should get a successful response
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 203
Description: Test of sending a service request to a non-existing handler
Expectation: Partner0/consumer 1 should get an error response saying "not registered handler"
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 204
Description: Test of service request timeout (local request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 205
Description: Test of service request timeout (global request)
Expectation: Partner0/Consumer 1 should get a time out response on a service request
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 206
Description: Test of simulate overflow in request out queue
Expectation: Partner0/Consumer 1 should get an overflow exception and then a OnNotRequestOverflow
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 207
Description: Test simulate overflow on service request in queue locally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
Consumer 0: SimulateOverflows(true, false)
--------- Test  -----------
Consumer 0: SimulateOverflows(false, false)
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 208
Description: Test simulate overflow on service request in queue globally
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 209
Description: Test overflow on service request in queue globally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses. Partner 2 should get 10 requests.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 210
Description: Test overflow on service request in queue locally.
Expectation: Partner0/Consumer 0 should get an overflow exception and then one response followed by OnNotRequestOverflow and then 9 more responses. Partner 2 should get 10 requests.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

==========================================================================
TESTCASE 211
Description: Test of sending a local service request to a handler on another node
Expectation: Partner0/consumer 1 should get an error response saying "not registered handler"
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 212
Description: Test of sending a local service request to a handler that is registered on both nodes.
Expectation: P0/C1 and P2/C1 should get ONE response, P1 and P2 should get one request each.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.LocalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = 972322661402874406
  HandlerStr = 972322661402874406
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalService</name></object>

==========================================================================
TESTCASE 213
Description: Test that only the specified handler gets the request.
Expectation: Each partner should receive one (and only one) request, and p0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = 7471736682775137277
  HandlerStr = 7471736682775137277
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 214
Description: Test of using global service with all types defined in it
Expectation: Partner0/Consumer 0 should get a service request with lots of stuff in it.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 215
Description: Test of using global service of around 10Mb
Expectation: Partner0/Consumer 0 should get a service request and no errors should be reported by the binary checker.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 300
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 301
Description: Test of setting up a susbcription while there is an existing registration (local)
Expectation: Parter 0/Consumer 0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 302
Description: Test of unsubscription of a entity registration (local)
Expectation: Partner 0/Consumer 0 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 303
Description: Test the registration subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 304
Description: Test the registration subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnRegistered callback for handler HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 305
Description: Test of registration entity handler subscription including subclasses (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0, LOCAL_HANDLER_0 and LOCAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 306
Description: Test of registration entity handler subscription restart (local)
Expectation: Partner 0/Consumer 0 receives two OnRegistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 307
Description: Test of registering/unregistering a entity handler while a subscription for registrations exists (Global)
Expectation: Partner 0/Consumer 0 receives two OnRegistered and two OnUnregistered callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 308
Description: Test of entity handler registration subscription including subclasses (global)
Expectation: Partner 2/Consumer 2 receives OnRegistered for ROOT_HANDLER_0, GLOBAL_HANDLER_0 and GLOBAL_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 309
Description: Test of registration subscription including superclass (local)
Expectation: Partner 0/Consumer 0 receives OnRegistered for ROOT_HANDLER_0 and ROOT_HANDLER_1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 310
Description: Test of unsubscription of a entity handler registration (global)
Expectation: Partner 2/Consumer 2 receives one OnRegistered but no OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 311
Description: Test of registering of an entity handler with the same name for a local entity handler on two nodes
Expectation: Partner 2 registration is completed. Partner 0 doesn't get a revoke (if running on different nodes).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 312
Description: Test that different consumers don't interfere (local)
Expectation: Partner 0/Consumer 1 and 2 receives OnRegistered and Partner 0/Consumer 2 receives OnUnregistered for DoseTest.LocalEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 313
Description: Test of registering a entity handler while there is an unregister state remaining (local)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 314
Description: Test of registering a entity handler while there is an unregister state remaining (global)
Expectation: Consumer 0 receives one OnRegistered
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 350
Description: Testing of pending registration of global entity handler
Expectation: Global Entity should be Completed (part 0/cons 1) and Registered (part 0/cons 0)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 351
Description: Testing of pending registration of global entity handler on one node
Expectation: Global Entity should be Registered (cons 1), Unregistered (cons 1), Completed (cons 0) and Registered (cons 1)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 352
Description: Testing of removing pending entity registrations within one application
Expectation: Global Entity: Consumer 0 gets a Completed, Entity is registered, Consumer 0 then unregisters, and Consumer 1 does NOT get a Completed
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 353
Description: Testing of Pending entity handler registrations between nodes
Expectation: Global Entity 0 gets registered (by someone else). The entity gets unregistered (by someone else) which leads to Consumer 1 getting a Completed.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 354
Description: Test of double registration of global entity handler (revoke)
Expectation: Partner 0/Consumer 0 receives one OnRevokedRegistration for GLOBAL_HANDLER_0
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 355
Description: Testing of registration of global entity injection handler
Expectation: partner 0/consumer 1 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity. Consumer 0 receives OnRegistered for InjectableEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 356
Description: Testing that iex injections are transfered to application when registering a corresponding handler
Expectation: partner 0/consumer 1 receives OnInjectedNewEntity for InjectableEntity instance 888888 (Info is "Some new info" and Int32Member is 123) and instance 999999 (Int64Member is 123456) followed by an OnInitialInjectionsDone. The read values correspond to the injected ones.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 357
Description: Testing of injection for a non-existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 358
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after the injectDelete
--------- Setup -----------
--------- Test  -----------
Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
  EntityId  = (DoseTest.InjectableEntity, 654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some new info</value></member></members></object>

Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 359
Description: Test that registering an injection handler for a type that has no injection property is ok.
Expectation: partner 0/consumer 0 receives OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 360
Description: Testing of inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInjectedNewEntity and one OnInjectedDeletedEntity. P1 and P2 gets new and delete subscription
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 987654)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some new info</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.InjectableEntity, 987654)
  deletedByOwner = true
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some new info</value></member></members></object>

==========================================================================
TESTCASE 361
Description: Inject update and inject delete for an existing entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity, one OnInjectedUpdatedEntity and one OnInjectedDeletedEntity. P1 and P2 reads the entity before and after each injection.
--------- Setup -----------
--------- Test  -----------
Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
  EntityId  = (DoseTest.InjectableEntity, 654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">First inject</value></member></members></object>

Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
  EntityId  = (DoseTest.InjectableEntity, 654321):
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Second inject</value></member></members></object>

Consumer 0: Read entity (DoseTest.InjectableEntity, 654321):
Caught Exception in ExecuteAction: Safir.Dob.NotFoundException
==========================================================================
TESTCASE 362
Description: Postpone OnInjectedNewEntity, redispatch is True.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and two OnInjectedNewEntity. The first P2 read gives a "not found" exception, second read gives an entity.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 363
Description: Postpone OnInjectedNewEntity, redispatch is False.
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone, one OnInjectedNewEntity (instance 654321) and one OnInjectedNewEntity(instance 123456).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 364
Description: Test incomplete injection state.
Expectation: The first read gives a not found exception. The second read gives an existing instance
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 365
Description: Reject of injected entity
Expectation: partner 0/consumer 0 receives one OnInitialInjectionsDone and OnInjectedNewEntity. P0 read gives 'not found'.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 366
Description: Test a SetChanges call in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 367
Description: Test a SetAll call in an OnInjectedUpdated callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone, an OnInjectedNewEntity, and an OnInjectedUpdatedEntity. The Partner 2 read value 434343 for member Int64Member.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 368
Description: Test a SetChanges call, with an enity that isn't changed, in an OnInjectedNew callback.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedNewEntity. The SetChanges call gives a software violation exception.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 369
Description: Testing of Pending entity handler registrations between nodes
Expectation: Partner 1 gets 4 OnInitialInjectionsDone, all but the first is preceeded by an OnInjectedNewEntity.  Partner 2 gets OnCompletedRegistration, OnInjectedNewEntity, OnInitialInjectionsDone, OnRevokedRegistration. This sequence is repeated 3 times.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 0)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 0)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 0)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 370
Description: Test that unregistration of the owner makes created instances (of injectable type) become ghosts
Expectation: Partner 0 receives OnNewEntity and OnDeletedEntity twice, P2 takes over ownership from P1
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
==========================================================================
TESTCASE 375
Description: Testing of injection for existing entity. Injector and handler reside on different nodes.
Expectation: partner 0/consumer 0 receives an OnInitialInjectionsDone and an OnInjectedUpdatedEntity.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 376
Description: Postpone OnServiceRequest, redispatch is True.
Expectation: P0 receives three OnServiceRequest, the first and second with Info set to 'Service request 1' and the third with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 2</value></member></members></object>

==========================================================================
TESTCASE 377
Description: Postpone OnServiceRequest, redispatch is True. ResumePostponed is called within the callback
Expectation: P0 receives three OnServiceRequest, the first and second with Info set to 'Service request 1' and the third with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 2</value></member></members></object>

==========================================================================
TESTCASE 378
Description: Postpone OnServiceRequest, redispatch is False.
Expectation: P0 receives two OnServiceRequest, the first with Info set to 'Service request 1' and the second with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 2</value></member></members></object>

==========================================================================
TESTCASE 379
Description: Postpone OnServiceRequest, redispatch is False. ResumePostponed is called within the callback
Expectation: P0 receives two OnServiceRequest, the first with Info set to 'Service request 1' and the second with Info set to 'Service request 2'.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name><members><member><name>Info</name><value xml:space="preserve">Service request 2</value></member></members></object>

==========================================================================
TESTCASE 380
Description: Postpone OnCreateRequest, redispatch is True.
Expectation: P0 receives three OnCreateRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Create request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Create request 2</value></member></members></object>

==========================================================================
TESTCASE 381
Description: Postpone OnCreateRequest, redispatch is False.
Expectation: P0 receives two OnCreateRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Create request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Create request 2</value></member></members></object>

==========================================================================
TESTCASE 382
Description: Postpone OnUpdateRequest, redispatch is True.
Expectation: P0 receives three OnUpdateRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Update request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Update request 2</value></member></members></object>

==========================================================================
TESTCASE 383
Description: Postpone OnUpdateRequest, redispatch is False.
Expectation: P0 receives two OnUpdateRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Update request 1</value></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Update request 2</value></member></members></object>

==========================================================================
TESTCASE 384
Description: Postpone OnDeleteRequest, redispatch is True.
Expectation: P0 receives three OnDeleteRequest, the first and second for instance 121212 and the third for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 121212)

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 343434)

==========================================================================
TESTCASE 385
Description: Postpone OnDeleteRequest, redispatch is False.
Expectation: P0 receives two OnDeleteRequest, the first for instance 121212 and the second for instance 343434.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 121212)

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.GlobalEntity, 343434)

==========================================================================
TESTCASE 386
Description: Postpone OnMessage, redispatch is True.
Expectation: P0 receives three OnMessage, the first and second with Info set to 'Message 1' and the third with Info set to 'Message 2'.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 387
Description: Postpone OnMessage, redispatch is False.
Expectation: P0 receives two OnMessage, the first with Info set to 'Message 1' and the second with Info set to 'Message 2'.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 400
Description: Test of owner setting entity and read (local)
Expectation: The Info field should be "Updated information"
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 401
Description: Test of non-owner setting entity owned by another connection
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 402
Description: Test of setting an entity using an unregistered handler
Expectation: This is considered a programming error and a SoftwareViolation exception should be thrown
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 403
Description: Test of owner deleting instance (global)
Expectation: The created instance shall be found and after deletion exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 404
Description: Test of non-owner deleting entity within the same connection as owner
Expectation: Exception Safir.Dob.NotFoundException shall be thrown
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 405
Description: Test of non-owner deleting entity
Expectation: Exception (access denied) should be raised
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 406
Description: Test of handler deleting non-existing instance.
Expectation: This should be a NOP
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 407
Description: Test of deleting all owned instances (global)
Expectation: 2 created instances shall be found and after deletion no instances should be found (exception Safir.Dob.NotFoundException shall be thrown)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 408
Description: Test of delete of a non-existant entity
Expectation: No exception should be thrown!
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 430
Description: Testing that a slow entity subscriber will not get all intermediate states for local entities.
Expectation: Partner 0/Consumer receives one OnNewEntity (info=Two), one OnUpdated (info=Four) and one OnDeleteEntity callback. Nowhere in the output should the intermediate states "One", "Three" and "Five" be visible.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 431
Description: Testing that a slow entity subscriber will not get all intermediate states for global entities.
Expectation: Partner 0/Consumer receives one OnNewEntity (info=Two), one OnUpdated (info=Four) and one OnDeleteEntity callback. Nowhere in the output should the intermediate states "One", "Three" and "Five" be visible.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 432
Description: Testing that local entities are not propagated to other nodes
Expectation: Only partner 0 gets an OnNewEntity, not partner 2.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 450
Description: Testing subscription and unsubscription of local entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks for 2 instances
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 451
Description: Testing subscription of local entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 452
Description: Testing subscription of local entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer receives two OnNewEntity and one OnDeleteEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 453
Description: Testing subscription of local entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 454
Description: Testing subscription of local entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and LocalEntity and OnUpdatedEntity callback for LocalEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 455
Description: Testing subscription and unsubscription of local entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 456
Description: Testing subscription of local entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks for instance 12345
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 457
Description: Testing subscription of local entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeletedEntity callbacks (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 458
Description: Testing subscription of local entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 459
Description: Testing subscription and unsubscription of global entity using typeid
Expectation: Partner 0/Consumer 2 receives OnNewEntity callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 460
Description: Testing subscription of global entity using typeid with includeUpdates, without includeSubclasses, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 461
Description: Testing subscription of global entity using typeid without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 462
Description: Testing subscription of global entity using typeid with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 463
Description: Testing subscription of global entity using typeid with includeSubclasses
Expectation: Partner 0/Consumer 0 receives OnNewEntity callback for RootEntity and GlobalEntity and OnUpdatedEntity callback for GlobalEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 464
Description: Testing subscription and unsubscription of global entity using entity id
Expectation: Partner 0/Consumer 2 receives one OnNewEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 465
Description: Testing subscription of global entity using entity id with includeUpdates, without restartSubscription
Expectation: Partner 0/Consumer 2 receives OnNewEntity, OnUpdatedEntity and OnDeleteEntity callbacks
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 466
Description: Testing subscription of global entity using entity id without includeUpdates and with restartSubscription
Expectation: Partner 0/Consumer 2 receives two OnNewEntity and one OnDeleteEntity callback (no OnUpdatedEntity callbac)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 467
Description: Testing subscription of global entity using entity id with includeUpdates and without restartSubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity, one OnUpdatedEntity and one OnDeleteEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 468
Description: Test the entity subscription whitelist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 0
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 469
Description: Test the entity subscription blacklist
Expectation: Partner 0/Consumer 0 receives one OnNewEntity callback for LocalEntity instance 1
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 471
Description: Testing subscription of local parent entity using typeid without includeSubclasses
Expectation: Partner 0/Consumer 0 receives 1 OnNewEntity and 1 OnUpdatedEntity callbacks for RootEntity
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 475
Description: Testing subscription and unsubscription
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 476
Description: Testing that setting up the same subscription twice is a null operation
Expectation: Partner 0/Consumer 2 receives one OnNewEntity and one OnUpdatedEntity callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 480
Description: Test of special subscription WantsGhostDelete
Expectation: Partner 0/Consumer 0 receives one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription responses.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 12345)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 481
Description: Test of special subscription WantsLastState
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla, one OnUpdatedEntity with info set to MoreBlaBla, and one OnDeletedEntity. Partner 2/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.InjectableEntity, 54321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">MoreBlabla</value></member><member><name>MoreInfo</name></member><member><name>Int32Member</name></member><member><name>Int64Member</name></member><member><name>Float32Member</name></member><member><name>Float64Member</name></member><member><name>Ampere32Member</name></member><member><name>ArrayMember</name><arrayElements><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>ObjectMember</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo
    Int32Member
    Int64Member
    Float32Member
    Float64Member
    Ampere32Member
    ArrayMember
    ObjectMember

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 482
Description: Test of special subscription WantsLastState when last state is 'created'
Expectation: Partner 0/Consumer 0 receives one OneNewEntity with info set to BlaBla and one OnDeletedEntity. Partner 2/Consumer 0 receives no subscription callbacks.
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 54321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 483
Description: Test of special subscription DoesntWantSourceIsPermanentStore
Expectation: Partner 0/Consumer 0 receives only an OnDeletedEntity (no OnNewEntity). Partner 2/Consumer 0 receives one OneNewEntity and one OnDeletedEntity.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 56789)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 484
Description: Test of special subscription DoesntWantSourceIsPermanentStore
Expectation: Partner 0/Consumer 0 receives only an OnUpdatedEntity and an OnDeletedEntity (no OnNewEntity). Partner 2/Consumer 0 receives one OnNewEntity, one OnUpdatedEntity and one OnDeletedEntity.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousPermanentEntity, 56789)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousPermanentEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousPermanentEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 485
Description: Test of special subscription timestampChangeInfo
Expectation: Partner 0/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with changed top-member 'Info', another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity). Partner 2/consumer 0 receives an OnNewEntity with change flags set for all top members, an OnUpdatedEntity with no changed top-members, another OnUpdatedEntity with changed top-member 'MoreInfo' (and an OnDeleteEntity)
--------- Setup -----------
Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.InjectableEntity
  HandlerId = DEFAULT_HANDLER

--------- Test  -----------
Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name><value xml:space="preserve">Some more info</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name><value xml:space="preserve">Some more info</value></member></members></object>
  Changed top-level members: 
    Info

Consumer 0: OnInjectedUpdatedEntity:
  EntityId  = (DoseTest.InjectableEntity, 565656)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name><value xml:space="preserve">Some more changed info</value></member></members></object>
  Current   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.InjectableEntity</name><members><member><name>Info</name><value xml:space="preserve">Some info</value></member><member><name>MoreInfo</name><value xml:space="preserve">Some more info</value></member></members></object>
  Changed top-level members: 
    MoreInfo

==========================================================================
TESTCASE 500
Description: Test of sending create request (owner on this node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.LocalEntity, 345678)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value xml:space="preserve">Created</value></member></members></object>

==========================================================================
TESTCASE 501
Description: Test of sending create request (owner on other node)
Expectation: Partner 0/Consumer 0 receives a success response and the entity info field should be "Created" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 502
Description: Test of sending update request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnUpdateRequest: 
  Entity     = (DoseTest.LocalEntity, 565656)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value xml:space="preserve">Updated</value></member></members></object>

==========================================================================
TESTCASE 503
Description: Test of sending update request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and the entity info field is "Updated" (part 0/cons 1)
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 504
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 505
Description: Test of sending delete request of created instance (owner on this node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnDeleteRequest: 
  Entity     = (DoseTest.LocalEntity, 0)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

==========================================================================
TESTCASE 506
Description: Test of sending delete request of created instance (owner on other node)
Expectation: Partner 0/Consumer 1 receives a success response and exception Safir::Dob::NotFoundException is thrown
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 507
Description: Test of sending delete request of non-created instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 508
Description: Test of entity request timeout (local request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.LocalEntity, 0)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.LocalEntity</name><members><member><name>Info</name><value xml:space="preserve">Created</value></member></members></object>

==========================================================================
TESTCASE 509
Description: Test of entity request timeout (global request)
Expectation: Partner 0/Consumer 1 should get a time out response
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 510
Description: Test of overflow notification while sending entity requests
Expectation: Partner 0/Consumer 1 gets an overflow exception and then a response, a OnNotRequestOverflow notification, followed by 9 responses
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 511
Description: Test of sending update request of non-created global instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 512
Description: Test of sending delete request of non-created global instance
Expectation: Part 0/Cons 1 receives an error response SafirNotRegistered
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 513
Description: Test of sending update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 514
Description: Test of sending global update request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 515
Description: Test of sending local delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 516
Description: Test of sending global delete request of non-created instance
Expectation: Partner 0/Consumer 1 receives an error response SafirNotRegistered, with info that the instance does not exist
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 517
Description: Test of sending requests and subscribing to an entity with all types defined in it.
Expectation: P2 receives requests (cre, upd, del) with correct data in them, and P0 gets corresponding subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ComplexGlobalEntity</name><members><member><name>Int32Member</name><value>32</value></member><member><name>Int64Member</name><value>64</value></member><member><name>Float32Member</name><value>32</value></member><member><name>Float64Member</name><value>64</value></member><member><name>BooleanMember</name><value>true</value></member><member><name>EnumerationMember</name><value>DoseTest.TestEnum.MyFirst</value></member><member><name>StringMember</name><value xml:space="preserve">Safir</value></member><member><name>EntityIdMember</name><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></member><member><name>TypeIdMember</name><value>DoseTest.TestItem</value></member><member><name>InstanceIdMember</name><value>SomeInstance</value></member><member><name>ChannelIdMember</name><value>SomeChannel</value></member><member><name>HandlerIdMember</name><value>SomeHandler</value></member><member><name>ObjectMember</name><object><name>Object</name></object></member><member><name>BinaryMember</name><value/></member><member><name>TestClassMember</name><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-32</value></member></members></object></member><member><name>Ampere32Member</name><value>32001</value></member><member><name>CubicMeter32Member</name><value>32002</value></member><member><name>Hertz32Member</name><value>32003</value></member><member><name>Joule32Member</name><value>32004</value></member><member><name>Kelvin32Member</name><value>32005</value></member><member><name>Kilogram32Member</name><value>32006</value></member><member><name>Meter32Member</name><value>32007</value></member><member><name>MeterPerSecond32Member</name><value>32008</value></member><member><name>MeterPerSecondSquared32Member</name><value>32009</value></member><member><name>Newton32Member</name><value>32010</value></member><member><name>Pascal32Member</name><value>32011</value></member><member><name>Radian32Member</name><value>32012</value></member><member><name>RadianPerSecond32Member</name><value>32013</value></member><member><name>RadianPerSecondSquared32Member</name><value>32014</value></member><member><name>Second32Member</name><value>32015</value></member><member><name>SquareMeter32Member</name><value>32016</value></member><member><name>Steradian32Member</name><value>32017</value></member><member><name>Volt32Member</name><value>32018</value></member><member><name>Watt32Member</name><value>32019</value></member><member><name>Ampere64Member</name><value>64001</value></member><member><name>CubicMeter64Member</name><value>64002</value></member><member><name>Hertz64Member</name><value>64003</value></member><member><name>Joule64Member</name><value>64004</value></member><member><name>Kelvin64Member</name><value>64005</value></member><member><name>Kilogram64Member</name><value>64006</value></member><member><name>Meter64Member</name><value>64007</value></member><member><name>MeterPerSecond64Member</name><value>64008</value></member><member><name>MeterPerSecondSquared64Member</name><value>64009</value></member><member><name>Newton64Member</name><value>64010</value></member><member><name>Pascal64Member</name><value>64011</value></member><member><name>Radian64Member</name><value>64012</value></member><member><name>RadianPerSecond64Member</name><value>64013</value></member><member><name>RadianPerSecondSquared64Member</name><value>64014</value></member><member><name>Second64Member</name><value>64015</value></member><member><name>SquareMeter64Member</name><value>64016</value></member><member><name>Steradian64Member</name><value>64017</value></member><member><name>Volt64Member</name><value>64018</value></member><member><name>Watt64Member</name><value>64019</value></member><member><name>Int32ArrayMember</name><arrayElements><arrayElement><value>32</value></arrayElement><arrayElement><value>-32</value></arrayElement></arrayElements></member><member><name>Int64ArrayMember</name><arrayElements><arrayElement><value>64</value></arrayElement><arrayElement><value>-64</value></arrayElement></arrayElements></member><member><name>Float32ArrayMember</name><arrayElements><arrayElement><value>32</value></arrayElement><arrayElement><value>-32</value></arrayElement></arrayElements></member><member><name>Float64ArrayMember</name><arrayElements><arrayElement><value>64</value></arrayElement><arrayElement><value>-64</value></arrayElement></arrayElements></member><member><name>BooleanArrayMember</name><arrayElements><arrayElement><value>true</value></arrayElement><arrayElement><value>false</value></arrayElement></arrayElements></member><member><name>EnumerationArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestEnum.MyFirst</value></arrayElement><arrayElement><value>DoseTest.TestEnum.MySecond</value></arrayElement></arrayElements></member><member><name>StringArrayMember</name><arrayElements><arrayElement><value/></arrayElement><arrayElement><value xml:space="preserve">rifaS</value></arrayElement></arrayElements></member><member><name>EntityIdArrayMember</name><arrayElements><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></arrayElement><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>SomeInstance</instanceId></entityId></arrayElement></arrayElements></member><member><name>TypeIdArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestItem</value></arrayElement><arrayElement><value>DoseTest.TestEnum</value></arrayElement></arrayElements></member><member><name>InstanceIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeInstance</value></arrayElement></arrayElements></member><member><name>ChannelIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeChannel</value></arrayElement></arrayElements></member><member><name>HandlerIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeHandler</value></arrayElement></arrayElements></member><member><name>ObjectArrayMember</name><arrayElements><arrayElement><object><name>Object</name></object></arrayElement><arrayElement><object><name>Object</name></object></arrayElement></arrayElements></member><member><name>BinaryArrayMember</name><arrayElements><arrayElement><value/></arrayElement><arrayElement><value>
b25jZSBtb3JlLi4u
</value></arrayElement></arrayElements></member><member><name>TestClassArrayMember</name><arrayElements><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>3200</value></member></members></object></arrayElement><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-3200</value></member></members></object></arrayElement></arrayElements></member><member><name>Ampere32ArrayMember</name><arrayElements><arrayElement><value>32001</value></arrayElement><arrayElement><value>-32001</value></arrayElement></arrayElements></member><member><name>CubicMeter32ArrayMember</name><arrayElements><arrayElement><value>32002</value></arrayElement><arrayElement><value>-32002</value></arrayElement></arrayElements></member><member><name>Hertz32ArrayMember</name><arrayElements><arrayElement><value>32003</value></arrayElement><arrayElement><value>-32003</value></arrayElement></arrayElements></member><member><name>Joule32ArrayMember</name><arrayElements><arrayElement><value>32004</value></arrayElement><arrayElement><value>-32004</value></arrayElement></arrayElements></member><member><name>Kelvin32ArrayMember</name><arrayElements><arrayElement><value>32005</value></arrayElement><arrayElement><value>-32005</value></arrayElement></arrayElements></member><member><name>Kilogram32ArrayMember</name><arrayElements><arrayElement><value>32006</value></arrayElement><arrayElement><value>-32006</value></arrayElement></arrayElements></member><member><name>Meter32ArrayMember</name><arrayElements><arrayElement><value>32007</value></arrayElement><arrayElement><value>-32007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond32ArrayMember</name><arrayElements><arrayElement><value>32008</value></arrayElement><arrayElement><value>-32008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>32009</value></arrayElement><arrayElement><value>-32009</value></arrayElement></arrayElements></member><member><name>Newton32ArrayMember</name><arrayElements><arrayElement><value>32010</value></arrayElement><arrayElement><value>-32010</value></arrayElement></arrayElements></member><member><name>Pascal32ArrayMember</name><arrayElements><arrayElement><value>32011</value></arrayElement><arrayElement><value>-32011</value></arrayElement></arrayElements></member><member><name>Radian32ArrayMember</name><arrayElements><arrayElement><value>32012</value></arrayElement><arrayElement><value>-32012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond32ArrayMember</name><arrayElements><arrayElement><value>32013</value></arrayElement><arrayElement><value>-32013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>32014</value></arrayElement><arrayElement><value>-32014</value></arrayElement></arrayElements></member><member><name>Second32ArrayMember</name><arrayElements><arrayElement><value>32015</value></arrayElement><arrayElement><value>-32015</value></arrayElement></arrayElements></member><member><name>SquareMeter32ArrayMember</name><arrayElements><arrayElement><value>32016</value></arrayElement><arrayElement><value>-32016</value></arrayElement></arrayElements></member><member><name>Steradian32ArrayMember</name><arrayElements><arrayElement><value>32017</value></arrayElement><arrayElement><value>-32017</value></arrayElement></arrayElements></member><member><name>Volt32ArrayMember</name><arrayElements><arrayElement><value>32018</value></arrayElement><arrayElement><value>-32018</value></arrayElement></arrayElements></member><member><name>Watt32ArrayMember</name><arrayElements><arrayElement><value>32019</value></arrayElement><arrayElement><value>-32019</value></arrayElement></arrayElements></member><member><name>Ampere64ArrayMember</name><arrayElements><arrayElement><value>64001</value></arrayElement><arrayElement><value>-64001</value></arrayElement></arrayElements></member><member><name>CubicMeter64ArrayMember</name><arrayElements><arrayElement><value>64002</value></arrayElement><arrayElement><value>-64002</value></arrayElement></arrayElements></member><member><name>Hertz64ArrayMember</name><arrayElements><arrayElement><value>64003</value></arrayElement><arrayElement><value>-64003</value></arrayElement></arrayElements></member><member><name>Joule64ArrayMember</name><arrayElements><arrayElement><value>64004</value></arrayElement><arrayElement><value>-64004</value></arrayElement></arrayElements></member><member><name>Kelvin64ArrayMember</name><arrayElements><arrayElement><value>64005</value></arrayElement><arrayElement><value>-64005</value></arrayElement></arrayElements></member><member><name>Kilogram64ArrayMember</name><arrayElements><arrayElement><value>64006</value></arrayElement><arrayElement><value>-64006</value></arrayElement></arrayElements></member><member><name>Meter64ArrayMember</name><arrayElements><arrayElement><value>64007</value></arrayElement><arrayElement><value>-64007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond64ArrayMember</name><arrayElements><arrayElement><value>64008</value></arrayElement><arrayElement><value>-64008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>64009</value></arrayElement><arrayElement><value>-64009</value></arrayElement></arrayElements></member><member><name>Newton64ArrayMember</name><arrayElements><arrayElement><value>64010</value></arrayElement><arrayElement><value>-64010</value></arrayElement></arrayElements></member><member><name>Pascal64ArrayMember</name><arrayElements><arrayElement><value>64011</value></arrayElement><arrayElement><value>-64011</value></arrayElement></arrayElements></member><member><name>Radian64ArrayMember</name><arrayElements><arrayElement><value>64012</value></arrayElement><arrayElement><value>-64012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond64ArrayMember</name><arrayElements><arrayElement><value>64013</value></arrayElement><arrayElement><value>-64013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>64014</value></arrayElement><arrayElement><value>-64014</value></arrayElement></arrayElements></member><member><name>Second64ArrayMember</name><arrayElements><arrayElement><value>64015</value></arrayElement><arrayElement><value>-64015</value></arrayElement></arrayElements></member><member><name>SquareMeter64ArrayMember</name><arrayElements><arrayElement><value>64016</value></arrayElement><arrayElement><value>-64016</value></arrayElement></arrayElements></member><member><name>Steradian64ArrayMember</name><arrayElements><arrayElement><value>64017</value></arrayElement><arrayElement><value>-64017</value></arrayElement></arrayElements></member><member><name>Volt64ArrayMember</name><arrayElements><arrayElement><value>64018</value></arrayElement><arrayElement><value>-64018</value></arrayElement></arrayElements></member><member><name>Watt64ArrayMember</name><arrayElements><arrayElement><value>64019</value></arrayElement><arrayElement><value>-64019</value></arrayElement></arrayElements></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ComplexGlobalEntity</name><members><member><name>Int32Member</name><value>320</value></member><member><name>Int64Member</name><value>640</value></member><member><name>Float32Member</name><value>320</value></member><member><name>Float64Member</name><value>640</value></member><member><name>BooleanMember</name><value>false</value></member><member><name>EnumerationMember</name><value>DoseTest.TestEnum.MySecond</value></member><member><name>StringMember</name><value xml:space="preserve">Safir SDK </value></member><member><name>EntityIdMember</name><entityId><name>DoseTest.TestItem</name><instanceId>1</instanceId></entityId></member><member><name>TypeIdMember</name><value>Object</value></member><member><name>InstanceIdMember</name><value>AnotherInstance</value></member><member><name>ChannelIdMember</name><value>AnotherChannel</value></member><member><name>HandlerIdMember</name><value>AnotherHandler</value></member><member><name>ObjectMember</name><object><name>DoseTest.TestItem</name></object></member><member><name>BinaryMember</name><value>
b25jZSBtb3JlLi4u
</value></member><member><name>TestClassMember</name><object><name>DoseTest.TestItem</name></object></member><member><name>Ampere32Member</name><value>320001</value></member><member><name>CubicMeter32Member</name><value>320002</value></member><member><name>Hertz32Member</name><value>320003</value></member><member><name>Joule32Member</name><value>320004</value></member><member><name>Kelvin32Member</name><value>320005</value></member><member><name>Kilogram32Member</name><value>320006</value></member><member><name>Meter32Member</name><value>320007</value></member><member><name>MeterPerSecond32Member</name><value>320008</value></member><member><name>MeterPerSecondSquared32Member</name><value>320009</value></member><member><name>Newton32Member</name><value>320010</value></member><member><name>Pascal32Member</name><value>320011</value></member><member><name>Radian32Member</name><value>320012</value></member><member><name>RadianPerSecond32Member</name><value>320013</value></member><member><name>RadianPerSecondSquared32Member</name><value>320014</value></member><member><name>Second32Member</name><value>320015</value></member><member><name>SquareMeter32Member</name><value>320016</value></member><member><name>Steradian32Member</name><value>320017</value></member><member><name>Volt32Member</name><value>320018</value></member><member><name>Watt32Member</name><value>320019</value></member><member><name>Ampere64Member</name><value>640001</value></member><member><name>CubicMeter64Member</name><value>640002</value></member><member><name>Hertz64Member</name><value>640003</value></member><member><name>Joule64Member</name><value>640004</value></member><member><name>Kelvin64Member</name><value>640005</value></member><member><name>Kilogram64Member</name><value>640006</value></member><member><name>Meter64Member</name><value>640007</value></member><member><name>MeterPerSecond64Member</name><value>640008</value></member><member><name>MeterPerSecondSquared64Member</name><value>640009</value></member><member><name>Newton64Member</name><value>640010</value></member><member><name>Pascal64Member</name><value>640011</value></member><member><name>Radian64Member</name><value>640012</value></member><member><name>RadianPerSecond64Member</name><value>640013</value></member><member><name>RadianPerSecondSquared64Member</name><value>640014</value></member><member><name>Second64Member</name><value>640015</value></member><member><name>SquareMeter64Member</name><value>640016</value></member><member><name>Steradian64Member</name><value>640017</value></member><member><name>Volt64Member</name><value>640018</value></member><member><name>Watt64Member</name><value>640019</value></member><member><name>Int32ArrayMember</name><arrayElements><arrayElement><value>320</value></arrayElement><arrayElement><value>-320</value></arrayElement></arrayElements></member><member><name>Int64ArrayMember</name><arrayElements><arrayElement><value>640</value></arrayElement><arrayElement><value>-640</value></arrayElement></arrayElements></member><member><name>Float32ArrayMember</name><arrayElements><arrayElement><value>320</value></arrayElement><arrayElement><value>-320</value></arrayElement></arrayElements></member><member><name>Float64ArrayMember</name><arrayElements><arrayElement><value>640</value></arrayElement><arrayElement><value>-640</value></arrayElement></arrayElements></member><member><name>BooleanArrayMember</name><arrayElements><arrayElement><value>true</value></arrayElement><arrayElement><value>false</value></arrayElement></arrayElements></member><member><name>EnumerationArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestEnum.MyFirst</value></arrayElement><arrayElement><value>DoseTest.TestEnum.MySecond</value></arrayElement></arrayElements></member><member><name>StringArrayMember</name><arrayElements><arrayElement><value/></arrayElement><arrayElement><value xml:space="preserve">rifaS</value></arrayElement></arrayElements></member><member><name>EntityIdArrayMember</name><arrayElements><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></arrayElement><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>SomeInstance</instanceId></entityId></arrayElement></arrayElements></member><member><name>TypeIdArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestItem</value></arrayElement><arrayElement><value>DoseTest.TestEnum</value></arrayElement></arrayElements></member><member><name>InstanceIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeInstance</value></arrayElement></arrayElements></member><member><name>ChannelIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeChannel</value></arrayElement></arrayElements></member><member><name>HandlerIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeHandler</value></arrayElement></arrayElements></member><member><name>ObjectArrayMember</name><arrayElements><arrayElement><object><name>Object</name></object></arrayElement><arrayElement><object><name>Object</name></object></arrayElement></arrayElements></member><member><name>BinaryArrayMember</name><arrayElements><arrayElement><value>
b25jZSBtb3JlLi4u
</value></arrayElement><arrayElement><value>
VGVzdGluZyBiaW5hcnkgdHlwZQ==
</value></arrayElement></arrayElements></member><member><name>TestClassArrayMember</name><arrayElements><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>32000</value></member></members></object></arrayElement><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-32000</value></member></members></object></arrayElement></arrayElements></member><member><name>Ampere32ArrayMember</name><arrayElements><arrayElement><value>320001</value></arrayElement><arrayElement><value>-320001</value></arrayElement></arrayElements></member><member><name>CubicMeter32ArrayMember</name><arrayElements><arrayElement><value>320002</value></arrayElement><arrayElement><value>-320002</value></arrayElement></arrayElements></member><member><name>Hertz32ArrayMember</name><arrayElements><arrayElement><value>320003</value></arrayElement><arrayElement><value>-320003</value></arrayElement></arrayElements></member><member><name>Joule32ArrayMember</name><arrayElements><arrayElement><value>320004</value></arrayElement><arrayElement><value>-320004</value></arrayElement></arrayElements></member><member><name>Kelvin32ArrayMember</name><arrayElements><arrayElement><value>320005</value></arrayElement><arrayElement><value>-320005</value></arrayElement></arrayElements></member><member><name>Kilogram32ArrayMember</name><arrayElements><arrayElement><value>320006</value></arrayElement><arrayElement><value>-320006</value></arrayElement></arrayElements></member><member><name>Meter32ArrayMember</name><arrayElements><arrayElement><value>320007</value></arrayElement><arrayElement><value>-320007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond32ArrayMember</name><arrayElements><arrayElement><value>320008</value></arrayElement><arrayElement><value>-320008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>320009</value></arrayElement><arrayElement><value>-320009</value></arrayElement></arrayElements></member><member><name>Newton32ArrayMember</name><arrayElements><arrayElement><value>320010</value></arrayElement><arrayElement><value>-320010</value></arrayElement></arrayElements></member><member><name>Pascal32ArrayMember</name><arrayElements><arrayElement><value>320011</value></arrayElement><arrayElement><value>-320011</value></arrayElement></arrayElements></member><member><name>Radian32ArrayMember</name><arrayElements><arrayElement><value>320012</value></arrayElement><arrayElement><value>-320012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond32ArrayMember</name><arrayElements><arrayElement><value>320013</value></arrayElement><arrayElement><value>-320013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>320014</value></arrayElement><arrayElement><value>-320014</value></arrayElement></arrayElements></member><member><name>Second32ArrayMember</name><arrayElements><arrayElement><value>320015</value></arrayElement><arrayElement><value>-320015</value></arrayElement></arrayElements></member><member><name>SquareMeter32ArrayMember</name><arrayElements><arrayElement><value>320016</value></arrayElement><arrayElement><value>-320016</value></arrayElement></arrayElements></member><member><name>Steradian32ArrayMember</name><arrayElements><arrayElement><value>320017</value></arrayElement><arrayElement><value>-320017</value></arrayElement></arrayElements></member><member><name>Volt32ArrayMember</name><arrayElements><arrayElement><value>320018</value></arrayElement><arrayElement><value>-320018</value></arrayElement></arrayElements></member><member><name>Watt32ArrayMember</name><arrayElements><arrayElement><value>320019</value></arrayElement><arrayElement><value>-320019</value></arrayElement></arrayElements></member><member><name>Ampere64ArrayMember</name><arrayElements><arrayElement><value>640001</value></arrayElement><arrayElement><value>-640001</value></arrayElement></arrayElements></member><member><name>CubicMeter64ArrayMember</name><arrayElements><arrayElement><value>640002</value></arrayElement><arrayElement><value>-640002</value></arrayElement></arrayElements></member><member><name>Hertz64ArrayMember</name><arrayElements><arrayElement><value>640003</value></arrayElement><arrayElement><value>-640003</value></arrayElement></arrayElements></member><member><name>Joule64ArrayMember</name><arrayElements><arrayElement><value>640004</value></arrayElement><arrayElement><value>-640004</value></arrayElement></arrayElements></member><member><name>Kelvin64ArrayMember</name><arrayElements><arrayElement><value>640005</value></arrayElement><arrayElement><value>-640005</value></arrayElement></arrayElements></member><member><name>Kilogram64ArrayMember</name><arrayElements><arrayElement><value>640006</value></arrayElement><arrayElement><value>-640006</value></arrayElement></arrayElements></member><member><name>Meter64ArrayMember</name><arrayElements><arrayElement><value>640007</value></arrayElement><arrayElement><value>-640007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond64ArrayMember</name><arrayElements><arrayElement><value>640008</value></arrayElement><arrayElement><value>-640008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>640009</value></arrayElement><arrayElement><value>-640009</value></arrayElement></arrayElements></member><member><name>Newton64ArrayMember</name><arrayElements><arrayElement><value>640010</value></arrayElement><arrayElement><value>-640010</value></arrayElement></arrayElements></member><member><name>Pascal64ArrayMember</name><arrayElements><arrayElement><value>640011</value></arrayElement><arrayElement><value>-640011</value></arrayElement></arrayElements></member><member><name>Radian64ArrayMember</name><arrayElements><arrayElement><value>640012</value></arrayElement><arrayElement><value>-640012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond64ArrayMember</name><arrayElements><arrayElement><value>640013</value></arrayElement><arrayElement><value>-640013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>640014</value></arrayElement><arrayElement><value>-640014</value></arrayElement></arrayElements></member><member><name>Second64ArrayMember</name><arrayElements><arrayElement><value>640015</value></arrayElement><arrayElement><value>-640015</value></arrayElement></arrayElements></member><member><name>SquareMeter64ArrayMember</name><arrayElements><arrayElement><value>640016</value></arrayElement><arrayElement><value>-640016</value></arrayElement></arrayElements></member><member><name>Steradian64ArrayMember</name><arrayElements><arrayElement><value>640017</value></arrayElement><arrayElement><value>-640017</value></arrayElement></arrayElements></member><member><name>Volt64ArrayMember</name><arrayElements><arrayElement><value>640018</value></arrayElement><arrayElement><value>-640018</value></arrayElement></arrayElements></member><member><name>Watt64ArrayMember</name><arrayElements><arrayElement><value>640019</value></arrayElement><arrayElement><value>-640019</value></arrayElement></arrayElements></member></members></object>

Consumer 2: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.ComplexGlobalEntity, 0)

==========================================================================
TESTCASE 518
Description: Test of sending requests and subscribing to an entity with all types defined in it.
Expectation: P2 receives requests (cre, upd, del) with correct data in them, and P0 gets corresponding subscription responses.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ComplexGlobalEntity</name><members><member><name>Int32Member</name><value>32</value></member><member><name>Int64Member</name><value>64</value></member><member><name>Float32Member</name><value>32</value></member><member><name>Float64Member</name><value>64</value></member><member><name>BooleanMember</name><value>true</value></member><member><name>EnumerationMember</name><value>DoseTest.TestEnum.MyFirst</value></member><member><name>StringMember</name><value/></member><member><name>EntityIdMember</name><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></member><member><name>TypeIdMember</name><value>DoseTest.TestItem</value></member><member><name>InstanceIdMember</name><value>SomeInstance</value></member><member><name>ChannelIdMember</name><value>SomeChannel</value></member><member><name>HandlerIdMember</name><value>SomeHandler</value></member><member><name>ObjectMember</name><object><name>Object</name></object></member><member><name>BinaryMember</name></member><member><name>TestClassMember</name><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-32</value></member></members></object></member><member><name>Ampere32Member</name><value>32001</value></member><member><name>CubicMeter32Member</name><value>32002</value></member><member><name>Hertz32Member</name><value>32003</value></member><member><name>Joule32Member</name><value>32004</value></member><member><name>Kelvin32Member</name><value>32005</value></member><member><name>Kilogram32Member</name><value>32006</value></member><member><name>Meter32Member</name><value>32007</value></member><member><name>MeterPerSecond32Member</name><value>32008</value></member><member><name>MeterPerSecondSquared32Member</name><value>32009</value></member><member><name>Newton32Member</name><value>32010</value></member><member><name>Pascal32Member</name><value>32011</value></member><member><name>Radian32Member</name><value>32012</value></member><member><name>RadianPerSecond32Member</name><value>32013</value></member><member><name>RadianPerSecondSquared32Member</name><value>32014</value></member><member><name>Second32Member</name><value>32015</value></member><member><name>SquareMeter32Member</name><value>32016</value></member><member><name>Steradian32Member</name><value>32017</value></member><member><name>Volt32Member</name><value>32018</value></member><member><name>Watt32Member</name><value>32019</value></member><member><name>Ampere64Member</name><value>64001</value></member><member><name>CubicMeter64Member</name><value>64002</value></member><member><name>Hertz64Member</name><value>64003</value></member><member><name>Joule64Member</name><value>64004</value></member><member><name>Kelvin64Member</name><value>64005</value></member><member><name>Kilogram64Member</name><value>64006</value></member><member><name>Meter64Member</name><value>64007</value></member><member><name>MeterPerSecond64Member</name><value>64008</value></member><member><name>MeterPerSecondSquared64Member</name><value>64009</value></member><member><name>Newton64Member</name><value>64010</value></member><member><name>Pascal64Member</name><value>64011</value></member><member><name>Radian64Member</name><value>64012</value></member><member><name>RadianPerSecond64Member</name><value>64013</value></member><member><name>RadianPerSecondSquared64Member</name><value>64014</value></member><member><name>Second64Member</name><value>64015</value></member><member><name>SquareMeter64Member</name><value>64016</value></member><member><name>Steradian64Member</name><value>64017</value></member><member><name>Volt64Member</name><value>64018</value></member><member><name>Watt64Member</name><value>64019</value></member><member><name>Int32ArrayMember</name><arrayElements><arrayElement><value>32</value></arrayElement><arrayElement><value>-32</value></arrayElement></arrayElements></member><member><name>Int64ArrayMember</name><arrayElements><arrayElement><value>64</value></arrayElement><arrayElement><value>-64</value></arrayElement></arrayElements></member><member><name>Float32ArrayMember</name><arrayElements><arrayElement><value>32</value></arrayElement><arrayElement><value>-32</value></arrayElement></arrayElements></member><member><name>Float64ArrayMember</name><arrayElements><arrayElement><value>64</value></arrayElement><arrayElement><value>-64</value></arrayElement></arrayElements></member><member><name>BooleanArrayMember</name><arrayElements><arrayElement><value>true</value></arrayElement><arrayElement><value>false</value></arrayElement></arrayElements></member><member><name>EnumerationArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestEnum.MyFirst</value></arrayElement><arrayElement><value>DoseTest.TestEnum.MySecond</value></arrayElement></arrayElements></member><member><name>StringArrayMember</name><arrayElements><arrayElement><value xml:space="preserve">Safir</value></arrayElement><arrayElement><value/></arrayElement></arrayElements></member><member><name>EntityIdArrayMember</name><arrayElements><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></arrayElement><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>SomeInstance</instanceId></entityId></arrayElement></arrayElements></member><member><name>TypeIdArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestItem</value></arrayElement><arrayElement><value>DoseTest.TestEnum</value></arrayElement></arrayElements></member><member><name>InstanceIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeInstance</value></arrayElement></arrayElements></member><member><name>ChannelIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeChannel</value></arrayElement></arrayElements></member><member><name>HandlerIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeHandler</value></arrayElement></arrayElements></member><member><name>ObjectArrayMember</name><arrayElements><arrayElement><object><name>Object</name></object></arrayElement><arrayElement><object><name>Object</name></object></arrayElement></arrayElements></member><member><name>BinaryArrayMember</name><arrayElements><arrayElement><value>
VGVzdGluZyBiaW5hcnkgdHlwZQ==
</value></arrayElement><arrayElement><value/></arrayElement></arrayElements></member><member><name>TestClassArrayMember</name><arrayElements><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>3200</value></member></members></object></arrayElement><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-3200</value></member></members></object></arrayElement></arrayElements></member><member><name>Ampere32ArrayMember</name><arrayElements><arrayElement><value>32001</value></arrayElement><arrayElement><value>-32001</value></arrayElement></arrayElements></member><member><name>CubicMeter32ArrayMember</name><arrayElements><arrayElement><value>32002</value></arrayElement><arrayElement><value>-32002</value></arrayElement></arrayElements></member><member><name>Hertz32ArrayMember</name><arrayElements><arrayElement><value>32003</value></arrayElement><arrayElement><value>-32003</value></arrayElement></arrayElements></member><member><name>Joule32ArrayMember</name><arrayElements><arrayElement><value>32004</value></arrayElement><arrayElement><value>-32004</value></arrayElement></arrayElements></member><member><name>Kelvin32ArrayMember</name><arrayElements><arrayElement><value>32005</value></arrayElement><arrayElement><value>-32005</value></arrayElement></arrayElements></member><member><name>Kilogram32ArrayMember</name><arrayElements><arrayElement><value>32006</value></arrayElement><arrayElement><value>-32006</value></arrayElement></arrayElements></member><member><name>Meter32ArrayMember</name><arrayElements><arrayElement><value>32007</value></arrayElement><arrayElement><value>-32007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond32ArrayMember</name><arrayElements><arrayElement><value>32008</value></arrayElement><arrayElement><value>-32008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>32009</value></arrayElement><arrayElement><value>-32009</value></arrayElement></arrayElements></member><member><name>Newton32ArrayMember</name><arrayElements><arrayElement><value>32010</value></arrayElement><arrayElement><value>-32010</value></arrayElement></arrayElements></member><member><name>Pascal32ArrayMember</name><arrayElements><arrayElement><value>32011</value></arrayElement><arrayElement><value>-32011</value></arrayElement></arrayElements></member><member><name>Radian32ArrayMember</name><arrayElements><arrayElement><value>32012</value></arrayElement><arrayElement><value>-32012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond32ArrayMember</name><arrayElements><arrayElement><value>32013</value></arrayElement><arrayElement><value>-32013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>32014</value></arrayElement><arrayElement><value>-32014</value></arrayElement></arrayElements></member><member><name>Second32ArrayMember</name><arrayElements><arrayElement><value>32015</value></arrayElement><arrayElement><value>-32015</value></arrayElement></arrayElements></member><member><name>SquareMeter32ArrayMember</name><arrayElements><arrayElement><value>32016</value></arrayElement><arrayElement><value>-32016</value></arrayElement></arrayElements></member><member><name>Steradian32ArrayMember</name><arrayElements><arrayElement><value>32017</value></arrayElement><arrayElement><value>-32017</value></arrayElement></arrayElements></member><member><name>Volt32ArrayMember</name><arrayElements><arrayElement><value>32018</value></arrayElement><arrayElement><value>-32018</value></arrayElement></arrayElements></member><member><name>Watt32ArrayMember</name><arrayElements><arrayElement><value>32019</value></arrayElement><arrayElement><value>-32019</value></arrayElement></arrayElements></member><member><name>Ampere64ArrayMember</name><arrayElements><arrayElement><value>64001</value></arrayElement><arrayElement><value>-64001</value></arrayElement></arrayElements></member><member><name>CubicMeter64ArrayMember</name><arrayElements><arrayElement><value>64002</value></arrayElement><arrayElement><value>-64002</value></arrayElement></arrayElements></member><member><name>Hertz64ArrayMember</name><arrayElements><arrayElement><value>64003</value></arrayElement><arrayElement><value>-64003</value></arrayElement></arrayElements></member><member><name>Joule64ArrayMember</name><arrayElements><arrayElement><value>64004</value></arrayElement><arrayElement><value>-64004</value></arrayElement></arrayElements></member><member><name>Kelvin64ArrayMember</name><arrayElements><arrayElement><value>64005</value></arrayElement><arrayElement><value>-64005</value></arrayElement></arrayElements></member><member><name>Kilogram64ArrayMember</name><arrayElements><arrayElement><value>64006</value></arrayElement><arrayElement><value>-64006</value></arrayElement></arrayElements></member><member><name>Meter64ArrayMember</name><arrayElements><arrayElement><value>64007</value></arrayElement><arrayElement><value>-64007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond64ArrayMember</name><arrayElements><arrayElement><value>64008</value></arrayElement><arrayElement><value>-64008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>64009</value></arrayElement><arrayElement><value>-64009</value></arrayElement></arrayElements></member><member><name>Newton64ArrayMember</name><arrayElements><arrayElement><value>64010</value></arrayElement><arrayElement><value>-64010</value></arrayElement></arrayElements></member><member><name>Pascal64ArrayMember</name><arrayElements><arrayElement><value>64011</value></arrayElement><arrayElement><value>-64011</value></arrayElement></arrayElements></member><member><name>Radian64ArrayMember</name><arrayElements><arrayElement><value>64012</value></arrayElement><arrayElement><value>-64012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond64ArrayMember</name><arrayElements><arrayElement><value>64013</value></arrayElement><arrayElement><value>-64013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>64014</value></arrayElement><arrayElement><value>-64014</value></arrayElement></arrayElements></member><member><name>Second64ArrayMember</name><arrayElements><arrayElement><value>64015</value></arrayElement><arrayElement><value>-64015</value></arrayElement></arrayElements></member><member><name>SquareMeter64ArrayMember</name><arrayElements><arrayElement><value>64016</value></arrayElement><arrayElement><value>-64016</value></arrayElement></arrayElements></member><member><name>Steradian64ArrayMember</name><arrayElements><arrayElement><value>64017</value></arrayElement><arrayElement><value>-64017</value></arrayElement></arrayElements></member><member><name>Volt64ArrayMember</name><arrayElements><arrayElement><value>64018</value></arrayElement><arrayElement><value>-64018</value></arrayElement></arrayElements></member><member><name>Watt64ArrayMember</name><arrayElements><arrayElement><value>64019</value></arrayElement><arrayElement><value>-64019</value></arrayElement></arrayElements></member></members></object>

Consumer 1: OnResponse:
  Type       = DoseTest.SuccessfulUpdate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulUpdate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ComplexGlobalEntity</name><members><member><name>Int32Member</name><value>320</value></member><member><name>Int64Member</name><value>640</value></member><member><name>Float32Member</name><value>320</value></member><member><name>Float64Member</name><value>640</value></member><member><name>BooleanMember</name><value>false</value></member><member><name>EnumerationMember</name><value>DoseTest.TestEnum.MySecond</value></member><member><name>StringMember</name><value xml:space="preserve">Safir SDK </value></member><member><name>EntityIdMember</name><entityId><name>DoseTest.TestItem</name><instanceId>1</instanceId></entityId></member><member><name>TypeIdMember</name><value>Object</value></member><member><name>InstanceIdMember</name><value>AnotherInstance</value></member><member><name>ChannelIdMember</name><value>AnotherChannel</value></member><member><name>HandlerIdMember</name><value>AnotherHandler</value></member><member><name>ObjectMember</name><object><name>DoseTest.TestItem</name></object></member><member><name>BinaryMember</name><value>
b25jZSBtb3JlLi4u
</value></member><member><name>TestClassMember</name><object><name>DoseTest.TestItem</name></object></member><member><name>Ampere32Member</name><value>320001</value></member><member><name>CubicMeter32Member</name><value>320002</value></member><member><name>Hertz32Member</name><value>320003</value></member><member><name>Joule32Member</name><value>320004</value></member><member><name>Kelvin32Member</name><value>320005</value></member><member><name>Kilogram32Member</name><value>320006</value></member><member><name>Meter32Member</name><value>320007</value></member><member><name>MeterPerSecond32Member</name><value>320008</value></member><member><name>MeterPerSecondSquared32Member</name><value>320009</value></member><member><name>Newton32Member</name><value>320010</value></member><member><name>Pascal32Member</name><value>320011</value></member><member><name>Radian32Member</name><value>320012</value></member><member><name>RadianPerSecond32Member</name><value>320013</value></member><member><name>RadianPerSecondSquared32Member</name><value>320014</value></member><member><name>Second32Member</name><value>320015</value></member><member><name>SquareMeter32Member</name><value>320016</value></member><member><name>Steradian32Member</name><value>320017</value></member><member><name>Volt32Member</name><value>320018</value></member><member><name>Watt32Member</name><value>320019</value></member><member><name>Ampere64Member</name><value>640001</value></member><member><name>CubicMeter64Member</name><value>640002</value></member><member><name>Hertz64Member</name><value>640003</value></member><member><name>Joule64Member</name><value>640004</value></member><member><name>Kelvin64Member</name><value>640005</value></member><member><name>Kilogram64Member</name><value>640006</value></member><member><name>Meter64Member</name><value>640007</value></member><member><name>MeterPerSecond64Member</name><value>640008</value></member><member><name>MeterPerSecondSquared64Member</name><value>640009</value></member><member><name>Newton64Member</name><value>640010</value></member><member><name>Pascal64Member</name><value>640011</value></member><member><name>Radian64Member</name><value>640012</value></member><member><name>RadianPerSecond64Member</name><value>640013</value></member><member><name>RadianPerSecondSquared64Member</name><value>640014</value></member><member><name>Second64Member</name><value>640015</value></member><member><name>SquareMeter64Member</name><value>640016</value></member><member><name>Steradian64Member</name><value>640017</value></member><member><name>Volt64Member</name><value>640018</value></member><member><name>Watt64Member</name><value>640019</value></member><member><name>Int32ArrayMember</name><arrayElements><arrayElement><value>320</value></arrayElement><arrayElement><value>-320</value></arrayElement></arrayElements></member><member><name>Int64ArrayMember</name><arrayElements><arrayElement><value>640</value></arrayElement><arrayElement><value>-640</value></arrayElement></arrayElements></member><member><name>Float32ArrayMember</name><arrayElements><arrayElement><value>320</value></arrayElement><arrayElement><value>-320</value></arrayElement></arrayElements></member><member><name>Float64ArrayMember</name><arrayElements><arrayElement><value>640</value></arrayElement><arrayElement><value>-640</value></arrayElement></arrayElements></member><member><name>BooleanArrayMember</name><arrayElements><arrayElement><value>true</value></arrayElement><arrayElement><value>false</value></arrayElement></arrayElements></member><member><name>EnumerationArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestEnum.MyFirst</value></arrayElement><arrayElement><value>DoseTest.TestEnum.MySecond</value></arrayElement></arrayElements></member><member><name>StringArrayMember</name><arrayElements><arrayElement><value/></arrayElement><arrayElement><value xml:space="preserve">rifaS</value></arrayElement></arrayElements></member><member><name>EntityIdArrayMember</name><arrayElements><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>0</instanceId></entityId></arrayElement><arrayElement><entityId><name>DoseTest.TestItem</name><instanceId>SomeInstance</instanceId></entityId></arrayElement></arrayElements></member><member><name>TypeIdArrayMember</name><arrayElements><arrayElement><value>DoseTest.TestItem</value></arrayElement><arrayElement><value>DoseTest.TestEnum</value></arrayElement></arrayElements></member><member><name>InstanceIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeInstance</value></arrayElement></arrayElements></member><member><name>ChannelIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeChannel</value></arrayElement></arrayElements></member><member><name>HandlerIdArrayMember</name><arrayElements><arrayElement><value>0</value></arrayElement><arrayElement><value>SomeHandler</value></arrayElement></arrayElements></member><member><name>ObjectArrayMember</name><arrayElements><arrayElement><object><name>Object</name></object></arrayElement><arrayElement><object><name>Object</name></object></arrayElement></arrayElements></member><member><name>BinaryArrayMember</name><arrayElements><arrayElement><value>
b25jZSBtb3JlLi4u
</value></arrayElement><arrayElement></arrayElement></arrayElements></member><member><name>TestClassArrayMember</name><arrayElements><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>32000</value></member></members></object></arrayElement><arrayElement><object><name>DoseTest.TestItem</name><members><member><name>MyInt</name><value>-32000</value></member></members></object></arrayElement></arrayElements></member><member><name>Ampere32ArrayMember</name><arrayElements><arrayElement><value>320001</value></arrayElement><arrayElement><value>-320001</value></arrayElement></arrayElements></member><member><name>CubicMeter32ArrayMember</name><arrayElements><arrayElement><value>320002</value></arrayElement><arrayElement><value>-320002</value></arrayElement></arrayElements></member><member><name>Hertz32ArrayMember</name><arrayElements><arrayElement><value>320003</value></arrayElement><arrayElement><value>-320003</value></arrayElement></arrayElements></member><member><name>Joule32ArrayMember</name><arrayElements><arrayElement><value>320004</value></arrayElement><arrayElement><value>-320004</value></arrayElement></arrayElements></member><member><name>Kelvin32ArrayMember</name><arrayElements><arrayElement><value>320005</value></arrayElement><arrayElement><value>-320005</value></arrayElement></arrayElements></member><member><name>Kilogram32ArrayMember</name><arrayElements><arrayElement><value>320006</value></arrayElement><arrayElement><value>-320006</value></arrayElement></arrayElements></member><member><name>Meter32ArrayMember</name><arrayElements><arrayElement><value>320007</value></arrayElement><arrayElement><value>-320007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond32ArrayMember</name><arrayElements><arrayElement><value>320008</value></arrayElement><arrayElement><value>-320008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>320009</value></arrayElement><arrayElement><value>-320009</value></arrayElement></arrayElements></member><member><name>Newton32ArrayMember</name><arrayElements><arrayElement><value>320010</value></arrayElement><arrayElement><value>-320010</value></arrayElement></arrayElements></member><member><name>Pascal32ArrayMember</name><arrayElements><arrayElement><value>320011</value></arrayElement><arrayElement><value>-320011</value></arrayElement></arrayElements></member><member><name>Radian32ArrayMember</name><arrayElements><arrayElement><value>320012</value></arrayElement><arrayElement><value>-320012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond32ArrayMember</name><arrayElements><arrayElement><value>320013</value></arrayElement><arrayElement><value>-320013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared32ArrayMember</name><arrayElements><arrayElement><value>320014</value></arrayElement><arrayElement><value>-320014</value></arrayElement></arrayElements></member><member><name>Second32ArrayMember</name><arrayElements><arrayElement><value>320015</value></arrayElement><arrayElement><value>-320015</value></arrayElement></arrayElements></member><member><name>SquareMeter32ArrayMember</name><arrayElements><arrayElement><value>320016</value></arrayElement><arrayElement><value>-320016</value></arrayElement></arrayElements></member><member><name>Steradian32ArrayMember</name><arrayElements><arrayElement><value>320017</value></arrayElement><arrayElement><value>-320017</value></arrayElement></arrayElements></member><member><name>Volt32ArrayMember</name><arrayElements><arrayElement><value>320018</value></arrayElement><arrayElement><value>-320018</value></arrayElement></arrayElements></member><member><name>Watt32ArrayMember</name><arrayElements><arrayElement><value>320019</value></arrayElement><arrayElement><value>-320019</value></arrayElement></arrayElements></member><member><name>Ampere64ArrayMember</name><arrayElements><arrayElement><value>640001</value></arrayElement><arrayElement><value>-640001</value></arrayElement></arrayElements></member><member><name>CubicMeter64ArrayMember</name><arrayElements><arrayElement><value>640002</value></arrayElement><arrayElement><value>-640002</value></arrayElement></arrayElements></member><member><name>Hertz64ArrayMember</name><arrayElements><arrayElement><value>640003</value></arrayElement><arrayElement><value>-640003</value></arrayElement></arrayElements></member><member><name>Joule64ArrayMember</name><arrayElements><arrayElement><value>640004</value></arrayElement><arrayElement><value>-640004</value></arrayElement></arrayElements></member><member><name>Kelvin64ArrayMember</name><arrayElements><arrayElement><value>640005</value></arrayElement><arrayElement><value>-640005</value></arrayElement></arrayElements></member><member><name>Kilogram64ArrayMember</name><arrayElements><arrayElement><value>640006</value></arrayElement><arrayElement><value>-640006</value></arrayElement></arrayElements></member><member><name>Meter64ArrayMember</name><arrayElements><arrayElement><value>640007</value></arrayElement><arrayElement><value>-640007</value></arrayElement></arrayElements></member><member><name>MeterPerSecond64ArrayMember</name><arrayElements><arrayElement><value>640008</value></arrayElement><arrayElement><value>-640008</value></arrayElement></arrayElements></member><member><name>MeterPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>640009</value></arrayElement><arrayElement><value>-640009</value></arrayElement></arrayElements></member><member><name>Newton64ArrayMember</name><arrayElements><arrayElement><value>640010</value></arrayElement><arrayElement><value>-640010</value></arrayElement></arrayElements></member><member><name>Pascal64ArrayMember</name><arrayElements><arrayElement><value>640011</value></arrayElement><arrayElement><value>-640011</value></arrayElement></arrayElements></member><member><name>Radian64ArrayMember</name><arrayElements><arrayElement><value>640012</value></arrayElement><arrayElement><value>-640012</value></arrayElement></arrayElements></member><member><name>RadianPerSecond64ArrayMember</name><arrayElements><arrayElement><value>640013</value></arrayElement><arrayElement><value>-640013</value></arrayElement></arrayElements></member><member><name>RadianPerSecondSquared64ArrayMember</name><arrayElements><arrayElement><value>640014</value></arrayElement><arrayElement><value>-640014</value></arrayElement></arrayElements></member><member><name>Second64ArrayMember</name><arrayElements><arrayElement><value>640015</value></arrayElement><arrayElement><value>-640015</value></arrayElement></arrayElements></member><member><name>SquareMeter64ArrayMember</name><arrayElements><arrayElement><value>640016</value></arrayElement><arrayElement><value>-640016</value></arrayElement></arrayElements></member><member><name>Steradian64ArrayMember</name><arrayElements><arrayElement><value>640017</value></arrayElement><arrayElement><value>-640017</value></arrayElement></arrayElements></member><member><name>Volt64ArrayMember</name><arrayElements><arrayElement><value>640018</value></arrayElement><arrayElement><value>-640018</value></arrayElement></arrayElements></member><member><name>Watt64ArrayMember</name><arrayElements><arrayElement><value>640019</value></arrayElement><arrayElement><value>-640019</value></arrayElement></arrayElements></member></members></object>

Consumer 2: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.ComplexGlobalEntity, 0)

==========================================================================
TESTCASE 520
Description: A handler receives an update request for a non-existing entity.
Expectation: Partner 0 receives a SafirNotRegistered response.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 550
Description: Test of IsCreated
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 551
Description: Test of IsCreated when other connection is owner
Expectation: IsCreated returns false when entity is not created and true when it is.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 560
Description: Test of reception of an EntityHandlerResponse when the handler decides instance id
Expectation: Partner 0/Consumer 0 receives an EntityIdResponse with member Assigned set to -6778878277529052275
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 561
Description: Test of reception of an OnCreateRequest where the handler decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Handler decides instance id) without instance id
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 562
Description: Test of reception of an OnCreateRequest where the requestor decides instance id
Expectation: Partner 0 receives an OnCreateRequest (Requestor decides instance id) with instance id 789789789
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 570
Description: Test that only the specified handler gets the request.
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 1)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = 7471736682775137277
  HandlerStr = 7471736682775137277
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Created</value></member></members></object>

==========================================================================
TESTCASE 571
Description: Test of sending update request of created instance (owner on other node)
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 1)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = 7471736682775137277
  HandlerStr = 7471736682775137277
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Updated</value></member></members></object>

==========================================================================
TESTCASE 572
Description: Test of sending update request of created instance (owner on other node)
Expectation: Each partner should receive one (and only one) request, and P0 should receive three success responses and one error response (not registered).
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 1)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = 7471736682775137277
  HandlerStr = 7471736682775137277

==========================================================================
TESTCASE 600
Description: Test of GetQueueSize
Expectation: Queue size should be 0 for all queues
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 601
Description: Test of GetQueueCapacity
Expectation: Queue capacity should be 10 for all queues
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 610
Description: Closing and reopening a connection repeatedly
Expectation: No exceptions
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 700
Description: Test of iterating a single entity type
Expectation: There should be two entities (Info set to "One" and "Two")
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 701
Description: Test of iterating an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 702
Description: Test of iterating a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 703
Description: Test of iterating an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 704
Description: Test of iterating an entity class tree where there are ghosts
Expectation: There should be two Local entities (One and Two), twice (the iteration is done twice).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 710
Description: Test GetNumberOfInstances with entities of a single type
Expectation: There should be two local entities set by default handler.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 711
Description: Test of GetNumberOfInstances on an entity class tree
Expectation: There should be six entities, two each of Root, Global and Local, all set by default handler
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 712
Description: Test of GetNumberOfInstances on a single entity type that has no registerer
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 713
Description: Test of GetNumberOfInstances on an entity class tree without registerers
Expectation: There should be no entities
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 714
Description: Test of GetNumberOfInstances on an entity class tree where there are ghosts
Expectation: There should be two Local entities twice, then the ghosts are removed and the checks are done again.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 720
Description: Test GetInstanceIdPolicy.
Expectation: Handler_1 uses RequestorDecidesInstanceId and Handler_2 uses HandlerDecidesInstanceId.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 800
Description: Test of synchronous volatile persistence
Expectation: Partner 0 receives OnNewInjectedEntity. Partner 1 receives OnNewEntity and OnDeletedEntity
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 12345)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousVolatileEntity, 12345)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Blabla</value></member></members></object>

==========================================================================
TESTCASE 815
Description: Test of overregistration of a handler for a synchronous volatile persistence type. The instance is deleted by the new registerer when injected.
Expectation: Node 0 receives OnInitialInjectionsDone and OnRevokedRegistration. Node 1 receives OnNewEntity and OnDeletedEntity. Node 2 receives OnInjectedNewEntity and OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 123)
  Owner     = DEFAULT_HANDLER
  OwnerConn = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  OwnerStr  = DEFAULT_HANDLER
  Entity    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Kalle</value></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnDeletedEntity:
  EntityId       = (DoseTest.SynchronousVolatileEntity, 123)
  deletedByOwner = false
  Owner          = DEFAULT_HANDLER
  OwnerStr  = DEFAULT_HANDLER
  Previous  = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Kalle</value></member></members></object>

==========================================================================
TESTCASE 830
Description: Test of volatile persistence with two different handlers for the same type
Expectation: Partner 0 receives OnNewInjectedEntity for instance 678678. Partner 1 receives OnNewInjectedEntity for instance 353535
--------- Setup -----------
Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P1_HANDLER

--------- Test  -----------
Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 353535)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Partner1SnickSnack</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = 1962097528835644014

==========================================================================
TESTCASE 850
Description: Check that ghost instances get dispatched to correct handler when there are sevaral handlers for a type.
Expectation: Partner 0 receives no OnNewInjectedEntity. Partner 0 receives one OnNewInjectedEntity for instance 353535.
--------- Setup -----------
Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = P1_HANDLER

--------- Test  -----------
Consumer 1: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 353535)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Partner1SnickSnack</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 1: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = 1962097528835644014

==========================================================================
TESTCASE 900
Description: Test of sending and subscribing of global messages in different contexts
Expectation: Partner 0 recieves one global message with info "context 0". Partner 1 recieves one global message with info "context 1".
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.GlobalMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;1;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalMessage</name><members><member><name>Info</name><value xml:space="preserve">context 1</value></member></members></object>


==========================================================================
TESTCASE 901
Description: Test of sending and subscribing of a context shared message.
Expectation: Both partner 0 and partner 1 recieves the context shared message.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnMessage:
  Type       = DoseTest.ContextSharedMessage
  ChannelId  = DEFAULT_CHANNEL
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;0;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  ChannelId  = DEFAULT_CHANNEL
  Message    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ContextSharedMessage</name><members><member><name>Info</name><value xml:space="preserve">context shared info</value></member></members></object>


==========================================================================
TESTCASE 902
Description: Test of sending a context shared message from context != 0.
Expectation: Partner 0 gets a Software violation exception
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 910
Description: Test of registering/unregistering with different contexts
Expectation: Partner 0(context 0) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 911
Description: Test of registering/unregistering with different contexts. Registration subcriber in context 1.
Expectation: Partner 0 (context 1) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 912
Description: Test of registering/unregistering with different contexts
Expectation: P0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 920
Description: Testing of pending registration of global service handler in different contexts
Expectation: Both partner 1 and 2 should receive an OnCompletedRegistration.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 921
Description: Testing of pending registration of global service handler with contexts
Expectation: P0 should receive OnRegistered, OnUnregistered and OnRegistered of Global Service. P1 should receive OnRegistered and OnUnregistered. P2 should receive OnCompletedRegistration
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 922
Description: Testing of pending registration of global service handler with contexts
Expectation: P0 should receive OnRegistered and OnUnregistered. P1 should receive OnRegistered, OnUnregistered and OnRegistered. P2 should receive OnCompletedRegistration
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalService
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 925
Description: Test that a service request is sent to handler in correct context.
Expectation: Partner 1 (context 1) receives one OnServiceRequest. Partner 0 (context 0) receives no service request.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnServiceRequest: 
  Type       = DoseTest.GlobalService
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;1;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalService</name></object>

==========================================================================
TESTCASE 926
Description: Test that a service request on a ContextShared service can be sent from any context.
Expectation: P0 (context 0) receives two OnServiceRequest. P1 and P2 receive an OnResponse (DoseTest.SucessfullService)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulService
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulService</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ContextSharedService</name></object>

==========================================================================
TESTCASE 927
Description: Test of register a context shared service from context != 0.
Expectation: Partner 0 gets a Software violation exception
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 940
Description: Test of registering/unregistering entity handlers in different contexts
Expectation: Partner 0(context 0) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 941
Description: Test of registering/unregistering entity handlers in different contexts. Registration subcriber in context 1.
Expectation: Partner 0 (context 1) receives one OnRegistered and one OnUnregistered callback.
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 942
Description: Test of registering/unregistering entity handlers in different contexts
Expectation: P0 receives one OnRegistered and one OnUnregistered callback
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 950
Description: Testing of pending registration of global entity handler in different contexts
Expectation: Both partner 1 and 2 should receive one OnCompletedRegistration and one OnInitialInjectionsDone.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCompletedRegistration:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 951
Description: Testing of pending registration of global entity handler with contexts
Expectation: P0 should receive OnRegistered, OnUnregistered and OnRegistered of Global Entity. P1 should receive OnRegistered and OnUnregistered. P2 should receive OnCompletedRegistration and OnInitialInjectionsDone
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 952
Description: Testing of pending registration of global entity handler with contexts
Expectation: P0 should receive OnRegistered and OnUnregistered. P1 should receive OnRegistered, OnUnregistered and OnRegistered. P2 should receive OnCompletedRegistration and OnInitialInjectionsDone
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnUnregistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

Consumer 1: OnRegistered:
  Type      = DoseTest.GlobalEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 955
Description: Test that an entity create request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnCreateRequest. P0 (context 0) receives no entity create request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnCreateRequest (Requestor decides instance id): 
  Entity     = (DoseTest.GlobalEntity, 543543)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;1;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">Created</value></member></members></object>

==========================================================================
TESTCASE 956
Description: Test that an entity update request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnUpdateRequest. P0 (context 0) receives no entity update request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;1;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">BlaBla</value></member></members></object>

==========================================================================
TESTCASE 957
Description: Test that an entity delete request is sent to handler in correct context.
Expectation: P1 (context 1) receives one OnDeleteRequest. P0 (context 0) receives no entity delete request. P2 receives one OnResponse.
--------- Setup -----------
--------- Test  -----------
Consumer 1: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>1</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_1;1;partner_test_connection;2</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = DEFAULT_HANDLER
  HandlerStr = DEFAULT_HANDLER

==========================================================================
TESTCASE 960
Description: Test that an entity create request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnCreateRequest(instance 111 and 222). P1 and P2 receive an OnResponse (DoseTest.SuccessfulCreate)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulCreate
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulCreate</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ContextSharedEntity</name><members><member><name>Info</name><value xml:space="preserve">Create request from context 0</value></member></members></object>

==========================================================================
TESTCASE 961
Description: Test that an entity update request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnUpdateRequest. P1 and P2 receive an OnResponse (DoseTest.Success)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.Success
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.Success</name><members><member><name>Info</name><value xml:space="preserve">Succesful response</value></member></members></object>
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.ContextSharedEntity</name><members><member><name>Info</name><value xml:space="preserve">Update request from context 0</value></member></members></object>

==========================================================================
TESTCASE 962
Description: Test that an entity delete request on a ContextShared entity can be sent from any context.
Expectation: P0 (context 0) receives two OnDeleteRequest. P1 and P2 receive an OnResponse (DoseTest.SuccessfulDelete)
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnResponse:
  Type       = DoseTest.SuccessfulDelete
  IsSuccess  = true
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;partner_test_connection;0</value></member><member><name>ConnectionId</name></member></members></object>
  Response   = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SuccessfulDelete</name><members><member><name>Info</name><value xml:space="preserve">AutoResponse</value></member></members></object>
  Request    = DeleteRequest on (DoseTest.ContextSharedEntity, 345)

==========================================================================
TESTCASE 965
Description: Test that a connection in context 0 "sees" only entities in context 0.
Expectation: P0 "sees" one GlobalEntity instance (321).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 966
Description: Test that a connection in context 1 "sees" entities in context 1 and ContextShared entities.
Expectation: P2 "sees" one ContextSharedEntity instance (2222) and one GlobalEntity2 instance (3333).
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 970
Description: Test that ghosts from correct context is injected
Expectation: P0 receives OnNewInjectedEntity with SynchronousVolatileEntity (inst 54321), member 'Info' has value "Context 0". P1 receives OnNewInjectedEntity with SynchronousVolatileEntity (inst 54321), member 'Info' has value "Context 1".
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnInjectedNewEntity:
  EntityId  = (DoseTest.SynchronousVolatileEntity, 54321)
  Injection = <object xmlns="urn:safir-dots-unit"><name>DoseTest.SynchronousVolatileEntity</name><members><member><name>Info</name><value xml:space="preserve">Context 1</value></member><member><name>MoreInfo</name></member></members></object>
  Changed top-level members: 
    Info
    MoreInfo

Consumer 0: OnInitialInjectionsDone:
  Type      = DoseTest.SynchronousVolatileEntity
  HandlerId = DEFAULT_HANDLER

==========================================================================
TESTCASE 980
Description: Test to read the current context for a connection.
Expectation: Partner 0 's test connection is opened in context 0 and Partner 1 's test connection is opened in context 1
--------- Setup -----------
--------- Test  -----------
Consumer 0: The test connection is opened in context 1
==========================================================================
TESTCASE 1000
Description: Test a foreach update request with a brief response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful brief response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">KalleKula</value></member></members></object>

==========================================================================
TESTCASE 1001
Description: Test a foreach update request with a brief response containing both one successful and two unsuccessful response.
Expectation: Partner 1 and 2 should get an update request. Partner 0 should get a brief response with one success and two errors. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">KalleKula</value></member></members></object>

==========================================================================
TESTCASE 1002
Description: Test a foreach update request with a full response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful full response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">KalleKula</value></member></members></object>

==========================================================================
TESTCASE 1003
Description: Test a foreach update request with a full response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get an update request. Partner 0 should get a full response with one success and one error. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">KalleKula</value></member></members></object>

==========================================================================
TESTCASE 1004
Description: Test a foreach update request with a immediate response
Expectation: Partner 1 and 2 should get an update request and partner 0 should get a successful immediate response. The read instances should have the Info element set to KalleKula
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnUpdateRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630
  Request    = <object xmlns="urn:safir-dots-unit"><name>DoseTest.GlobalEntity</name><members><member><name>Info</name><value xml:space="preserve">KalleKula</value></member></members></object>

==========================================================================
TESTCASE 1005
Description: Test a foreach delete request with a brief response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful brief response. The read of the instances should give Not Found
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630

==========================================================================
TESTCASE 1006
Description: Test a foreach delete request with a brief response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get a delete request. Partner 0 should get a brief response with one success and one error. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630

==========================================================================
TESTCASE 1007
Description: Test a foreach delete request with a full response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful full response. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630

==========================================================================
TESTCASE 1008
Description: Test a foreach delete request with a full response containing both a successful and an unsuccessful response.
Expectation: Partner 1 and 2 should get a delete request. Partner 0 should get a full response with one success and one error. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630

==========================================================================
TESTCASE 1009
Description: Test a foreach delete request with a immediate response
Expectation: Partner 1 and 2 should get a delete request and partner 0 should get a successful immediate response. The read of the instances should give NotFound
--------- Setup -----------
--------- Test  -----------
Consumer 0: OnDeleteRequest: 
  Entity     = (DoseTest.GlobalEntity, 123)
  Sender     = <object xmlns="urn:safir-dots-unit"><name>Safir.Dob.ConnectionInfo</name><members><member><name>NodeNumber</name><value>0</value></member><member><name>ConnectionName</name><value xml:space="preserve">Server_0;0;ForEach-context0;0</value></member><member><name>ConnectionId</name></member></members></object>
  Handler    = -5453762115588730630
  HandlerStr = -5453762115588730630

==========================================================================
TESTCASE 1100
Description: Test of the backdoor keeper.
Expectation: Partner 0 shall report: 1.Backdoor is not started. 2.Backdoor is started. 3.Received command "test-command 2 olle" 4.Backdoor is not started. 5.Backdoor is started. 6.Received command "test-command 4 bertil bertilsson".
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 1101
Description: Test that a backdoor keeper can be "restarted" when the main connection has been closed and opened in a different context.
Expectation: Partner 0 shall receive command "test-command 1" and "test-command 3"
--------- Setup -----------
--------- Test  -----------
==========================================================================
TESTCASE 9999
Description: Empty Test case
Expectation: Nothing
--------- Setup -----------
--------- Test  -----------

#!/usr/bin/env python
# -*- coding: utf-8 -*-
###############################################################################
#
# Copyright Saab AB, 2012-2013 (http://safirsdkcore.com)
#
# Created by: Lars Hagstrom (lars@foldspace.nu)
#
###############################################################################
#
# This file is part of Safir SDK Core.
#
# Safir SDK Core is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# Safir SDK Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Safir SDK Core.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
from __future__ import print_function
import sys, os, shutil, xml.dom.minidom, glob, time, subprocess, re

def log(*args, **kwargs):
    print(*args, **kwargs)
    sys.stdout.flush()

class Parameters:
    def __init__(self):
        from optparse import OptionParser
        import tempfile

        parser = OptionParser()
        parser.add_option("--driver", action="store",type="choice",choices=("mimer","mysql","postgres","ms-sql"),dest="driver",default=False,
                          help="Database engine to test against")
        parser.add_option("--hostname", action="store",dest="hostname",default="localhost",
                          help="Hostname of the database server")
        parser.add_option("--database", action="store",dest="database",
                          help="Database to connect to")

        (options,args) = parser.parse_args()

        if not options.driver:
            log("Need --driver argument")
            sys.exit(1)

        if not options.database:
            log("Need --database argument")
            sys.exit(1)

        self.driver = options.driver

        if self.driver == "mimer":
            driver = os.environ.get("MIMER_ODBC_DRIVER_NAME")
            if driver is None:
                driver = "MIMER"
        elif self.driver == "mysql":
            driver = os.environ.get("MYSQL_ODBC_DRIVER_NAME")
            if driver is None:
                driver = "MySQL"
        elif self.driver == "ms-sql":
            driver = os.environ.get("MSSQL_ODBC_DRIVER_NAME")
            if driver is None:
                driver = "SQL Server"
        elif self.driver == "postgres":
            driver = os.environ.get("POSTGRESQL_ODBC_DRIVER_NAME")
            if driver is None:
                driver = "PostgreSQL"

        #set up the connection string, starting with the driver specific parts
        if self.driver == "mimer":
            self.connection_string = "Driver={{{driver}}};Protocol=tcp;Node={hostname};"
        elif self.driver == "mysql":
            self.connection_string = "DRIVER={{{driver}}};Server={hostname};charset=utf8;"
        elif self.driver == "ms-sql":
            self.connection_string = "Driver={{{driver}}};Server={hostname};"
        elif self.driver == "postgres":
            self.connection_string = "Driver={{{driver}}};Server={hostname};ByteaAsLongVarBinary=1;"

        self.connection_string += "Database={database};Uid=dopeuser;Pwd=dopeuser"

        self.connection_string = self.connection_string.format(driver = driver,
                                                               hostname = options.hostname,
                                                               database = options.database)

        log("Using connection string", self.connection_string)
        os.environ["DOPE_TEST_ODBC_CONNECT_STRING"] = self.connection_string

        os.environ["DOPE_TEST_XML_DATA_COLUMN_IS_UTF8"] = str(sys.platform != "win32")

run_sql_pattern = re.compile(r"Got ([0-9]+) rows.")

def run_sql(parameters,statement):
    process = subprocess.Popen(("run_sql",
                                "--connection-string", parameters.connection_string,
                                "--statement", statement),
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT,
                               universal_newlines=True)
    output = process.communicate()[0]
    if process.returncode != 0:
        log("Unexpected return code when running statement:", statement)
        log(output)
        sys.exit(1)
    match = run_sql_pattern.search(output)
    try:
        return int(match.group(1))
    except Exception as e:
        log("Failed to get rows out of output:")
        log(output)
        sys.exit(1)

def count_rows(parameters):
    return run_sql(parameters,"select typeid from PersistentEntity")

def count_big(parameters):
    return run_sql(parameters,"select typeid from PersistentEntity where binarydata is not null")

def count_small(parameters):
    return run_sql(parameters,"select typeid from PersistentEntity where binarysmalldata is not null")

def delete_all_rows(parameters):
    return run_sql(parameters,"delete from PersistentEntity")

def count_xml(parameters):
    return run_sql(parameters,"select typeid from PersistentEntity where xmldata is not null")

def count_binares(parameters):
    return run_sql(parameters,"select typeid from PersistentEntity where binarydata is not null or binarysmalldata is not null")

def delete_binary(parameters):
    return run_sql(parameters,"update PersistentEntity set binarydata=null,binarysmalldata=null")

#This relies on the fact that we're installed in the bin directory on both linux and windows.
install_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)),"..")

dose_main_path = os.path.join(install_dir,"bin","dose_main" + (".exe" if sys.platform == "win32" else ""))
#Get the default dou directory and set it as an environment variable that can be
#picked up by the typesystem.ini that belongs to the test suite.
#Note: The last part of this path is set by cmake during configuration/installation.
os.environ["SAFIR_TEST_SUITE_DOU_DIRECTORY"] = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_DOU_BASE@")


#Note: Last half of path is set by cmake during configuration/installation.
test_data_directory = os.path.join(install_dir, "@SAFIR_INSTALL_DESTINATION_TEST_DATA@")

#Set up to use our own test configuration
os.environ["SAFIR_TEST_CONFIG_OVERRIDE"] = os.path.join(test_data_directory,
                                                        "dope",
                                                        "test_config")

sys.path.append(os.path.join(install_dir,
                             "@SAFIR_INSTALL_DESTINATION_TEST_DATA@",
                             "python"))

from testenv import TestEnv, TestEnvStopper

env = None

parameters = Parameters()
try:

    log("== Clear the db")
    delete_all_rows(parameters)

    log ("== Find out how many entities entity_owner will set")
    num_str = subprocess.check_output(("entity_owner","num"), universal_newlines=True)
    NUM_SMALL = int(re.search(r"NUM_SMALL = ([0-9]+)",num_str).group(1))
    NUM_BIG = int(re.search(r"NUM_BIG = ([0-9]+)",num_str).group(1))
    log ("NUM_SMALL = " + str(NUM_SMALL) + " and NUM_BIG = " + str(NUM_BIG))

    log("== Set a bunch of entities")
    env = TestEnv("safir_control", dose_main_path, "dope_main", "safir_show_config")
    with TestEnvStopper(env):
        env.launchProcess("entity_owner", ("entity_owner","set")).wait()
        log("waiting for", NUM_BIG + NUM_SMALL, "entities in db")
        while count_rows(parameters) != NUM_BIG + NUM_SMALL:
            time.sleep(1)

    syslog_output = env.Syslog()
    if len(syslog_output) != 0:
        log("Unexpected syslog output:\n" + syslog_output)
        sys.exit(1)

    if not env.ReturnCodesOk():
        log("Some process exited with an unexpected value")
        sys.exit(1)

    log("== See if dope loads them at startup")
    env = TestEnv("safir_control", dose_main_path, "dope_main", "safir_show_config")
    with TestEnvStopper(env):
        env.launchProcess("entity_owner", ("entity_owner","accept")).wait()

    syslog_output = env.Syslog()
    if len(syslog_output) != 0:
        log("Unexpected syslog output:\n" + syslog_output)
        sys.exit(1)

    if not env.ReturnCodesOk():
        log("Some process exited with an unexpected value")
        sys.exit(1)

    output = env.Output("entity_owner")
    if output.count("OnInjectedNewEntity") != NUM_BIG + NUM_SMALL:
        log("could not find the right number of 'OnInjectedNewEntity' in output")
        sys.exit(1)

    if output.count("<DopeTest.SmallEntity>") != NUM_SMALL:
        log("could not find the right number of 'DopeTest.SmallEntity' in output")
        sys.exit(1)

    if output.count("Correct string!") != NUM_SMALL or output.count("Incorrect string!") != 0:
        log("Unicode string check failed")
        sys.exit(1)

    if count_small(parameters) != NUM_SMALL:
        log("could not find the right number of entries in the small column in the database")
        sys.exit(1)

    if output.count("<DopeTest.BigEntity>") != NUM_BIG:
        log("could not find the right number of 'DopeTest.BigEntity' in output")
        sys.exit(1)

    if count_big(parameters) != NUM_BIG:
        log("could not find the right number of entries in the big column in the database")
        sys.exit(1)


    if count_xml(parameters) != 0:
        log("Unexpected xml data found!")
        sys.exit(1)

    log("== Convert binaries to xml")

    #db is automatically chosen by parameter setting
    subprocess.call("dope_bin2xml")

    if count_xml(parameters) != NUM_BIG + NUM_SMALL or count_rows(parameters) != NUM_BIG + NUM_SMALL:
        log("dope_bin2xml appears to have failed")
        sys.exit(1)

    #remove bin to check that dope can load xml
    delete_binary(parameters)
    if count_small(parameters) != 0 or count_big(parameters):
        log("Failed to delete binaries")
        sys.exit(1)

    log("== Check that dope can load xml")

    env = TestEnv("safir_control", dose_main_path, "dope_main", "safir_show_config")
    with TestEnvStopper(env):
        env.launchProcess("entity_owner", ("entity_owner","accept")).wait()

    syslog_output = env.Syslog()
    if len(syslog_output) != 0:
        log("Unexpected syslog output:\n" + syslog_output)
        sys.exit(1)

    if not env.ReturnCodesOk():
        log("Some process exited with an unexpected value")
        sys.exit(1)

    output = env.Output("entity_owner")
    if output.count("OnInjectedNewEntity") != NUM_BIG + NUM_SMALL:
        log("could not find the right number of 'OnInjectedNewEntity' in output")
        sys.exit(1)

    if output.count("<DopeTest.SmallEntity>") != NUM_SMALL:
        log("could not find the right number of 'DopeTest.SmallEntity' in output")
        sys.exit(1)

    if output.count("Correct string!") != NUM_SMALL or output.count("Incorrect string!") != 0:
        log("Unicode string check failed")
        print(output)
        sys.exit(1)

    if output.count("<DopeTest.BigEntity>") != NUM_BIG:
        log("could not find the right number of 'DopeTest.BigEntity' in output")
        sys.exit(1)

    if count_big(parameters) != NUM_BIG or count_small(parameters) != NUM_SMALL:
        log("xml does not appear to have been translated into binaries")
        sys.exit(1)

    if count_xml(parameters) != 0:
        log("Unexpected xml found!")
        sys.exit(1)

    log("== update the entities")
    env = TestEnv("safir_control", dose_main_path, "dope_main", "safir_show_config")
    with TestEnvStopper(env):
        #remove all bin binaries (that have been loaded by dope by now), so
        #that we can wait for all entities to be written again
        #problem is that dope is rewriting them...
        while count_binares(parameters) != 0:
            delete_binary(parameters)
            time.sleep(1)

        env.launchProcess("entity_owner", ("entity_owner","update")).wait()

        log("waiting for", NUM_BIG + NUM_SMALL,  "entities in db")
        while count_binares(parameters) != NUM_BIG + NUM_SMALL:
            time.sleep(1)

    syslog_output = env.Syslog()
    if len(syslog_output) != 0:
        log("Unexpected syslog output:\n" + syslog_output)
        sys.exit(1)

    if not env.ReturnCodesOk():
        log("Some process exited with an unexpected value")
        sys.exit(1)

    log("== Load them again and check output")
    env = TestEnv("safir_control", dose_main_path, "dope_main", "safir_show_config")
    with TestEnvStopper(env):
        env.launchProcess("entity_owner", ("entity_owner","accept")).wait()

    syslog_output = env.Syslog()
    if len(syslog_output) != 0:
        log("Unexpected syslog output:\n" + syslog_output)
        sys.exit(1)

    if not env.ReturnCodesOk():
        log("Some process exited with an unexpected value")
        sys.exit(1)

    output = env.Output("entity_owner")
    if output.count("name is changed") != NUM_SMALL:
        log("could not find the right number of updated SmallEntity in output")
        sys.exit(1)

    if output.count("Correct string!") != NUM_SMALL or output.count("Incorrect string!") != 0:
        log("Unicode string check failed")
        sys.exit(1)

    if output.count("99999999") != NUM_BIG:
        log("could not find the right number of updated BigEntity in output")
        sys.exit(1)

except:
    log("Unexpected exception!")
    if env is not None:
        syslog_output = env.Syslog()
        if len(syslog_output) != 0:
            log("syslog output:\n" + syslog_output)
    raise

finally:
    log("== Clear the db")
    delete_all_rows(parameters)

log("Success")
sys.exit(0)

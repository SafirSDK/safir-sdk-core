@@-------------------------------------------------------------------------------
@@--
@@--  Copyright Saab AB, 2005-2013,2015 (http://safirsdkcore.com)
@@--
@@--  Created by: Henrik Sundberg / sthesu
@@--
@@-------------------------------------------------------------------------------
@@IF@@ @_SECTION_@ = "Parameters"
File_Suffix:".cs"
Filename_Separator:"."
Output_Directory:"dotnet/"
Namespace_Separator:"."
@@-- Namspace prefixes are defined separately, since they are supposed to differ between projects.
@@-- Files matching <Namespace><Namespace_Prefix_File_Suffix> are searched for a line containing the namespace prefix
@@-- to use for <Namespace>. E.g. Namespace_Prefix_File_Prefix:"-java.namespace.txt" will match the file
@@-- "Safir-java.namespace.txt". The first non comment line in the file is used as namespace prefix.
@@-- Empty value is used when no namespace prefixes are to be added.
Namespace_Prefix_File_Suffix:""
@@-- Parent filename "" defaults to the namespace with added file suffix.
Parent_Filename:""
@@
@@ *_Underscore_Style is one of: "Add", "Remove", "Keep"
@@
Namespace_Underscore_Style:"Keep"
Filename_Underscore_Style:"Keep"
Classname_Underscore_Style:"Keep"
Membername_Underscore_Style:"Keep"
Enum_Value_Underscore_Style:"Keep"
@@
@@ *_Case_Style is one of: "Upper", "Lower", "Camel", "Keep"
@@
Namespace_Case_Style:"Keep"
Filename_Case_Style:"Keep"
Classname_Case_Style:"Keep"
Membername_Case_Style:"Keep"
Enum_Value_Case_Style:"Keep"
Object_Type:"Object"
Index_Type:"Int32"
@@--
@@-- Exceptions are defined like this:
@@--   Exception:<dou>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Exception:illegalValue:"Safir::Dots::IllegalValue":"dots/dots_defs"
@@-- defines "illegalValue" as an exceptionname in the xml-syntax (dou-file).
@@-- And "Safir::Dots::IllegalValue" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Exception:Exception:"Safir.Dob.Typesystem.Exception":""
Exception:FundamentalException:"Safir.Dob.Typesystem.FundamentalException":""
Exception:Safir.Dob.Typesystem.ConfigurationError:"Safir.Dob.Typesystem.ConfigurationErrorException":""
Exception:Safir.Dob.Typesystem.IncompatibleTypes:"Safir.Dob.Typesystem.IncompatibleTypesException":""
Exception:Safir.Dob.Typesystem.IllegalValue:"Safir.Dob.Typesystem.IllegalValueException":""
Exception:Safir.Dob.Typesystem.NullValue:"Safir.Dob.Typesystem.NullValueException":""
Exception:Safir.Dob.Typesystem.SoftwareViolation:"Safir.Dob.Typesystem.SoftwareViolationException":""
@@--
@@-- Types are defined like this:
@@--   Type:<dou>:<set/get>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Type:String:String:"Safir::Dots::String":"dots/dots_defs"
@@-- defines "String" as a typename in the xml-syntax (dou-file).
@@-- And "String" to be the @_UNIFORM_MEMBERTYPE_@, used in the name of Set/Get routines.
@@-- And "Safir::Dots::String" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Type:Int32:Int32:"System.Int32":""
Type:Int64:Int64:"System.Int64":""
Type:Float32:Float32:"System.Single":""
Type:Float64:Float64:"System.Double":""
Type:Boolean:Boolean:"bool":""
Type:String:String:"string":""
Type:EntityId:EntityId:"Safir.Dob.Typesystem.EntityId":""
Type:TypeId:TypeId:"System.Int64":""
Type:InstanceId:InstanceId:"Safir.Dob.Typesystem.InstanceId":""
Type:ChannelId:ChannelId:"Safir.Dob.Typesystem.ChannelId":""
Type:HandlerId:HandlerId:"Safir.Dob.Typesystem.HandlerId":""
Type:Binary:Binary:"byte[]":""
Type:Object:Object:"Safir.Dob.Typesystem.Object":""
Type:Ampere32:Si32.Ampere:"System.Single":""
Type:CubicMeter32:Si32.CubicMeter:"System.Single":""
Type:Hertz32:Si32.Hertz:"System.Single":""
Type:Joule32:Si32.Joule:"System.Single":""
Type:Kelvin32:Si32.Kelvin:"System.Single":""
Type:Kilogram32:Si32.Kilogram:"System.Single":""
Type:Meter32:Si32.Meter:"System.Single":""
Type:MeterPerSecond32:Si32.MeterPerSecond:"System.Single":""
Type:MeterPerSecondSquared32:Si32.MeterPerSecondSquared:"System.Single":""
Type:Newton32:Si32.Newton:"System.Single":""
Type:Pascal32:Si32.Pascal:"System.Single":""
Type:Radian32:Si32.Radian:"System.Single":""
Type:RadianPerSecond32:Si32.RadianPerSecond:"System.Single":""
Type:RadianPerSecondSquared32:Si32.RadianPerSecondSquared:"System.Single":""
Type:Second32:Si32.Second:"System.Single":""
Type:SquareMeter32:Si32.SquareMeter:"System.Single":""
Type:Steradian32:Si32.Steradian:"System.Single":""
Type:Volt32:Si32.Volt:"System.Single":""
Type:Watt32:Si32.Watt:"System.Single":""
Type:Ampere64:Si64.Ampere:"System.Double":""
Type:CubicMeter64:Si64.CubicMeter:"System.Double":""
Type:Hertz64:Si64.Hertz:"System.Double":""
Type:Joule64:Si64.Joule:"System.Double":""
Type:Kelvin64:Si64.Kelvin:"System.Double":""
Type:Kilogram64:Si64.Kilogram:"System.Double":""
Type:Meter64:Si64.Meter:"System.Double":""
Type:MeterPerSecond64:Si64.MeterPerSecond:"System.Double":""
Type:MeterPerSecondSquared64:Si64.MeterPerSecondSquared:"System.Double":""
Type:Newton64:Si64.Newton:"System.Double":""
Type:Pascal64:Si64.Pascal:"System.Double":""
Type:Radian64:Si64.Radian:"System.Double":""
Type:RadianPerSecond64:Si64.RadianPerSecond:"System.Double":""
Type:RadianPerSecondSquared64:Si64.RadianPerSecondSquared:"System.Double":""
Type:Second64:Si64.Second:"System.Double":""
Type:SquareMeter64:Si64.SquareMeter:"System.Double":""
Type:Steradian64:Si64.Steradian:"System.Double":""
Type:Volt64:Si64.Volt:"System.Double":""
Type:Watt64:Si64.Watt:"System.Double":""
@@--
@@--
@@--
@@--
@@--
@@--
@@ELSIF@@ @_SECTION_@ = "Code"
@@--
@@-- HEADER
@@--
using System;

namespace @_NAMESPACE_@
{
@@IF@@ @_UNITTYPE_@=property
@@--
@@-- PROPERTY
@@--

    /// <summary>
@@IF@@ @_EXIST:CLASSSUMMARY_@
    /// @_REPLACE_ALL(\n/\n    /// ):CLASSSUMMARY_@
@@ELSE@@
    /// No description given in dou file.
@@END_IF@@
    /// </summary>
    public class @_CLASS_@
    {
        /// <summary>
        /// Check if a certain object has this property mapped on it.
        /// </summary>
        public static bool HasProperty(Safir.Dob.Typesystem.Object obj)
        {
            return Safir.Dob.Typesystem.Operations.HasProperty(obj.GetTypeId(), ClassTypeId);
        }

        #region Property members

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
        /// <summary>
        /// Get the array size of the @_MEMBER_@ member.
        /// </summary>
        public static System.Int32 @_MEMBER_@ArraySize(Safir.Dob.Typesystem.Object obj)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.GetArraySize(obj.GetTypeId(), ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex);
        }

        /// <summary>
        /// Set a value in the @_MEMBER_@ array property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public static void Set@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index, @_MEMBERTYPE_@.Enumeration val)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetEnum(obj, ClassTypeId, (System.Int32) val, m_@_LOWER:MEMBER_@MemberIndex, index);
        }

        /// <summary>
        /// Set a value in the @_MEMBER_@ enumeration array property member using an integer ordinal.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static void SetOrdinal@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index, System.Int32 ordinal)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetEnum(obj, ClassTypeId, ordinal, m_@_LOWER:MEMBER_@MemberIndex, index);
        }
@@ELSE@@
        public static void Set@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index, @_MEMBERTYPE_@ val)
        {
            Init();
            Safir.Dob.Typesystem.Properties.Set(obj, ClassTypeId, val, m_@_LOWER:MEMBER_@MemberIndex, index);
        }
@@END_IF@@

        /// <summary>
        /// Set an index in the @_MEMBER_@ array property member to null.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static void SetNull@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetNull(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, index);
        }

        /// <summary>
        /// Check if an index in the @_MEMBER_@ array property member is null.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsNull@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsNull(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, index);
        }

        /// <summary>
        /// Check if an index in the @_MEMBER_@ array property member is changed.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsChanged@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsChanged(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, index);
        }

        /// <summary>
        /// Check if an index in the @_MEMBER_@ property member is read only, i.e. it is mapped to null or to a parameter.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsReadOnly@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsReadOnly(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, index);
        }

        /// <summary>
        /// Get the value of the @_MEMBER_@ array property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public static @_MEMBERTYPE_@ Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            Safir.Dob.Typesystem.Object val;
            Init();
            Safir.Dob.Typesystem.Properties.Get(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, index);
@@IF@@ @_MEMBERTYPE_@="Safir.Dob.Typesystem.Object"
            return val;
@@ELSE@@
            return (@_MEMBERTYPE_@)val;
@@END_IF@@
        }
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public static @_MEMBERTYPE_@.Enumeration Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            System.Int32 val;
            Init();
            Safir.Dob.Typesystem.Properties.GetEnum(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, index);
            return (@_MEMBERTYPE_@.Enumeration) val;
        }

        /// <summary>
        /// Get the ordinal value of the @_MEMBER_@ array property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static System.Int32 GetOrdinal@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            System.Int32 val;
            Init();
            Safir.Dob.Typesystem.Properties.GetEnum(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, index);
            return val;
        }
@@ELSE@@
        public static @_MEMBERTYPE_@ Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 index)
        {
            @_MEMBERTYPE_@ val;
            Init();
            Safir.Dob.Typesystem.Properties.Get(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, index);
            return val;
        }
@@END_IF@@
@@ELSE@@
        /// <summary>
        /// Set the value of the @_MEMBER_@ property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        /// <param name="obj">The object in which to change the value</param>
        /// <param name="val">The value to set</param>
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public static void Set@_MEMBER_@(Safir.Dob.Typesystem.Object obj, @_MEMBERTYPE_@.Enumeration val)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetEnum(obj, ClassTypeId, (System.Int32) val, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }

        /// <summary>
        /// Set the value of the @_MEMBER_@ enumeration member using an integer ordinal.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static void SetOrdinal@_MEMBER_@(Safir.Dob.Typesystem.Object obj, System.Int32 ordinal)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetEnum(obj, ClassTypeId, ordinal, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }
@@ELSE@@
        public static void Set@_MEMBER_@(Safir.Dob.Typesystem.Object obj, @_MEMBERTYPE_@ val)
        {
            Init();
            Safir.Dob.Typesystem.Properties.Set(obj, ClassTypeId, val, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }
@@END_IF@@

        /// <summary>
        /// Set the @_MEMBER_@ property member to null.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static void SetNull@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            Init();
            Safir.Dob.Typesystem.Properties.SetNull(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }

        /// <summary>
        /// Check if the @_MEMBER_@ property member is null.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsNull@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsNull(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }

        /// <summary>
        /// Check if the @_MEMBER_@ property member is changed.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsChanged@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsChanged(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }

        /// <summary>
        /// Check if the @_MEMBER_@ property member read only, i.e. it is mapped to null or to a parameter.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static bool IsReadOnly@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            Init();
            return Safir.Dob.Typesystem.Properties.IsReadOnly(obj, ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex, 0);
        }

        /// <summary>
        /// Get the value of the @_MEMBER_@ property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public static @_MEMBERTYPE_@ Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            Safir.Dob.Typesystem.Object val;
            Init();
            Safir.Dob.Typesystem.Properties.Get(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, 0);
@@IF@@ @_MEMBERTYPE_@="Safir.Dob.Typesystem.Object"
            return val;
@@ELSE@@
            return (@_MEMBERTYPE_@)val;
@@END_IF@@
        }
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public static @_MEMBERTYPE_@.Enumeration Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            System.Int32 val;
            Init();
            Safir.Dob.Typesystem.Properties.GetEnum(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, 0);
            return (@_MEMBERTYPE_@.Enumeration) val;
        }

        /// <summary>
        /// Get the ordinal value of the @_MEMBER_@ property member.
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static System.Int32 GetOrdinal@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            System.Int32 val;
            Init();
            Safir.Dob.Typesystem.Properties.GetEnum(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, 0);
            return val;
        }
@@ELSE@@
        public static @_MEMBERTYPE_@ Get@_MEMBER_@(Safir.Dob.Typesystem.Object obj)
        {
            @_MEMBERTYPE_@ val;
            Init();
            Safir.Dob.Typesystem.Properties.Get(obj, ClassTypeId, out val, m_@_LOWER:MEMBER_@MemberIndex, 0);
            return val;
        }
@@END_IF@@
@@END_IF@@

@@END_IF@@
@@END_TABLE@@
        #endregion

        /// <summary>
        /// Type id for @_CLASS_@
        /// </summary>
        public static System.Int64 ClassTypeId = @_TYPEID_@;

        #region Indices

        private static void Init()
        {
            if (!m_isInit)
            {
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
                m_@_LOWER:MEMBER_@MemberIndex=Safir.Dob.Typesystem.Members.GetIndex(ClassTypeId, "@_MEMBER_@");
@@END_IF@@
@@END_TABLE@@
                m_isInit=true;
            }
        }


        private static bool m_isInit = false;

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
        private static System.Int32 m_@_LOWER:MEMBER_@MemberIndex = -1;
@@END_IF@@
@@END_TABLE@@
        #endregion
    }
@@ELSIF@@ @_UNITTYPE_@=class
@@--
@@-- CLASS
@@--

    /// <summary>
@@IF@@ @_EXIST:CLASSSUMMARY_@
    /// @_REPLACE_ALL(\n/\n    /// ):CLASSSUMMARY_@
@@ELSE@@
    /// No description given in dou file.
@@END_IF@@
    /// </summary>
    public class @_CLASS_@ : @_BASECLASS_@
    {
        #region Constructors

        /// <summary>
        /// Default constructor.
        /// </summary>
        public @_CLASS_@()
            : base()
        {
        }

        #endregion

        #region Create Routines

@@TABLE@@
        /// <summary>
@@IF@@ @_EXIST:CREATEROUTINESUMMARY_@
        /// @_REPLACE_ALL(\n/\n        /// ):CREATEROUTINESUMMARY_@
@@ELSE@@
        /// No description given in dou file.
@@END_IF@@
        /// </summary>
@@IF@@ @_EXIST:CREATEPARAMETER_@
        public static @_NAMESPACE_@.@_CLASS_@ Create@_CREATEROUTINE_@ (
@@ELSE@@
        public static @_NAMESPACE_@.@_CLASS_@ Create@_CREATEROUTINE_@ ()
@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
@@IF@@ @_EXIST:CREATEPARAMETERISLAST_@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
            @_CREATEPARAMETERTYPE_@.Enumeration @_CREATEPARAMETER_@)
@@ELSE@@
            @_CREATEPARAMETERTYPE_@ @_CREATEPARAMETER_@)
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
            @_CREATEPARAMETERTYPE_@.Enumeration @_CREATEPARAMETER_@,
@@ELSE@@
            @_CREATEPARAMETERTYPE_@ @_CREATEPARAMETER_@,
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
        {
            Init();
            @_NAMESPACE_@.@_CLASS_@ val = new @_NAMESPACE_@.@_CLASS_@();
@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
@@IF@@ @_EXIST:CREATEPARAMETERISARRAY_@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
            val.@_CREATEPARAMETER_@[0].Obj = @_CREATEPARAMETER_@;
@@ELSE@@
            val.@_CREATEPARAMETER_@[0].Val = @_CREATEPARAMETER_@;
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
            val.@_CREATEPARAMETER_@.Obj = @_CREATEPARAMETER_@;
@@ELSE@@
            val.@_CREATEPARAMETER_@.Val = @_CREATEPARAMETER_@;
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
@@TABLE@@
@@IF@@ @_EXIST:CREATEVALUE_@
@@IF@@ @_EXIST:CREATEVALUEISARRAY_@
#error Cannot set array members through create routine!
@@ELSIF@@ @_EXIST:CREATEVALUEPARAMETERINDEX_@
@@IF@@ @_UNIFORM_CREATEVALUETYPE_@=Object
@@IF@@ @_EXIST:CREATEVALUEISINLINE_@
# error Inline values in CreateRoutines with index not supported!
@@ELSE@@
            val.@_CREATEVALUE_@.Obj = @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@(@_CREATEVALUEPARAMETERINDEX_@);
@@END_IF@@
@@ELSE@@
@@IF@@ @_EXIST:CREATEVALUEISINLINE_@
# error Inline values in CreateRoutines with index not supported!
@@ELSE@@
            val.@_CREATEVALUE_@.Val = @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@(@_CREATEVALUEPARAMETERINDEX_@);
@@END_IF@@
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_CREATEVALUETYPE_@=Object
@@IF@@ @_EXIST:CREATEVALUEISINLINE_@

            // Inline set of object member @_CREATEVALUE_@ value
            System.Int32 tmp@_CREATEVALUE_@Index =
                Safir.Dob.Typesystem.Parameters.GetIndex(ClassTypeId, "@_CREATEVALUEPARAMETERRAW_@");
            val.@_CREATEVALUE_@.Obj = (@_CREATEVALUEMEMBERTYPE_@)Safir.Dob.Typesystem.Parameters.GetObject(ClassTypeId, tmp@_CREATEVALUE_@Index, 0);
@@ELSE@@
            val.@_CREATEVALUE_@.Obj = @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@;
@@END_IF@@
@@ELSE@@
@@IF@@ @_EXIST:CREATEVALUEISINLINE_@

            // Inline set of member @_CREATEVALUE_@ value
            System.Int32 tmp@_CREATEVALUE_@Index =
                Safir.Dob.Typesystem.Parameters.GetIndex(ClassTypeId, "@_CREATEVALUEPARAMETERRAW_@");
            val.@_CREATEVALUE_@.Val = Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_CREATEVALUETYPE_@(ClassTypeId, tmp@_CREATEVALUE_@Index, 0);
@@ELSE@@
            val.@_CREATEVALUE_@.Val = @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@;
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
            return val;
        }

@@END_TABLE@@
        #endregion

        #region Members

@@----- PARAMETERS --------
@@TABLE@@
@@IF@@ @_EXIST:PARAMETER_@
@@IF@@ @_EXIST:PARAMETERISARRAY_@
        /// <summary>
        /// Get the array size of the @_PARAMETER_@ member.
        /// </summary>
        public static System.Int32 @_PARAMETER_@ArraySize
        {
            get
            {
                Init();
                return Safir.Dob.Typesystem.Parameters.GetArraySize(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex);
            }
        }

        /// <summary>
        /// Get the value of the @_PARAMETER_@ array parameter.
@@IF@@ @_EXIST:PARAMETERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):PARAMETERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (System.Int32 index)
        {
            Init();
            return (@_PARAMETERTYPE_@)Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
        public static @_PARAMETERTYPE_@.Enumeration @_PARAMETER_@ (System.Int32 index)
        {
            Init();
            return (@_PARAMETERTYPE_@.Enumeration) Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Single
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Parameters.GetFloat32(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Double
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Parameters.GetFloat64(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSE@@
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (System.Int32 index)
        {
            Init();
            return Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@END_IF@@
@-------- dictionary parameter -----------
@@ELSIF@@ @_EXIST:PARAMETERISDICTIONARY_@
        /// <summary>
        /// Get the value of the @_PARAMETER_@ dictionary parameter.
@@IF@@ @_EXIST:PARAMETERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):PARAMETERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_PARAMETERDICTIONARYTYPE_@=Enumeration
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
        public static @_PARAMETERTYPE_@.Enumeration @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@.Enumeration key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, (Int32)key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return (@_PARAMETERTYPE_@.Enumeration) Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ (@_UNIFORM_PARAMETERTYPE_@ = Object)
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@.Enumeration key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, (Int32)key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return (@_PARAMETERTYPE_@)Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Single
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@.Enumeration key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, (Int32)key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.GetFloat32(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Double
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@.Enumeration key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, (Int32)key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.GetFloat64(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSE@@
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@.Enumeration key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, (Int32)key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
        public static @_PARAMETERTYPE_@.Enumeration @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@ key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return (@_PARAMETERTYPE_@.Enumeration) Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ (@_UNIFORM_PARAMETERTYPE_@ = Object)
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@ key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return (@_PARAMETERTYPE_@)Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Single
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@ key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.GetFloat32(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Double
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@ key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.GetFloat64(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@ELSE@@
        public static @_PARAMETERTYPE_@ @_PARAMETER_@ (@_PARAMETERDICTIONARYTYPE_@ key)
        {
            Init();
            var index = Safir.Dob.Typesystem.Parameters.DictionaryKeyToIndex(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, key);
            if (index<0)
            {
                throw new System.Collections.Generic.KeyNotFoundException ();
            }
            return Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, index);
        }
@@END_IF@@
@@END_IF@@
@-------- single parameter -----------
@@ELSE@@
        /// <summary>
        /// Get the value of the @_PARAMETER_@ parameter.
@@IF@@ @_EXIST:PARAMETERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):PARAMETERSUMMARY_@
@@END_IF@@
        /// </summary>
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
        public static @_PARAMETERTYPE_@ @_PARAMETER_@
        {
            get
            {
                Init();
                return (@_PARAMETERTYPE_@)Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, 0);
            }
        }
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
        public static @_PARAMETERTYPE_@.Enumeration @_PARAMETER_@
        {
            get
            {
                Init();
                return (@_PARAMETERTYPE_@.Enumeration) Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, 0);
            }
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Single
        public static @_PARAMETERTYPE_@ @_PARAMETER_@
        {
            get
            {
                Init();
                return Safir.Dob.Typesystem.Parameters.GetFloat32(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, 0);
            }
        }
@@ELSIF@@ @_PARAMETERTYPE_@=System.Double
        public static @_PARAMETERTYPE_@ @_PARAMETER_@
        {
            get
            {
                Init();
                return Safir.Dob.Typesystem.Parameters.GetFloat64(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, 0);
            }
        }
@@ELSE@@
        public static @_PARAMETERTYPE_@ @_PARAMETER_@
        {
            get
            {
                Init();
                return Safir.Dob.Typesystem.Parameters.Get@_UNIFORM_PARAMETERTYPE_@(ClassTypeId, m_@_LOWER:PARAMETER_@ParameterIndex, 0);
            }
        }
@@END_IF@@
@@END_IF@@

@@END_IF@@
@@END_TABLE@@

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
        /// <summary>
        /// Get the member index of the @_MEMBER_@ member
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static System.Int32 @_MEMBER_@MemberIndex
        {
            get
            {
                Init();
                return m_@_LOWER:MEMBER_@MemberIndex;
            }
        }

@@IF@@ @_EXIST:MEMBERISSTRING_@
        /// <summary>
        /// Get the maximum string length of the @_MEMBER_@ member
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static System.Int32 @_MEMBER_@MaxStringLength
        {
            get
            {
                Init();
                return m_@_LOWER:MEMBER_@Length;
            }
        }

@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
        /// <summary>
        /// Get the array size of the @_MEMBER_@ member
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
        public static System.Int32 @_MEMBER_@ArraySize
        {
            get
            {
                Init();
                return m_@_LOWER:MEMBER_@Size;
            }
        }

@@END_IF@@
        /// <summary>
        /// Get the value of the @_MEMBER_@ member
@@IF@@ @_EXIST:MEMBERSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n        /// ):MEMBERSUMMARY_@
@@END_IF@@
        /// </summary>
@@----------array member ---------------
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public @_MEMBERTYPE_@.EnumerationContainerArray @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public @_MEMBERTYPE_@ContainerArray @_MEMBER_@
@@ELSE@@
        public Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@ContainerArray @_MEMBER_@
@@END_IF@@
@@----------sequence member ---------------
@@ELSIF@@ @_EXIST:MEMBERISSEQUENCE_@
@@IF@@ (@_UNIFORM_MEMBERTYPE_@ = Enumeration)
        public @_MEMBERTYPE_@.EnumerationSequenceContainer @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public @_MEMBERTYPE_@SequenceContainer @_MEMBER_@
@@ELSE@@
        public Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@SequenceContainer @_MEMBER_@
@@END_IF@@
@@----------dictionary member ---------------
@@ELSIF@@ @_EXIST:MEMBERISDICTIONARY_@
@@IF@@ @_UNIFORM_MEMBERDICTIONARYTYPE_@=Enumeration
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration> @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@> @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
        public Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration> @_MEMBER_@
@@ELSE@@
        public Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@> @_MEMBER_@
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration> @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@> @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
        public Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@> @_MEMBER_@
@@ELSE@@
        public Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@> @_MEMBER_@
@@END_IF@@
@@END_IF@@
@@----------single member ---------------
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        public @_MEMBERTYPE_@.EnumerationContainer @_MEMBER_@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        public @_MEMBERTYPE_@Container @_MEMBER_@
@@ELSE@@
        public Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container @_MEMBER_@
@@END_IF@@
@@END_IF@@
        {
            get { return m_@_MEMBER_@Member; }
        }


@@END_IF@@
@@END_TABLE@@
        #endregion

        #region TypeId, Instance and EntityId

        /// <summary>
        /// Type id for the class @_CLASS_@
        /// </summary>
        public new const System.Int64 ClassTypeId = @_TYPEID_@;

        /// <summary>
        /// Get the type id of this object.
        /// </summary>
        public override System.Int64 GetTypeId()
        {
            return ClassTypeId;
        }

        #endregion

        #region Change flags

        /// <summary>
        /// Check if any member of this object is changed.
        /// <para>
        /// This method will recursively check if any member of the object has its change flag set.
        /// </para>
        /// </summary>
        /// <returns>True if any member has changed.</returns>
        override public bool IsChanged()
        {
            return
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
                m_@_MEMBER_@Member.IsChanged() ||
@@END_IF@@
@@END_TABLE@@
                base.IsChanged();
        }

        /// <summary>
        /// Recursively set change flags in all members of this object.
        /// </summary>
        /// <param name="changed">The value to set the change flags to.</param>
        override public void SetChanged(bool changed)
        {
            base.SetChanged(changed);
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
            m_@_MEMBER_@Member.SetChanged(changed);
@@END_IF@@
@@END_TABLE@@
        }

        #endregion

        #region Blob serialization and deserialization

        /// <summary>
        /// Create a(n) @_CLASS_@ from a blob reader handle.
        /// </summary>
        /// <param name="handle">Handle to blob reader.</param>
        public @_CLASS_@(System.Int64 handle)
            : base(handle)
        {
            Init();

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@

@@ --- Array member ---
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
            m_@_MEMBER_@Member = new @_MEMBERTYPE_@.EnumerationContainerArray(@_MEMBER_@ArraySize);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
            m_@_MEMBER_@Member = new @_MEMBERTYPE_@ContainerArray(@_MEMBER_@ArraySize);
@@ELSE@@
            m_@_MEMBER_@Member = new Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@ContainerArray(@_MEMBER_@ArraySize);
@@END_IF@@
            for (System.Int32 i = 0; i < @_MEMBER_@ArraySize; ++i)
            {
                Safir.Dob.Typesystem.Internal.BlobOperations.Get(m_@_MEMBER_@Member[i], handle, m_@_LOWER:MEMBER_@MemberIndex, i);
            }
@@ --- Sequence member ---
@@ELSIF@@ @_EXIST:MEMBERISSEQUENCE_@
            {
                int size = Safir.Dob.Typesystem.Internal.BlobOperations.NumberOfMemberValues(handle, m_@_LOWER:MEMBER_@MemberIndex);
                for (int valueIndex=0; valueIndex<size; valueIndex++)
                {
                    bool isNull, isChanged;
@@IF@@ (@_UNIFORM_MEMBERTYPE_@ = Enumeration)
                    Int32 ordinal;
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(out ordinal, out isNull, out isChanged, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex, Safir.Dob.Typesystem.KeyValMode.ValueMode);
                    m_@_MEMBER_@Member.Add((@_MEMBERTYPE_@.Enumeration)ordinal);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
                    Safir.Dob.Typesystem.Object seqVal;
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(out seqVal, out isNull, out isChanged, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex, Safir.Dob.Typesystem.KeyValMode.ValueMode);
                    m_@_MEMBER_@Member.Add((@_MEMBERTYPE_@)seqVal);
@@ELSE@@
                    @_MEMBERTYPE_@ seqVal;
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(out seqVal, out isNull, out isChanged, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex, Safir.Dob.Typesystem.KeyValMode.ValueMode);
                    m_@_MEMBER_@Member.Add(seqVal);
@@END_IF@@
                }
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
                m_@_MEMBER_@Member.SetChangedHere(Safir.Dob.Typesystem.Internal.BlobOperations.IsChangedTopLevel(handle,m_@_LOWER:MEMBER_@MemberIndex));
@@ELSE@@
                m_@_MEMBER_@Member.SetChanged(Safir.Dob.Typesystem.Internal.BlobOperations.IsChangedTopLevel(handle,m_@_LOWER:MEMBER_@MemberIndex));
@@END_IF@@
            }
@@----------dictionary member ---------------
@@ELSIF@@ @_EXIST:MEMBERISDICTIONARY_@
            {
                int size = Safir.Dob.Typesystem.Internal.BlobOperations.NumberOfMemberValues(handle, m_@_LOWER:MEMBER_@MemberIndex);
                for (int valueIndex=0; valueIndex<size; valueIndex++)
                {
                    bool dummy1, dummy2;
@@--                  -- KEY ---
@@IF@@ @_UNIFORM_MEMBERDICTIONARYTYPE_@=Enumeration
                    Int32 ordinal;
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(out ordinal, out dummy1, out dummy2, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex, Safir.Dob.Typesystem.KeyValMode.KeyMode);
                    @_MEMBERDICTIONARYTYPE_@.Enumeration key = (@_MEMBERDICTIONARYTYPE_@.Enumeration)ordinal;
@@ELSE@@
                    @_MEMBERDICTIONARYTYPE_@ key;
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(out key, out dummy1, out dummy2, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex, Safir.Dob.Typesystem.KeyValMode.KeyMode);
@@END_IF@@

@@--                  -- VAL ---
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
                    @_MEMBERTYPE_@.EnumerationContainer val;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
                    @_MEMBERTYPE_@Container val;
@@ELSE@@
                    Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container val;
@@END_IF@@
                    val = m_@_MEMBER_@Member.Add(key);
                    Safir.Dob.Typesystem.Internal.BlobOperations.Get(val, handle, m_@_LOWER:MEMBER_@MemberIndex, valueIndex);
                }
                m_@_MEMBER_@Member.SetChangedHere(Safir.Dob.Typesystem.Internal.BlobOperations.IsChangedTopLevel(handle, m_@_LOWER:MEMBER_@MemberIndex));
            }
@@ --- Single member ---
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
            m_@_MEMBER_@Member = new @_MEMBERTYPE_@.EnumerationContainer();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
            m_@_MEMBER_@Member = new @_MEMBERTYPE_@Container();
@@ELSE@@
            m_@_MEMBER_@Member = new Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container();
@@END_IF@@
            Safir.Dob.Typesystem.Internal.BlobOperations.Get(m_@_MEMBER_@Member, handle, m_@_LOWER:MEMBER_@MemberIndex, 0);
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
        }

        /// <summary>
        /// <see cref="Safir.Dob.Typesystem.Object.WriteToBlob(System.Int64)"/>
        /// </summary>
        override public void WriteToBlob(System.Int64 handle)
        {
            Init();
            base.WriteToBlob(handle);

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
            //@_MEMBER_@
@@ --- Array member ---
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=String
            for (int i = 0; i < @_MEMBER_@ArraySize; ++i)
            {
                if (!m_@_MEMBER_@Member[i].IsNull() && m_@_MEMBER_@Member[i].Val.Length > @_MEMBER_@MaxStringLength)
                {
                    throw new Safir.Dob.Typesystem.IllegalValueException("The string member is longer than what is specified in the dou file");
                }
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(m_@_MEMBER_@Member[i], handle, m_@_LOWER:MEMBER_@MemberIndex,i);
            }
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object or @_UNIFORM_MEMBERTYPE_@=Binary or @_UNIFORM_MEMBERTYPE_@=InstanceId or @_UNIFORM_MEMBERTYPE_@=EntityId or @_UNIFORM_MEMBERTYPE_@=ChannelId or @_UNIFORM_MEMBERTYPE_@=HandlerId
            for (int i = 0; i < @_MEMBER_@ArraySize; ++i)
            {
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(m_@_MEMBER_@Member[i], handle, m_@_LOWER:MEMBER_@MemberIndex,i);
            }
@@ELSE@@
            for (int i = 0; i < @_MEMBER_@ArraySize; ++i)
            {
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(m_@_MEMBER_@Member[i],handle,m_@_LOWER:MEMBER_@MemberIndex,i);
            }
@@END_IF@@
@@ --- Sequence member ---
@@ELSIF@@ @_EXIST:MEMBERISSEQUENCE_@
            for (int i=0; i<m_@_MEMBER_@Member.Count; ++i)
            {
@@IF@@ (@_UNIFORM_MEMBERTYPE_@ = Enumeration)
                Safir.Dob.Typesystem.Internal.BlobOperations.Set((Int32)m_@_MEMBER_@Member[i], false, false, handle, m_@_LOWER:MEMBER_@MemberIndex, i, Safir.Dob.Typesystem.KeyValMode.ValueMode);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
                Safir.Dob.Typesystem.Internal.BlobOperations.Set((Safir.Dob.Typesystem.Object)m_@_MEMBER_@Member[i], false, false, handle, m_@_LOWER:MEMBER_@MemberIndex, i, Safir.Dob.Typesystem.KeyValMode.ValueMode);
@@ELSE@@
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(m_@_MEMBER_@Member[i], false, false, handle, m_@_LOWER:MEMBER_@MemberIndex, i, Safir.Dob.Typesystem.KeyValMode.ValueMode);
@@END_IF@@
            }
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
            Safir.Dob.Typesystem.Internal.BlobOperations.SetChangedTopLevel(handle, m_@_LOWER:MEMBER_@MemberIndex, m_@_MEMBER_@Member.IsChangedHere());
@@ELSE@@
            Safir.Dob.Typesystem.Internal.BlobOperations.SetChangedTopLevel(handle, m_@_LOWER:MEMBER_@MemberIndex, m_@_MEMBER_@Member.IsChanged());
@@END_IF@@

@@ --- Dictionary member ---
@@ELSIF@@ @_EXIST:MEMBERISDICTIONARY_@
            foreach (var kv in m_@_MEMBER_@Member)
            {
@@IF@@ @_UNIFORM_MEMBERDICTIONARYTYPE_@=Enumeration
                Int32 ordinal = (Int32)kv.Key;
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(ordinal, false, false, handle, m_@_LOWER:MEMBER_@MemberIndex, 0, Safir.Dob.Typesystem.KeyValMode.KeyMode);
@@ELSE@@
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(kv.Key, false, false, handle, m_@_LOWER:MEMBER_@MemberIndex, 0, Safir.Dob.Typesystem.KeyValMode.KeyMode);
@@END_IF@@
                Safir.Dob.Typesystem.Internal.BlobOperations.Set(kv.Value, handle, m_@_LOWER:MEMBER_@MemberIndex, 0);
            }
            Safir.Dob.Typesystem.Internal.BlobOperations.SetChangedTopLevel(handle, m_@_LOWER:MEMBER_@MemberIndex, m_@_MEMBER_@Member.IsChangedHere());
@@ --- Single member ---
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=String
            if (!m_@_MEMBER_@Member.IsNull() && m_@_MEMBER_@Member.Val.Length > @_MEMBER_@MaxStringLength)
            {
                throw new Safir.Dob.Typesystem.IllegalValueException("The string member is longer than what is specified in the dou file");
            }
@@END_IF@@
            Safir.Dob.Typesystem.Internal.BlobOperations.Set(m_@_MEMBER_@Member,handle,m_@_LOWER:MEMBER_@MemberIndex,0);
@@END_IF@@
@@END_IF@@

@@END_TABLE@@
        }

        #endregion

        #region Reflection part

        /// <summary>
        /// <see cref="Safir.Dob.Typesystem.Object.GetMember(System.Int32, System.Int32)"/>
        /// </summary>
        public override Safir.Dob.Typesystem.ContainerBase GetMember(System.Int32 member,
                                                                     System.Int32 index)
        {
            Init();

@@IF@@ @_MEMBER'length_@=0
            return base.GetMember(member,index);
@@ELSE@@
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
@@IF@@ @_TABLE_LINE_@=1
            if (member == m_@_LOWER:MEMBER_@MemberIndex)
@@ELSE@@

            else if (member == m_@_LOWER:MEMBER_@MemberIndex)
@@END_IF@@
            {
@@IF@@ @_EXIST:MEMBERISARRAY_@
                if (index < 0 || index >= m_@_LOWER:MEMBER_@Size)
                {
                    throw new Safir.Dob.Typesystem.IllegalValueException("Invalid index");
                }
                return m_@_MEMBER_@Member[index];
            }
@@ELSE@@
                if (index != 0)
                {
                    throw new Safir.Dob.Typesystem.SoftwareViolationException("Member is not an array");
                }
                return m_@_MEMBER_@Member;
            }
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

            else
            {
                return base.GetMember(member,index);
            }
@@END_IF@@
        }

        #endregion

        #region Private Data

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@

@@------ array
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        private @_MEMBERTYPE_@.EnumerationContainerArray m_@_MEMBER_@Member = new @_MEMBERTYPE_@.EnumerationContainerArray(@_MEMBER_@ArraySize);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        private @_MEMBERTYPE_@ContainerArray m_@_MEMBER_@Member = new @_MEMBERTYPE_@ContainerArray(@_MEMBER_@ArraySize);
@@ELSE@@
        private Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@ContainerArray m_@_MEMBER_@Member = new Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@ContainerArray(@_MEMBER_@ArraySize);
@@END_IF@@
@@------ sequence
@@ELSIF@@ @_EXIST:MEMBERISSEQUENCE_@
@@IF@@ (@_UNIFORM_MEMBERTYPE_@ = Enumeration)
        private @_MEMBERTYPE_@.EnumerationSequenceContainer m_@_MEMBER_@Member = new @_MEMBERTYPE_@.EnumerationSequenceContainer();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        private @_MEMBERTYPE_@SequenceContainer m_@_MEMBER_@Member = new @_MEMBERTYPE_@SequenceContainer();
@@ELSE@@
        private Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@SequenceContainer m_@_MEMBER_@Member = new Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@SequenceContainer();
@@END_IF@@
@@-------dictionary
@@ELSIF@@ @_EXIST:MEMBERISDICTIONARY_@
@@IF@@ @_UNIFORM_MEMBERDICTIONARYTYPE_@=Enumeration
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        private Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration>();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        private Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@>();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
        private Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration>();
@@ELSE@@
        private Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@.Enumeration, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@>();
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        private Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.EnumDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@.EnumerationContainer, @_MEMBERTYPE_@.Enumeration>();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        private Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.ObjectDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, @_MEMBERTYPE_@Container, @_MEMBERTYPE_@>();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
        private Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.StringDictionaryContainer<@_MEMBERDICTIONARYTYPE_@>();
@@ELSE@@
        private Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@> m_@_MEMBER_@Member = new Safir.Dob.Typesystem.ValueDictionaryContainer<@_MEMBERDICTIONARYTYPE_@, Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container, @_MEMBERTYPE_@>();
@@END_IF@@
@@END_IF@@
@@------ single
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
        private @_MEMBERTYPE_@.EnumerationContainer m_@_MEMBER_@Member = new @_MEMBERTYPE_@.EnumerationContainer();
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Object
        private @_MEMBERTYPE_@Container m_@_MEMBER_@Member = new @_MEMBERTYPE_@Container();
@@ELSE@@
        private Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container m_@_MEMBER_@Member = new Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@Container();
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
        #endregion

        #region Indices and Sizes

        private static void Init()
        {
            if (!m_isInit)
            {
@@TABLE@@
@@IF@@ @_EXIST:PARAMETER_@
                m_@_LOWER:PARAMETER_@ParameterIndex=Safir.Dob.Typesystem.Parameters.GetIndex(ClassTypeId, "@_PARAMETER_@");
@@END_IF@@
@@END_TABLE@@
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
                m_@_LOWER:MEMBER_@MemberIndex = Safir.Dob.Typesystem.Members.GetIndex(ClassTypeId, "@_MEMBER_@");
@@IF@@ @_EXIST:MEMBERISARRAY_@
                m_@_LOWER:MEMBER_@Size = Safir.Dob.Typesystem.Members.GetArraySize(ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex);
@@END_IF@@
@@IF@@ @_EXIST:MEMBERISSTRING_@
                m_@_LOWER:MEMBER_@Length=Safir.Dob.Typesystem.Members.GetMaxStringLength(ClassTypeId, m_@_LOWER:MEMBER_@MemberIndex);
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
                m_isInit=true;
            }
        }


        private static bool m_isInit = false;

@@TABLE@@
@@IF@@ @_EXIST:PARAMETER_@
        private static System.Int32 m_@_LOWER:PARAMETER_@ParameterIndex = -1;
@@END_IF@@
@@END_TABLE@@
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
        private static System.Int32 m_@_LOWER:MEMBER_@MemberIndex = -1;
@@IF@@ @_EXIST:MEMBERISARRAY_@
        private static System.Int32 m_@_LOWER:MEMBER_@Size = -1;
@@END_IF@@
@@IF@@ @_EXIST:MEMBERISSTRING_@
        private static System.Int32 m_@_LOWER:MEMBER_@Length = -1;
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

        #endregion
    }

    /// <summary>
    /// Container for members of type @_CLASS_@
    /// </summary>
    public class @_CLASS_@Container : Safir.Dob.Typesystem.ObjectContainerImpl<@_CLASS_@> {}

    /// <summary>
    /// Container for array members of type @_CLASS_@
    /// </summary>
    public class @_CLASS_@ContainerArray : Safir.Dob.Typesystem.ArrayContainer<@_CLASS_@Container>
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public @_CLASS_@ContainerArray(System.Int32 size) : base(size) { }
    }

    /// <summary>
    /// Container for sequence members of type @_CLASS_@
    /// </summary>
    public class @_CLASS_@SequenceContainer : Safir.Dob.Typesystem.GenericObjectSequenceContainer<@_CLASS_@> {}

@@ELSIF@@ @_UNITTYPE_@=enumeration
@@--
@@-- ENUMERATION
@@--

    /// <summary>
    /// Class wrapping the @_CLASS_@ enumeration.
    /// <para/>
@@IF@@ @_EXIST:CLASSSUMMARY_@
    /// @_REPLACE_ALL(\n/\n    /// ):CLASSSUMMARY_@
@@ELSE@@
    /// No description given in dou file.
@@END_IF@@
    /// </summary>
    public struct @_CLASS_@
    {
#pragma warning disable 1591  //no comments on the enum values
        /// <summary>
        /// The @_CLASS_@ enum.
@@IF@@ @_EXIST:CLASSSUMMARY_@
        /// <para/>
        /// @_REPLACE_ALL(\n/\n    /// ):CLASSSUMMARY_@
@@END_IF@@
        /// </summary>
        public enum Enumeration
        {
@@IF@@ @_ENUMVALUE'length_@=1
            @_ENUMVALUE_@ = 0
@@ELSE@@
@@TABLE@@
@@IF@@ @_TABLE_LINE_@=1
            @_ENUMVALUE_@ = 0,
@@ELSIF@@ @_TABLE_LINE_@=@_ENUMVALUE'length_@
            @_ENUMVALUE_@
@@ELSE@@
            @_ENUMVALUE_@,
@@END_IF@@
@@END_TABLE@@
@@END_IF@@
        }
#pragma warning restore 1591

        /// <summary>
        /// Enumeration id (or type id) of the @_CLASS_@ enumeration type.
        /// </summary>
        public static System.Int64 EnumerationId = @_TYPEID_@;

        /// <summary>
        /// Checksum of all the values of the @_CLASS_@ enumeration type.
        /// <see cref="CheckForMismatch(System.Int64)"/>
        /// </summary>
        public const System.Int64 Checksum = @_CHECKSUM_@;

        /// <summary>
        /// Check that there is no enumeration mismatch that would require a recompilation of your application.
        /// <para/>
        /// This is useful for detecting that an enumeration has changed, e.g. values have been added or removed,
        /// or values have changed order. By calling this method you will get an exception if your application
        /// needs to be recompiled.
        /// <para/>
        /// Call this like this from your application (somewhere in the startup code):
        ///   @_UNIT_@.CheckForMismatch(@_UNIT_@.Checksum);
        /// <para/>
        /// The checksum that you are passing to this function is compiled into your application
        /// so that if the enum changes the checksum in your application will be different than that
        /// in safir_generated, which will mean that an exception is thrown.
        /// </summary>
        /// <exception cref="Safir.Dob.Typesystem.ConfigurationErrorException">If there is an enumeration checksum mismatch</exception>
        static public void CheckForMismatch(System.Int64 checksum)
        {
            if (checksum != Checksum)
            {
                throw new Safir.Dob.Typesystem.ConfigurationErrorException("Type mismatch in type @_UNIT_@. Recompile your application!");
            }
        }

        /// <summary>
        /// Container for members of type @_CLASS_@
        /// </summary>
        public class EnumerationContainer : Safir.Dob.Typesystem.EnumerationContainerImpl<Enumeration>
        {
            /// <summary>
            /// Get or set the enumeration value by ordinal integer value.
            /// </summary>
            public override int Ordinal
            {
                get
                {
                    if (IsNull())
                    {
                        throw new Safir.Dob.Typesystem.NullException("Value is null");
                    }
                    return m_Value;
                }
                set
                {
                    if (!System.Enum.IsDefined(typeof(Enumeration), value))
                    {
                        throw new Safir.Dob.Typesystem.IllegalValueException("Value is not in the enumeration range");
                    }
                    m_bIsNull = false;
                    m_bIsChanged = true;
                    m_Value = value;
                }
            }

            /// <summary>
            /// Get or set the enumeration value.
            /// </summary>
            public override Enumeration Val
            {
                get { return (Enumeration)Ordinal; }
                set { Ordinal = (int)value; }
            }

            /// <summary>
            /// Equality operator.
            /// </summary>
            public static bool operator ==(EnumerationContainer first, Enumeration second)
            { return !first.IsNull() && first.m_Value.Equals((int)second); }

            /// <summary>
            /// Inequality operator.
            /// </summary>
            public static bool operator !=(EnumerationContainer first, Enumeration second)
            { return !(first == second); }

            /// <summary>
            /// Equality operator.
            /// </summary>
            public static bool operator ==(Enumeration first, EnumerationContainer second)
            { return second == first; }

            /// <summary>
            /// Inequality operator.
            /// </summary>
            public static bool operator !=(Enumeration first, EnumerationContainer second)
            { return !(second == first); }

            /// <summary>
            /// Get a hash code for the container.
            /// </summary>
            public override int GetHashCode()
            {
                return base.GetHashCode();
            }

            /// <summary>
            /// Compare container.
            /// </summary>
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
        }

        /// <summary>
        /// Container for array members of type @_CLASS_@
        /// </summary>
        public class EnumerationContainerArray : Safir.Dob.Typesystem.ArrayContainer<EnumerationContainer>
        {
            /// <summary>
            /// Constructor for array container.
            /// </summary>
            public EnumerationContainerArray(System.Int32 size) : base(size) { }

        }

        /// <summary>
        /// Container for sequence members of type @_CLASS_@
        /// </summary>
        public class EnumerationSequenceContainer : Safir.Dob.Typesystem.ValueSequenceContainer<Enumeration> {}
    }

@@ELSIF@@ @_UNITTYPE_@=exception
@@--
@@-- EXCEPTION
@@--
    /// <summary>
@@IF@@ @_EXIST:CLASSSUMMARY_@
    /// @_REPLACE_ALL(\n/\n    /// ):CLASSSUMMARY_@
@@ELSE@@
    /// No summary given in dou file.
@@END_IF@@
    /// </summary>
    public class @_CLASS_@ : @_BASECLASS_@
    {
        /// <summary>
        /// Construct a @_CLASS_@ exception with string as the message.
        /// </summary>
        public @_CLASS_@(string message) : base(message)
        {
        }

        /// <summary>
        /// Type id for @_CLASS_@
        /// </summary>
        public new const System.Int64 ExceptionTypeId = @_TYPEID_@;

        /// <summary>
        /// Get the type id of this exception object.
        /// </summary>
        public override System.Int64 GetTypeId()
        {
            return ExceptionTypeId;
        }
    }
@@END_IF@@
@@--
@@-- FOOTER
@@--
}
@@END_IF@@

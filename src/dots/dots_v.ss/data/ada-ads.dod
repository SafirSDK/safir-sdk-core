@@-------------------------------------------------------------------------------
@@--
@@--  Copyright Saab AB, 2005-2009 (http://www.safirsdk.com)
@@--
@@--  Created by: Henrik Sundberg / sthesu
@@--
@@-------------------------------------------------------------------------------
@@IF@@ @_SECTION_@ = "Parameters"
File_Suffix:".ads"
Filename_Separator:"-"
Output_Directory:"ada/"
Namespace_Separator:"."
@@-- Namspace prefixes are defined separately, since they are supposed to differ between projects.
@@-- Files matching <Namespace><Namespace_Prefix_File_Suffix> are searched for a line containing the namespace prefix
@@-- to use for <Namespace>. E.g. Namespace_Prefix_File_Prefix:"-java.namespace.txt" will match the file
@@-- "Safir-java.namespace.txt". The first non comment line in the file is used as namespace prefix.
@@-- Empty value is used when no namespace prefixes are to be added.
Namespace_Prefix_File_Suffix:""
@@-- Parent filename "" defaults to the namespace with added file suffix.
Parent_Filename:""
@@
@@ *_Underscore_Style is one of: "Add", "Remove", "Keep"
@@
Namespace_Underscore_Style:"Add"
Filename_Underscore_Style:"Add"
Classname_Underscore_Style:"Add"
Membername_Underscore_Style:"Add"
Enum_Value_Underscore_Style:"Add"
@@
@@ *_Case_Style is one of: "Upper", "Lower", "Camel", "Keep"
@@
Namespace_Case_Style:"Keep"
Filename_Case_Style:"Lower"
Classname_Case_Style:"Keep"
Membername_Case_Style:"Keep"
Enum_Value_Case_Style:"Keep"
Object_Type:"Object"
Index_Type:"Int32"
@@--
@@-- Exceptions are defined like this:
@@--   Exception:<dou>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Exception:illegalValue:"Safir::Dots::IllegalValue":"dots/dots_defs"
@@-- defines "illegalValue" as an exceptionname in the xml-syntax (dou-file).
@@-- And "Safir::Dots::IllegalValue" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Exception:Exception:"":""
Exception:FundamentalException:"":""
Exception:Safir.Dob.Typesystem.Configuration_Error_Exception:"Safir.Dob.Typesystem.Configuration_Error_Exception":""
Exception:Safir.Dob.Typesystem.Incompatible_Types_Exception:"Safir.Dob.Typesystem.Incompatible_Types_Exception":""
Exception:Safir.Dob.Typesystem.Illegal_Value_Exception:"Safir.Dob.Typesystem.Illegal_Value_Exception":""
Exception:Safir.Dob.Typesystem.Null_Value_Exception:"Safir.Dob.Typesystem.Null_Exception":""
Exception:Safir.Dob.Typesystem.Read_Only_Exception:"Safir.Dob.Typesystem.Read_Only_Exception":""
Exception:Safir.Dob.Typesystem.Software_Violation_Exception:"Safir.Dob.Typesystem.Software_Violation_Exception":""
@@--
@@-- Types are defined like this:
@@--   Type:<dou>:<set/get>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Type:String:String:"Safir::Dots::String":"dots/dots_defs"
@@-- defines "String" as a typename in the xml-syntax (dou-file).
@@-- And "String" to be the @_UNIFORM_MEMBERTYPE_@, used in the name of Set/Get routines.
@@-- And "Safir::Dots::String" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Type:Int32:Int_32:"Safir.Dob.Typesystem.Int_32":""
Type:Int64:Int_64:"Safir.Dob.Typesystem.Int_64":""
Type:Float32:Float_32:"Safir.Dob.Typesystem.Float_32":""
Type:Float64:Float_64:"Safir.Dob.Typesystem.Float_64":""
Type:Boolean:Boolean:"Boolean":""
Type:String:String:"Unbounded_Wide_String":"String"
Type:EntityId:Entity_Id:"Safir.Dob.Typesystem.Entity_Id":":Entity_Id:"
Type:TypeId:Type_Id:"Safir.Dob.Typesystem.Type_Id":""
Type:InstanceId:Instance_Id:"Safir.Dob.Typesystem.Instance_Id":":Instance_Id:"
Type:ChannelId:Channel_Id:"Safir.Dob.Typesystem.Channel_Id":":Channel_Id:"
Type:HandlerId:Handler_Id:"Safir.Dob.Typesystem.Handler_Id":":Handler_Id:"
Type:Object:Object:"Safir.Dob.Typesystem.Object":""
Type:Binary:Binary:"Safir.Dob.Typesystem.Binary_Vectors.Vector":"Binary"
Type:Ampere32:Float_32:"Safir.Dob.Typesystem.Si_32.Ampere":"Safir.Dob.Typesystem.Si_32"
Type:CubicMeter32:Float_32:"Safir.Dob.Typesystem.Si_32.Cubic_Meter":"Safir.Dob.Typesystem.Si_32"
Type:Hertz32:Float_32:"Safir.Dob.Typesystem.Si_32.Hertz":"Safir.Dob.Typesystem.Si_32"
Type:Joule32:Float_32:"Safir.Dob.Typesystem.Si_32.Joule":"Safir.Dob.Typesystem.Si_32"
Type:Kelvin32:Float_32:"Safir.Dob.Typesystem.Si_32.Kelvin":"Safir.Dob.Typesystem.Si_32"
Type:Kilogram32:Float_32:"Safir.Dob.Typesystem.Si_32.Kilogram":"Safir.Dob.Typesystem.Si_32"
Type:Meter32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter":"Safir.Dob.Typesystem.Si_32"
Type:MeterPerSecond32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter_Per_Second":"Safir.Dob.Typesystem.Si_32"
Type:MeterPerSecondSquared32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter_Per_Second_Squared":"Safir.Dob.Typesystem.Si_32"
Type:Newton32:Float_32:"Safir.Dob.Typesystem.Si_32.Newton":"Safir.Dob.Typesystem.Si_32"
Type:Pascal32:Float_32:"Safir.Dob.Typesystem.Si_32.Pascal":"Safir.Dob.Typesystem.Si_32"
Type:Radian32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian":"Safir.Dob.Typesystem.Si_32"
Type:RadianPerSecond32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian_Per_Second":"Safir.Dob.Typesystem.Si_32"
Type:RadianPerSecondSquared32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian_Per_Second_Squared":"Safir.Dob.Typesystem.Si_32"
Type:Second32:Float_32:"Safir.Dob.Typesystem.Si_32.Second":"Safir.Dob.Typesystem.Si_32"
Type:SquareMeter32:Float_32:"Safir.Dob.Typesystem.Si_32.Square_Meter":"Safir.Dob.Typesystem.Si_32"
Type:Steradian32:Float_32:"Safir.Dob.Typesystem.Si_32.Steradian":"Safir.Dob.Typesystem.Si_32"
Type:Volt32:Float_32:"Safir.Dob.Typesystem.Si_32.Volt":"Safir.Dob.Typesystem.Si_32"
Type:Watt32:Float_32:"Safir.Dob.Typesystem.Si_32.Watt":"Safir.Dob.Typesystem.Si_32"
Type:Ampere64:Float_64:"Safir.Dob.Typesystem.Si_64.Ampere":"Safir.Dob.Typesystem.Si_64"
Type:CubicMeter64:Float_64:"Safir.Dob.Typesystem.Si_64.Cubic_Meter":"Safir.Dob.Typesystem.Si_64"
Type:Hertz64:Float_64:"Safir.Dob.Typesystem.Si_64.Hertz":"Safir.Dob.Typesystem.Si_64"
Type:Joule64:Float_64:"Safir.Dob.Typesystem.Si_64.Joule":"Safir.Dob.Typesystem.Si_64"
Type:Kelvin64:Float_64:"Safir.Dob.Typesystem.Si_64.Kelvin":"Safir.Dob.Typesystem.Si_64"
Type:Kilogram64:Float_64:"Safir.Dob.Typesystem.Si_64.Kilogram":"Safir.Dob.Typesystem.Si_64"
Type:Meter64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter":"Safir.Dob.Typesystem.Si_64"
Type:MeterPerSecond64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter_Per_Second":"Safir.Dob.Typesystem.Si_64"
Type:MeterPerSecondSquared64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter_Per_Second_Squared":"Safir.Dob.Typesystem.Si_64"
Type:Newton64:Float_64:"Safir.Dob.Typesystem.Si_64.Newton":"Safir.Dob.Typesystem.Si_64"
Type:Pascal64:Float_64:"Safir.Dob.Typesystem.Si_64.Pascal":"Safir.Dob.Typesystem.Si_64"
Type:Radian64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian":"Safir.Dob.Typesystem.Si_64"
Type:RadianPerSecond64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian_Per_Second":"Safir.Dob.Typesystem.Si_64"
Type:RadianPerSecondSquared64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian_Per_Second_Squared":"Safir.Dob.Typesystem.Si_64"
Type:Second64:Float_64:"Safir.Dob.Typesystem.Si_64.Second":"Safir.Dob.Typesystem.Si_64"
Type:SquareMeter64:Float_64:"Safir.Dob.Typesystem.Si_64.Square_Meter":"Safir.Dob.Typesystem.Si_64"
Type:Steradian64:Float_64:"Safir.Dob.Typesystem.Si_64.Steradian":"Safir.Dob.Typesystem.Si_64"
Type:Volt64:Float_64:"Safir.Dob.Typesystem.Si_64.Volt":"Safir.Dob.Typesystem.Si_64"
Type:Watt64:Float_64:"Safir.Dob.Typesystem.Si_64.Watt":"Safir.Dob.Typesystem.Si_64"
@@--
@@--
@@--
@@--
@@--
@@--
@@ELSIF@@ @_SECTION_@="Parent"
@@IF@@ @_NAMESPACE_@ /= "Safir"
@@IF@@ @_NAMESPACE_@ /= "Safir.Dob"
package @_NAMESPACE_@ is
   pragma Pure (@_NAMESPACE_@);
end @_NAMESPACE_@;
@@END_IF@@
@@END_IF@@
@@ELSIF@@ @_SECTION_@ = "Code"
@@IF@@ @_UNITTYPE_@=property
@@--
@@-- PROPERTY
@@--
with Safir.Dob.Typesystem.Object;
use type Safir.Dob.Typesystem.Type_Id;

@@TABLE@@
@@IF@@ @_EXIST:DEPENDENCY_@
@@IF@@ @_MATCH(:.*_Id:):DEPENDENCY_@
with Safir.Dob.Typesystem.@_REPLACE_ALL(:/):DEPENDENCY_@;
@@ELSIF@@ @_DEPENDENCY_@ = String
with Ada.Strings.Wide_Unbounded; use Ada.Strings.Wide_Unbounded;
@@ELSIF@@ @_DEPENDENCY_@ = Binary
@@ELSE@@
with @_DEPENDENCY_@;
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

package @_NAMESPACE_@.@_CLASS_@ is

   ----------------
   -- Definition --
   ----------------

@@IF@@ @_EXIST:CLASSSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):CLASSSUMMARY_@
   --

@@END_IF@@
   Class_Type_Id : constant Safir.Dob.Typesystem.Type_Id := @_TYPEID_@;

   function Has_Property
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) return Boolean;

@@IF@@ @_MEMBER'LENGTH_@ > 0
   -------------
   -- Members --
   -------------

@@END_IF@@
@@TABLE@@
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---
   -- @_MEMBER_@ --
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---

@@IF@@ @_EXIST:MEMBERISARRAY_@
   function @_MEMBER_@_Array_Size
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) return Safir.Dob.Typesystem.Int_32;

@@END_IF@@
@@IF@@ @_EXIST:MEMBERSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):MEMBERSUMMARY_@
   --
@@END_IF@@
   procedure Set_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_EXIST:MEMBERISARRAY_@
      Index : in Safir.Dob.Typesystem.Array_Index;
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      Ptr : in @_MEMBERTYPE_@.Smart_Pointer'Class);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      Value : in @_MEMBERTYPE_@.Enumeration;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
      Value : in @_MEMBERTYPE_@.@_UNIFORM_MEMBERTYPE_@_Type);
@@ELSE@@
      Value : in @_MEMBERTYPE_@);
@@END_IF@@

@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
@@IF@@ @_EXIST:MEMBERISARRAY_@
   procedure Set_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index;
      Value : in Safir.Dob.Typesystem.Enumeration_Value);
@@ELSE@@
   procedure Set_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Value : in Safir.Dob.Typesystem.Enumeration_Value);
@@END_IF@@

@@END_IF@@
   procedure Set_Null_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index);
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class);
@@END_IF@@

   function Is_Null_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
     return Boolean;

   function Is_Changed_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
     return Boolean;

   function Is_Read_Only_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
     return Boolean;

@@IF@@ @_EXIST:MEMBERSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):MEMBERSUMMARY_@
   --
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
   -- If readonly it points to a new object, otherwise to the real one.
@@END_IF@@
   function Get_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj   : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      Index : in Safir.Dob.Typesystem.Array_Index;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum)
@@ELSE@@
      Index : in Safir.Dob.Typesystem.Array_Index)
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
     return @_MEMBERTYPE_@.Smart_Pointer;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     return @_MEMBERTYPE_@.Enumeration;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
     return @_MEMBERTYPE_@.@_UNIFORM_MEMBERTYPE_@_Type;
@@ELSE@@
     return @_MEMBERTYPE_@;
@@END_IF@@

@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
@@IF@@ @_EXIST:MEMBERISARRAY_@
   function Get_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
     return Safir.Dob.Typesystem.Enumeration_Value;
@@ELSE@@
   function Get_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
     return Safir.Dob.Typesystem.Enumeration_Value;
@@END_IF@@

@@END_IF@@

@@END_TABLE@@
end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=class
@@--
@@-- CLASS
@@--
with Ada.Finalization;
with Ada.Strings.Wide_Unbounded; use Ada.Strings.Wide_Unbounded;
pragma Warnings (Off, Ada.Strings.Wide_Unbounded);
with Safir.Dob.Typesystem.Members;
pragma Elaborate_All (Safir.Dob.Typesystem.Members);
pragma Warnings (Off, Safir.Dob.Typesystem.Members);
with Safir.Dob.Typesystem.Object;
with Safir.Dob.Typesystem.Object_Container_Base;
with Safir.Dob.Typesystem.Container_Base; use Safir.Dob.Typesystem.Container_Base;
@@IF@@ @_EXIST:MEMBER_@
with Safir.Dob.Typesystem.Container_Instantiations;
pragma Warnings (Off, Safir.Dob.Typesystem.Container_Instantiations);
@@END_IF@@

use type Safir.Dob.Typesystem.Type_Id;

@@TABLE@@
@@IF@@ @_EXIST:DEPENDENCY_@
@@IF@@ @_MATCH(:.*_Id:):DEPENDENCY_@
@@IF@@ (@_PARAMETER'Length_@>0_@ or @_CREATEROUTINE'Length_@>0 )and not @_MEMBER'Length_@>0
with Safir.Dob.Typesystem.@_REPLACE_ALL(:/):DEPENDENCY_@;
pragma Warnings (Off, Safir.Dob.Typesystem.@_REPLACE_ALL(:/):DEPENDENCY_@);
@@END_IF@@
@@ELSIF@@ @_DEPENDENCY_@ = String
@@IF@@ @_MEMBER'Length_@>0
with Safir.Dob.Typesystem.String_Container; use Safir.Dob.Typesystem.String_Container;
pragma Warnings (Off, Safir.Dob.Typesystem.String_Container);
@@END_IF@@
@@ELSIF@@ @_DEPENDENCY_@ = Binary
with Safir.Dob.Typesystem.Binary_Container; use Safir.Dob.Typesystem.Binary_Container;
pragma Warnings (Off, Safir.Dob.Typesystem.Binary_Container);
@@ELSE@@
with @_DEPENDENCY_@;
@@IF@@ @_CREATEROUTINE'Length_@>0
pragma Warnings (Off, @_REPLACE_ALL(;.*/):DEPENDENCY_@);
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

package @_NAMESPACE_@.@_CLASS_@ is

   ----------------
   -- Definition --
   ----------------

@@IF@@ @_EXIST:CLASSSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):CLASSSUMMARY_@
   --
@@END_IF@@
   type @_CLASS_@_Type is new @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type with private;

   pragma Suppress (Accessibility_Check, On => @_CLASS_@_Type);
   pragma Suppress (Access_Check, On => @_CLASS_@_Type);

   type @_CLASS_@_Class_Access is access all @_CLASS_@_Type'Class;
   type @_CLASS_@_Access is access all @_CLASS_@_Type;

   type Smart_Pointer is new @_BASECLASS_@.Smart_Pointer with private;

   Class_Type_Id : constant Safir.Dob.Typesystem.Type_Id := @_TYPEID_@;

   -- Type id for @_CLASS_@.
   overriding
   function Get_Type_Id (Self : in @_CLASS_@_Type) return Safir.Dob.Typesystem.Type_Id;

   -- Check if anything in the object has change flags set.
   overriding
   function Is_Changed (Self : in @_CLASS_@_Type) return Boolean;

   -- Recursively set all change flags in the object.
   overriding
   procedure Set_Changed (Self : in out @_CLASS_@_Type; Changed : in Boolean);

   -- ==================
   -- Containers package
   -- ==================
   package Containers is

      type Container is new
        Ada.Finalization.Controlled and
        Safir.Dob.Typesystem.Object_Container_Base.Object_Container_Base_Type with private;
      type Container_Access is access all Container;

      -- The type returned from generated member functions.
      type Container_Proxy is tagged private;

      ---------------------
      -- Container proxy --
      ---------------------

      function Create_Container_Proxy (Container_Ptr : in Container_Access)
                                    return Container_Proxy;

      -- Set the smart pointer in the container.
      --
      -- This method will set the contained pointer to point to another object.
      -- The change flag of the container will be updated.
      --
      -- Parameters: Ptr - A pointer to the new object to point to.
      --
      procedure Set_Ptr (Self : in Container_Proxy'Class;
                         Ptr  : in Smart_Pointer'Class);

      -- Get the smart pointer from the container.
      --
      -- This method will return the contained smart pointer unless the container is null, then
      -- an exception will be thrown.
      --
      -- Returns: A smart pointer to the contained object.
      -- Exceptions: Null_Exception - The container is null.
      --
      function Get_Ptr (Self : in Container_Proxy'Class) return Smart_Pointer'Class;

      -- Returns the raw access value.
      --
      -- Use it to get access to the pointed to Type.
      -- Usually you don't want to store the access value in a variable because then
      -- all bets are off regarding refrence counting. In this case you are
      -- responsible for not using the access value after the corresponding
      -- container has gone out of scope.
      --
      function Ref (Self : in Container_Proxy'Class) return @_CLASS_@_Class_Access;

      -- Is the container set to null?
      --
      -- Returns: True if the container is set to null.
      --
      function Is_Null (Self : in Container_Proxy'Class) return Boolean;

      -- Set the container to null.
      --
      procedure Set_Null (Self : in Container_Proxy'Class);

      -- Is the change flag set on the container?
      --
      -- The change flag gets updated every time the contained value changes.
      -- Note: This call will recursively check change flags in the contained object.
      --
      function Is_Changed (Self : in Container_Proxy'Class) return Boolean;

      -- Set the container's change flag.
      --
      -- It should be fairly unusual for an application to have to use this
      -- operation. There is nothing dangerous about it, but are you sure this
      -- is the operation you were after?
      --
      -- The change flag is how receivers of objects can work out what the
      -- sender really wanted done on the object.
      --
      -- Note: This call will recursively set all the change flags in the contained object.
      --
      procedure Set_Changed (Self : in  Container_Proxy'Class;
                             To   : in  Boolean);

      -- Is the change flag in the container set?
      --
      -- This method is like IsChanged without the recursion (on object containers
      -- Is_Changed is recursive).
      --
      -- Returns: True if the containers change flag is set.
      --
      function Is_Changed_Here (Self : in Container_Proxy'Class) return Boolean;

      -- Set the change flag in the container.
      --
      -- This method is like SetChanged without the recursion (on object containers
      -- Set_Changed is recursive).
      --
      -- Parameters: Changed - The value to set the change flag to.
      --
      procedure Set_Changed_Here (Self    : in out Container_Proxy'Class;
                                  To      : in Boolean);

      --------------------------------------------------------------------------
      -- Container.
      -- A container is returned only for self-referencing members so in most --
      -- cases you don't care about these operations.
      --------------------------------------------------------------------------

      function Get_Ptr (Self : in Container) return Smart_Pointer'Class;

      function Ref (Self : in Container) return @_CLASS_@_Class_Access;

      overriding
      function Is_Null (Self : in Container) return Boolean;

      overriding
      procedure Set_Null (Self : in out Container);

      overriding
      function Is_Changed (Self : in Container) return Boolean;

      overriding
      procedure Set_Changed (Self : in out Container;
                             To   : in     Boolean);

      overriding
      procedure Copy (Self : in out Container;
                      That : in Container_Base_Type'Class);

      overriding
      function Is_Changed_Here (Self : in Container)
                             return Boolean;

      overriding
      procedure Set_Ptr (Self : in out Container;
                         Ptr  : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class);

      overriding
      procedure Set_Changed_Here (Self    : in out Container;
                                  To      : in Boolean);

      function Calculate_Blob_Size (Self : in Container)
                                   return Safir.Dob.Typesystem.Int_32;

      overriding
      function Get_Member (Self         : in Container;
                           Member       : in Safir.Dob.Typesystem.Member_Index;
                           Idx          : in Safir.Dob.Typesystem.Array_Index)
                        return Safir.Dob.Typesystem.Container_Base.Container_Base_Access;

      overriding
      function Get_Object_Pointer (Self : in Container) return
      access Safir.Dob.Typesystem.Object.Smart_Pointer'Class;

      overriding
      procedure Set_Object_Pointer (Self       : in out Container;
                                    Object_Ptr : access Safir.Dob.Typesystem.Object.Smart_Pointer'Class);

      overriding
      procedure Reset_Object_Pointer (Self : in out Container);

      overriding
      procedure Adjust (Self : in out Container);

   private
      type Container is new
        Ada.Finalization.Controlled and
        Safir.Dob.Typesystem.Object_Container_Base.Object_Container_Base_Type with record
         Obj_Ptr    : aliased Smart_Pointer;
         Is_Changed : Boolean := False;
      end record;

      type Container_Proxy is tagged record
         Container_Ptr : Container_Access;
      end record;

   end Containers;

   -- ========================
   -- Array containers package
   -- ========================
   package Array_Containers is

      type Array_Container (Max_Index : Safir.Dob.Typesystem.Index) is tagged private;
      type Array_Container_Access is access all Array_Container;

      -- Type returned from generated member functions.
      type Array_Container_Proxy is tagged private;

      ---------------------------
      -- Array container proxy --
      ---------------------------

      function Create_Array_Container_Proxy (Array_Container_Ptr : in Array_Container_Access)
                                             return Array_Container_Proxy;

      -- Access to an array element
      --
      function Element (Self : in Array_Container_Proxy'Class; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Proxy;

      -- Check if any element in the array has a change flag set on it.
      --
      -- The change flag gets updated every time the contained value changes.
      -- Note: This call will recursively check change flags in the contained object.
      --
      function Is_Changed (Self : in Array_Container_Proxy'Class) return Boolean;

      -- Set the change flag on all elements in the array.
      --
      -- It should be fairly unusual for an application to have to use this
      -- operation. There is nothing dangerous about it, but are you sure this
      -- is the operation you were after?
      --
      -- The change flag is how receivers of objects can work out what the
      -- sender really wanted done on the object.
      --
      -- Note: This call will recursively set all the change flags in the contained object.
      --
      procedure Set_Changed (Self : in  Array_Container_Proxy'Class;
                             To   : in  Boolean);

      ---------------------
      -- Array container --
      ---------------------

      function Element (Self : in Array_Container; Index : in Safir.Dob.Typesystem.Array_Index)
                              return Containers.Container_Access;

      function Is_Changed (Self : in Array_Container) return Boolean;

      procedure Set_Changed (Self : in out Array_Container;
                             To   : in  Boolean);


   private

      type Array_T is array (Safir.Dob.Typesystem.Array_Index range <>) of aliased Containers.Container;

      type Array_Container (Max_Index : Safir.Dob.Typesystem.Index) is tagged record
         Arr : Array_T (0 .. Max_Index);
      end record;

      type Array_Container_Proxy is tagged record
         Array_Container_Ptr : Array_Container_Access;
      end record;

   end Array_Containers;

   ---------------------
   -- Create routines --
   ---------------------

   ------------
   -- Create --
   ------------
   function Create return Smart_Pointer;

@@TABLE@@
   ----------@_REPLACE_ALL([a-zA-Z0-9_]/-):CREATEROUTINE_@---
   -- Create_@_CREATEROUTINE_@ --
   ----------@_REPLACE_ALL([a-zA-Z0-9_]/-):CREATEROUTINE_@---

@@IF@@ @_EXIST:CREATEROUTINESUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):CREATEROUTINESUMMARY_@
   --
@@END_IF@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
   function Create_@_CREATEROUTINE_@ (
@@ELSE@@
   function Create_@_CREATEROUTINE_@ return Smart_Pointer;
@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
@@IF@@ @_EXIST:CREATEPARAMETERISLAST_@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Smart_Pointer) return Smart_Pointer;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Enumeration) return Smart_Pointer;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Entity_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Instance_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Channel_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Handler_Id
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.@_UNIFORM_CREATEPARAMETERTYPE_@_Type) return Smart_Pointer;
@@ELSE@@
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@) return Smart_Pointer;
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Smart_Pointer;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Enumeration;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Entity_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Instance_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Channel_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Handler_Id
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.@_UNIFORM_CREATEPARAMETERTYPE_@_Type;
@@ELSE@@
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@;
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

@@END_TABLE@@
@@IF@@ @_PARAMETER'LENGTH_@ > 0
   ----------------
   -- Parameters --
   ----------------

@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:PARAMETERISARRAY_@
   function @_PARAMETER_@_Array_Size return Safir.Dob.Typesystem.Int_32;

@@IF@@ @_EXIST:PARAMETERSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):PARAMETERSUMMARY_@
   --
@@END_IF@@
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.Smart_Pointer;
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.Enumeration;
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Entity_Id or @_UNIFORM_PARAMETERTYPE_@=Instance_Id or @_UNIFORM_PARAMETERTYPE_@=Channel_Id or @_UNIFORM_PARAMETERTYPE_@=Handler_Id
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.@_UNIFORM_PARAMETERTYPE_@_Type;
@@ELSE@@
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@;
@@END_IF@@
@@ELSE@@
@@IF@@ @_EXIST:PARAMETERSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):PARAMETERSUMMARY_@
   --
@@END_IF@@
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.Smart_Pointer;
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.Enumeration;
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Entity_Id or @_UNIFORM_PARAMETERTYPE_@=Instance_Id or @_UNIFORM_PARAMETERTYPE_@=Channel_Id or @_UNIFORM_PARAMETERTYPE_@=Handler_Id
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.@_UNIFORM_PARAMETERTYPE_@_Type;
@@ELSE@@
   function @_PARAMETER_@ return @_PARAMETERTYPE_@;
@@END_IF@@
@@END_IF@@

@@END_TABLE@@
   -- Create a copy of the object.
   --
   -- Will create a copy of the object on the heap and return a smart pointer to it.
   --
   -- Returns:  A smart pointer to the copy of the object.
   --
   function Clone (Self : in @_CLASS_@_Type) return Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_MEMBER'LENGTH_@ > 0
   -------------
   -- Members --
   -------------

@@END_IF@@
@@TABLE@@
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---
   -- @_MEMBER_@ --
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---

   function @_MEMBER_@_Member_Index return Safir.Dob.Typesystem.Member_Index;
@@IF@@ @_EXIST:MEMBERISSTRING_@
   function @_MEMBER_@_Max_String_Length return Safir.Dob.Typesystem.Int_32;

@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
   function @_MEMBER_@_Array_Size return Safir.Dob.Typesystem.Int_32;

@@END_IF@@
@@IF@@ @_EXIST:MEMBERSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):MEMBERSUMMARY_@
   --
@@END_IF@@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
     return Array_Containers.Array_Container_Access;
@@ELSE@@
     return @_MEMBERTYPE_@.Array_Containers.Array_Container_Proxy;
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
     return Safir.Dob.Typesystem.String_Container.Array_Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
     return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Array_Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
     return Safir.Dob.Typesystem.Binary_Container.Array_Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Array_Containers.Array_Container_Proxy;
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
     return @_MEMBERTYPE_@_Container.Array_Container_Proxy;
@@ELSE@@
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Array_Container_Proxy;
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
     return Containers.Container_Access;
@@ELSE@@
     return @_MEMBERTYPE_@.Containers.Container_Proxy;
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
     return Safir.Dob.Typesystem.String_Container.Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
     return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
     return Safir.Dob.Typesystem.Binary_Container.Container_Proxy;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Containers.Container_Proxy;
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
     return @_MEMBERTYPE_@_Container.Container_Proxy;
@@ELSE@@
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Container_Proxy;
@@END_IF@@
@@END_IF@@

@@END_TABLE@@
   -------------------
   -- Smart pointer --
   -------------------

   -- Returns the raw access value.
   --
   -- Use it to get access to the pointed to Type like this:
   -- My_Ptr.Ref.My_Member or My_Ptr.Ref.all.
   -- Usually you don't want to store the access value in a variable because then
   -- all bets are off regarding refrence counting. In this case you are
   -- responsible for not using the access value after the corresponding
   -- Smart_Pointer has gone out of scope.
   --
   function Ref (Self : in Smart_Pointer) return @_CLASS_@_Class_Access;

   ------------------------------------------------------------
   -- Blob serialization/deserialization and reflection      --
   -- (Don't use unless you really know what you're doing!!) --
   ------------------------------------------------------------

   overriding procedure Initialize (Self : in out @_CLASS_@_Type;
                                    Blob : in Safir.Dob.Typesystem.Blob_T);

   overriding function Calculate_Blob_Size (Self : in @_CLASS_@_Type)
                                           return Safir.Dob.Typesystem.Int_32;

   overriding
   procedure Write_To_Blob (Self                : in @_CLASS_@_Type;
                            Blob                : in Safir.Dob.Typesystem.Blob_T;
                            Beginning_Of_Unused : in out Safir.Dob.Typesystem.Blob_T);

   overriding
   function Get_Member (Self   : in @_CLASS_@_Type;
                        Member : in Safir.Dob.Typesystem.Member_Index;
                        Idx    : in Safir.Dob.Typesystem.Array_Index)
                       return Safir.Dob.Typesystem.Container_Base.Container_Base_Access;

private

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
   @_MEMBER_@_Member_Idx : Safir.Dob.Typesystem.Member_Index := Safir.Dob.Typesystem.Members.Get_Index (Class_Type_Id, To_Unbounded_Wide_String ("@_XMLMEMBER_@"));
@@IF@@ @_EXIST:MEMBERISARRAY_@
   @_MEMBER_@_Size : Safir.Dob.Typesystem.Array_Index := Safir.Dob.Typesystem.Members.Get_Array_Size (Class_Type_Id, @_MEMBER_@_Member_Idx);
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=String
   @_MEMBER_@_Max_String_Len : Safir.Dob.Typesystem.Int_32 := Safir.Dob.Typesystem.Members.Get_Max_String_Length (Class_Type_Id, @_MEMBER_@_Member_Idx);
@@END_IF@@
@@END_IF@@
@@END_TABLE@@

   use type Safir.Dob.Typesystem.Int_32;
@@IF@@ not @_EXIST:MEMBER_@
   type @_CLASS_@_Type is new @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type with null record;
@@ELSE@@
   type @_CLASS_@_Type is new @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type with
      record
@@TABLE@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
         @_MEMBER_@_Member : aliased Array_Containers.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSE@@
         @_MEMBER_@_Member : aliased @_MEMBERTYPE_@.Array_Containers.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
         @_MEMBER_@_Member : aliased @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Array_Containers.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.String_Container.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.Binary_Container.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
         @_MEMBER_@_Member : aliased @_MEMBERTYPE_@_Container.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@ELSE@@
         @_MEMBER_@_Member : aliased @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Array_Container (Max_Index => @_MEMBER_@_Size - 1);
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
         @_MEMBER_@_Member : aliased Containers.Container;
@@ELSE@@
         @_MEMBER_@_Member : aliased @_MEMBERTYPE_@.Containers.Container;
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
         @_MEMBER_@_Member : aliased @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Containers.Container;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.String_Container.Container;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Container;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
         @_MEMBER_@_Member : aliased Safir.Dob.Typesystem.Binary_Container.Container;
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
         @_MEMBER_@_Member : aliased @_MEMBERTYPE_@_Container.Container;
@@ELSE@@
         @_MEMBER_@_Member : aliased @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Container;
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
      end record;
@@END_IF@@

   type Smart_Pointer is new @_BASECLASS_@.Smart_Pointer with null record;

   function Create_Object (Blob : in Safir.Dob.Typesystem.Blob_T)
                          return Safir.Dob.Typesystem.Object.Smart_Pointer'Class;

   function Create_Smart_Ptr return Safir.Dob.Typesystem.Object.Smart_Pointer'Class;

end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=enumeration
@@--
@@-- ENUMERATION
@@--
with Ada.Strings.Wide_Unbounded; use Ada.Strings.Wide_Unbounded;
with Safir.Dob.Typesystem;
use type Safir.Dob.Typesystem.Type_Id;
with Safir.Dob.Typesystem.Container_Base; use Safir.Dob.Typesystem.Container_Base;
with Safir.Dob.Typesystem.Enumeration_Container_Base; use Safir.Dob.Typesystem.Enumeration_Container_Base;

package @_NAMESPACE_@.@_CLASS_@ is

   type Enumeration is
@@TABLE@@
@@IF@@ @_ENUMVALUE'length_@=1
     (@_ENUMVALUE_@);
@@ELSIF@@ @_TABLE_LINE_@=1
     (@_ENUMVALUE_@,
@@ELSIF@@ @_TABLE_LINE_@=@_ENUMVALUE'length_@
      @_ENUMVALUE_@);
@@ELSE@@
      @_ENUMVALUE_@,
@@END_IF@@
@@END_TABLE@@

   Enumeration_Type_Id : constant Safir.Dob.Typesystem.Type_Id := @_TYPEID_@;
   Checksum : constant Safir.Dob.Typesystem.Type_Id := @_CHECKSUM_@;

   -- Check that there is no enumeration mismatch.
   -- If there is exception Configuration_Error_Exception will be raised.
   --
   procedure Check_For_Mismatch
     (The_Checksum : Safir.Dob.Typesystem.Type_Id := Checksum);

   -- Convert an enumeration value to the string as it is specified in the Dou file.
   --
   function To_Dou_String (Value : Enumeration) return Unbounded_Wide_String;

   -- Convert the dou string value of an enumeration to an enumeration value.
   --
   function From_Dou_String (Value : Unbounded_Wide_String) return Enumeration;

   -- ==================
   -- Containers package
   -- ==================
   package Containers is

      type Container is new
        Safir.Dob.Typesystem.Enumeration_Container_Base.Enumeration_Container_Base_Type with private;
      type Container_Access is access all Container;

      -- The type returned from generated member functions.
      type Container_Proxy is tagged private;

      ---------------------
      -- Container proxy --
      ---------------------

      function Create_Container_Proxy (Container_Ptr : in Container_Access)
                                    return Container_Proxy;

      -- Set the value of the container.
      -- Null and change flags are updated accordingly.
      --
      -- Parameters: Value - The new value.
      -- Exceptions: Configuration_Error_Exception - Enumeration type mismatch,
      --                                             recompile your application.
      --
      procedure Set_Val (Self  : in Container_Proxy'Class;
                         Value : in Enumeration);

      -- Get the value of the container.
      --
      -- Returns: The value of the container.
      -- Exceptions: Null_Exception - The container is null.
      --             Configuration_Error_Exception - Enumeration type mismatch,
      --                                             recompile your application.
      --
      function Get_Val (Self : in Container_Proxy'Class) return Enumeration;

      -- Equality operator.
      -- This operator lets you compare two containers. It will return false if
      -- one, and only one, container is null and true if both containers are null.
      -- The change flags are ignored.
      --
      function "=" (Left : in Container_Proxy'Class; Right : in Container_Proxy'Class) return Boolean;

      -- Equality operator.
      -- This operator lets you compare the container with an enumeration value.
      -- It will return false if the container is null or
      -- the values are not equal. The change flag is ignored.
      --
      function "=" (Self : in Container_Proxy'Class; Right : in Enumeration) return Boolean;

      -- Equality operator that enables expressions of the form
      -- Enumeration_Value = Container.
      --
      function "=" (Left : in Enumeration; Self : in Container_Proxy'Class) return Boolean;

      -- Is the container set to null?
      --
      -- Returns: True if the container is set to null.
      --
      function Is_Null (Self : in Container_Proxy'Class) return Boolean;

      -- Set the container to null.
      --
      procedure Set_Null (Self : in Container_Proxy'Class);

      -- Is the change flag set on the container?
      --
      function Is_Changed (Self : in Container_Proxy'Class) return Boolean;

      -- Set the container's change flag.
      --
      -- It should be fairly unusual for an application to have to use this
      -- operation. There is nothing dangerous about it, but are you sure this
      -- is the operation you were after?
      --
      -- The change flag is how receivers of objects can work out what the
      -- sender really wanted done on the object.
      --
      procedure Set_Changed (Self : in  Container_Proxy'Class;
                             To   : in     Boolean);

      -- Set the ordinal value of the enumeration container.
      --
      -- Note: Only applications that need to use "anonymous enums" should
      -- use this method. All other applications should be using the Set_Val method.
      --
      -- Parameters: Value - The new value.
      -- Exceptions: Illegal_Value_Exception - The value is not in the range of
      --                                       the enumeration.
      --
      procedure Set_Ordinal (Self  : in Container_Proxy'Class;
                             Value : in Safir.Dob.Typesystem.Enumeration_Value);

      -- Get the ordinal value of the enumeration container.
      --
      -- Note: Only applications that need to use "anonymous enums" should
      -- use this method. All other applications should be using the Get_Val method.
      --
      -- Returns: The ordinal value of the container.
      -- Exceptions: Null_Exception - The container is null.
      --
      function Get_Ordinal (Self : in Container_Proxy'Class)
                         return Safir.Dob.Typesystem.Enumeration_Value;

      ---------------
      -- Container --
      ---------------

      procedure Set_Val (Self  : in out Container;
                         Value : in Enumeration);

      function Get_Val (Self : in Container) return Enumeration;

      function "=" (Left : in Container; Right : in Container) return Boolean;

      function "=" (Self : in Container; Right : in Enumeration) return Boolean;

      function "=" (Left : in Enumeration; Self : in Container) return Boolean;

      overriding function Is_Null (Self : in Container) return Boolean;

      overriding procedure Set_Null (Self : in out Container);

      overriding function Is_Changed (Self : in Container) return Boolean;

      overriding procedure Set_Changed (Self : in out Container;
                                        To   : in     Boolean);

      overriding procedure Copy (Self : in out Container;
                                 That : in Container_Base_Type'Class);

      overriding procedure Set_Ordinal (Self  : in out Container;
                                        Value : in Safir.Dob.Typesystem.Enumeration_Value);

      overriding function Get_Ordinal (Self : in Container) return Safir.Dob.Typesystem.Enumeration_Value;

      overriding procedure Init (Self       : in out Container;
                                 Value      : in Safir.Dob.Typesystem.Enumeration_Value;
                                 Is_Null    : in Boolean;
                                 Is_Changed : in Boolean);

   private
      type Container is new Safir.Dob.Typesystem.Enumeration_Container_Base.Enumeration_Container_Base_Type with record
         Is_Changed : Boolean := False;
         Is_Null    : Boolean := True;
         Value      : Safir.Dob.Typesystem.Enumeration_Value := 0;
      end record;

      type Container_Proxy is tagged record
         Container_Ptr : Container_Access;
      end record;

   end Containers;

   -- ========================
   -- Array containers package
   -- ========================
   package Array_Containers is

      type Array_Container (Max_Index : Safir.Dob.Typesystem.Index) is tagged private;
      type Array_Container_Access is access all Array_Container;

      -- Type returned from generated member functions.
      type Array_Container_Proxy is tagged private;

      ---------------------------
      -- Array container proxy --
      ---------------------------

      function Create_Array_Container_Proxy (Array_Container_Ptr : in Array_Container_Access)
                                             return Array_Container_Proxy;

      -- Access to an array element
      --
      function Element (Self : in Array_Container_Proxy'Class; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Proxy;

      -- Check if any element in the array has a change flag set on it.
      --
      -- The change flag gets updated every time the contained value changes.
      --
      function Is_Changed (Self : in Array_Container_Proxy'Class) return Boolean;

      -- Set the change flag on all elements in the array.
      --
      -- It should be fairly unusual for an application to have to use this
      -- operation. There is nothing dangerous about it, but are you sure this
      -- is the operation you were after?
      --
      -- The change flag is how receivers of objects can work out what the
      -- sender really wanted done on the object.
      --
      procedure Set_Changed (Self : in  Array_Container_Proxy'Class;
                             To   : in  Boolean);

      ---------------------
      -- Array container --
      ---------------------

      function Element (Self : in Array_Container; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Access;

      function Is_Changed (Self : in Array_Container) return Boolean;

      procedure Set_Changed (Self : in out Array_Container;
                             To   : in  Boolean);


   private

      type Array_T is array (Safir.Dob.Typesystem.Array_Index range <>) of aliased Containers.Container;

      type Array_Container (Max_Index : Safir.Dob.Typesystem.Index) is tagged record
         Arr : Array_T (0 .. Max_Index);
      end record;

      type Array_Container_Proxy is tagged record
         Array_Container_Ptr : Array_Container_Access;
      end record;

   end Array_Containers;

end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=exception
@@--
@@-- EXCEPTION
@@--
package @_NAMESPACE_@.@_CLASS_@ is

@@IF@@ @_EXIST:CLASSSUMMARY_@
   --
   --  @_REPLACE_ALL(\n/\n   --  ):CLASSSUMMARY_@
   --
@@END_IF@@
   Xception : exception;
private
   --  This is needed to make sure that a body is allowed.
   --  It does not do anything, and it cannot be called...
   procedure Dummy;
end @_NAMESPACE_@.@_CLASS_@;
@@END_IF@@
@@END_IF@@
@@-------------------------------------------------------------------------------
@@--
@@--  Copyright Saab AB, 2005-2009 (http://www.safirsdk.com)
@@--
@@--  Created by: Henrik Sundberg / sthesu
@@--
@@-------------------------------------------------------------------------------
@@IF@@ @_SECTION_@ = "Parameters"
File_Suffix:".adb"
Filename_Separator:"-"
Output_Directory:"ada/"
Namespace_Separator:"."
@@-- Namspace prefixes are defined separately, since they are supposed to differ between projects.
@@-- Files matching <Namespace><Namespace_Prefix_File_Suffix> are searched for a line containing the namespace prefix
@@-- to use for <Namespace>. E.g. Namespace_Prefix_File_Prefix:"-java.namespace.txt" will match the file
@@-- "Safir-java.namespace.txt". The first non comment line in the file is used as namespace prefix.
@@-- Empty value is used when no namespace prefixes are to be added.
Namespace_Prefix_File_Suffix:""
@@-- Parent filename "" defaults to the namespace with added file suffix.
Parent_Filename:""
@@
@@ *_Underscore_Style is one of: "Add", "Remove", "Keep"
@@
Namespace_Underscore_Style:"Add"
Filename_Underscore_Style:"Add"
Classname_Underscore_Style:"Add"
Membername_Underscore_Style:"Add"
Enum_Value_Underscore_Style:"Add"
@@
@@ *_Case_Style is one of: "Upper", "Lower", "Camel", "Keep"
@@
Namespace_Case_Style:"Keep"
Filename_Case_Style:"Lower"
Classname_Case_Style:"Keep"
Membername_Case_Style:"Keep"
Enum_Value_Case_Style:"Keep"
Object_Type:"Object"
Index_Type:"Int32"
@@--
@@-- Exceptions are defined like this:
@@--   Exception:<dou>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Exception:illegalValue:"Safir::Dots::IllegalValue":"dots/dots_defs"
@@-- defines "illegalValue" as an exceptionname in the xml-syntax (dou-file).
@@-- And "Safir::Dots::IllegalValue" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Exception:Exception:"":""
Exception:FundamentalException:"":""
Exception:Safir.Dob.Typesystem.Configuration_Error_Exception:"Safir.Dob.Typesystem.Configuration_Error_Exception":""
Exception:Safir.Dob.Typesystem.Incompatible_Types_Exception:"Safir.Dob.Typesystem.Incompatible_Types_Exception":""
Exception:Safir.Dob.Typesystem.Illegal_Value_Exception:"Safir.Dob.Typesystem.Illegal_Value_Exception":""
Exception:Safir.Dob.Typesystem.Null_Value_Exception:"Safir.Dob.Typesystem.Null_Exception":""
Exception:Safir.Dob.Typesystem.Read_Only_Exception:"Safir.Dob.Typesystem.Read_Only_Exception":""
Exception:Safir.Dob.Typesystem.Software_Violation_Exception:"Safir.Dob.Typesystem.Software_Violation_Exception":""
@@--
@@-- Types are defined like this:
@@--   Type:<dou>:<set/get>:"<generated>":"<dependency>"
@@-- E.g.:
@@--   Type:String:String:"Safir::Dots::String":"dots/dots_defs"
@@-- defines "String" as a typename in the xml-syntax (dou-file).
@@-- And "String" to be the @_UNIFORM_MEMBERTYPE_@, used in the name of Set/Get routines.
@@-- And "Safir::Dots::String" to be used where the actual type is needed in the code.
@@-- And that "dots/dots_defs" (with file extension added below) is to be included due to this.
@@--
Type:Int32:Int_32:"Safir.Dob.Typesystem.Int_32":""
Type:Int64:Int_64:"Safir.Dob.Typesystem.Int_64":""
Type:Float32:Float_32:"Safir.Dob.Typesystem.Float_32":""
Type:Float64:Float_64:"Safir.Dob.Typesystem.Float_64":""
Type:Boolean:Boolean:"Boolean":""
Type:String:String:"Unbounded_Wide_String":":String:"
Type:EntityId:Entity_Id:"Safir.Dob.Typesystem.Entity_Id":":Entity_Id:"
Type:TypeId:Type_Id:"Safir.Dob.Typesystem.Type_Id":""
Type:InstanceId:Instance_Id:"Safir.Dob.Typesystem.Instance_Id":":Instance_Id:"
Type:ChannelId:Channel_Id:"Safir.Dob.Typesystem.Channel_Id":":Channel_Id:"
Type:HandlerId:Handler_Id:"Safir.Dob.Typesystem.Handler_Id":":Handler_Id:"
Type:Object:Object:"Safir.Dob.Typesystem.Object":""
Type:Binary:Binary:"Safir.Dob.Typesystem.Binary_Vectors.Vector":""
Type:Ampere32:Float_32:"Safir.Dob.Typesystem.Si_32.Ampere":""
Type:CubicMeter32:Float_32:"Safir.Dob.Typesystem.Si_32.Cubic_Meter":""
Type:Hertz32:Float_32:"Safir.Dob.Typesystem.Si_32.Hertz":""
Type:Joule32:Float_32:"Safir.Dob.Typesystem.Si_32.Joule":""
Type:Kelvin32:Float_32:"Safir.Dob.Typesystem.Si_32.Kelvin":""
Type:Kilogram32:Float_32:"Safir.Dob.Typesystem.Si_32.Kilogram":""
Type:Meter32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter":""
Type:MeterPerSecond32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter_Per_Second":""
Type:MeterPerSecondSquared32:Float_32:"Safir.Dob.Typesystem.Si_32.Meter_Per_Second_Squared":""
Type:Newton32:Float_32:"Safir.Dob.Typesystem.Si_32.Newton":""
Type:Pascal32:Float_32:"Safir.Dob.Typesystem.Si_32.Pascal":""
Type:Radian32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian":""
Type:RadianPerSecond32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian_Per_Second":""
Type:RadianPerSecondSquared32:Float_32:"Safir.Dob.Typesystem.Si_32.Radian_Per_Second_Squared":""
Type:Second32:Float_32:"Safir.Dob.Typesystem.Si_32.Second":""
Type:SquareMeter32:Float_32:"Safir.Dob.Typesystem.Si_32.Square_Meter":""
Type:Steradian32:Float_32:"Safir.Dob.Typesystem.Si_32.Steradian":""
Type:Volt32:Float_32:"Safir.Dob.Typesystem.Si_32.Volt":""
Type:Watt32:Float_32:"Safir.Dob.Typesystem.Si_32.Watt":""
Type:Ampere64:Float_64:"Safir.Dob.Typesystem.Si_64.Ampere":""
Type:CubicMeter64:Float_64:"Safir.Dob.Typesystem.Si_64.Cubic_Meter":""
Type:Hertz64:Float_64:"Safir.Dob.Typesystem.Si_64.Hertz":""
Type:Joule64:Float_64:"Safir.Dob.Typesystem.Si_64.Joule":""
Type:Kelvin64:Float_64:"Safir.Dob.Typesystem.Si_64.Kelvin":""
Type:Kilogram64:Float_64:"Safir.Dob.Typesystem.Si_64.Kilogram":""
Type:Meter64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter":""
Type:MeterPerSecond64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter_Per_Second":""
Type:MeterPerSecondSquared64:Float_64:"Safir.Dob.Typesystem.Si_64.Meter_Per_Second_Squared":""
Type:Newton64:Float_64:"Safir.Dob.Typesystem.Si_64.Newton":""
Type:Pascal64:Float_64:"Safir.Dob.Typesystem.Si_64.Pascal":""
Type:Radian64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian":""
Type:RadianPerSecond64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian_Per_Second":""
Type:RadianPerSecondSquared64:Float_64:"Safir.Dob.Typesystem.Si_64.Radian_Per_Second_Squared":""
Type:Second64:Float_64:"Safir.Dob.Typesystem.Si_64.Second":""
Type:SquareMeter64:Float_64:"Safir.Dob.Typesystem.Si_64.Square_Meter":""
Type:Steradian64:Float_64:"Safir.Dob.Typesystem.Si_64.Steradian":""
Type:Volt64:Float_64:"Safir.Dob.Typesystem.Si_64.Volt":""
Type:Watt64:Float_64:"Safir.Dob.Typesystem.Si_64.Watt":""
@@--
@@--
@@--
@@--
@@--
@@--
@@ELSIF@@ @_SECTION_@ = "Code"
@@IF@@ @_UNITTYPE_@=property
@@--
@@-- PROPERTY
@@--
@@IF@@ not @_MATCH(:String:):DEPENDENCY_@ and @_EXIST:MEMBER_@
with Ada.Strings.Wide_Unbounded; use Ada.Strings.Wide_Unbounded;
@@END_IF@@
with Safir.Dob.Typesystem.Members;
pragma Elaborate_All (Safir.Dob.Typesystem.members);
pragma Warnings (Off, Safir.Dob.Typesystem.Members);
with Safir.Dob.Typesystem.Operations;
with Safir.Dob.Typesystem.Properties;
pragma Warnings (Off, Safir.Dob.Typesystem.Properties);
pragma Warnings ("D");  -- turn off warnings for implicit dereference

package body @_NAMESPACE_@.@_CLASS_@ is

@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
   @_MEMBER_@_Member_Idx : Safir.Dob.Typesystem.Member_Index;
@@END_IF@@
@@END_TABLE@@

   ----------------
   -- Definition --
   ----------------

   function Has_Property
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) return Boolean is
   begin
      return Safir.Dob.Typesystem.Operations.Has_Property (Safir.Dob.Typesystem.Object.Internal_Get_Raw_Ptr (Obj).Get_Type_Id, Class_Type_Id);
   end Has_Property;

@@IF@@ @_MEMBER'LENGTH_@ > 0
   -------------
   -- Members --
   -------------

@@END_IF@@
@@TABLE@@
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---
   -- @_MEMBER_@ --
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---

@@IF@@ @_EXIST:MEMBERISARRAY_@
   function @_MEMBER_@_Array_Size
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) return Safir.Dob.Typesystem.Int_32 is
   begin
      return Safir.Dob.Typesystem.Properties.Get_Array_Size (Safir.Dob.Typesystem.Object.Internal_Get_Raw_Ptr (Obj).Get_Type_Id, Class_Type_Id, @_MEMBER_@_Member_Idx);
   end @_MEMBER_@_Array_Size;

@@END_IF@@
   procedure Set_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_EXIST:MEMBERISARRAY_@
      Index : in Safir.Dob.Typesystem.Array_Index;
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      Ptr : in @_MEMBERTYPE_@.Smart_Pointer'Class) is
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      Value : in @_MEMBERTYPE_@.Enumeration;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum) is
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
      Value : in @_MEMBERTYPE_@.@_UNIFORM_MEMBERTYPE_@_Type) is
@@ELSE@@
      Value : in @_MEMBERTYPE_@) is
@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index : constant Safir.Dob.Typesystem.Array_Index := 0;
@@END_IF@@
   begin
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=Safir.Dob.Typesystem.Object
      Safir.Dob.Typesystem.Properties.Set (Obj, Class_Type_Id, Ptr, @_MEMBER_@_Member_Idx, Index);
@@ELSE@@
      Safir.Dob.Typesystem.Properties.Set (Obj, Class_Type_Id, Ptr, @_MEMBER_@_Member_Idx, Index);
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      @_MEMBERTYPE_@.Check_For_Mismatch (Checksum);
      Safir.Dob.Typesystem.Properties.Set_Enum (Obj, Class_Type_Id, @_MEMBERTYPE_@.Enumeration'Pos (Value), @_MEMBER_@_Member_Idx, Index);
@@ELSE@@
      Safir.Dob.Typesystem.Properties.Set (Obj, Class_Type_Id, Value, @_MEMBER_@_Member_Idx, Index);
@@END_IF@@
   end Set_@_MEMBER_@;

@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
   procedure Set_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_EXIST:MEMBERISARRAY_@
      Index : in Safir.Dob.Typesystem.Array_Index;
      Value : in Safir.Dob.Typesystem.Enumeration_Value) is
@@ELSE@@
      Value : in Safir.Dob.Typesystem.Enumeration_Value) is
      Index : constant Safir.Dob.Typesystem.Array_Index := 0;
@@END_IF@@
   begin
      Safir.Dob.Typesystem.Properties.Set_Enum (Obj, Class_Type_Id, Value, @_MEMBER_@_Member_Idx, Index);
   end Set_Ordinal_@_MEMBER_@;

@@END_IF@@
   procedure Set_Null_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj   : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index) is
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) is
@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
   begin
      Safir.Dob.Typesystem.Properties.Set_Null (Obj, Class_Type_Id, @_MEMBER_@_Member_Idx, Index);
   end Set_Null_@_MEMBER_@;

   function Is_Null_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj   : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
     return Boolean is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
   begin
      return Safir.Dob.Typesystem.Properties.Is_Null (Obj, Class_Type_Id, @_MEMBER_@_Member_Idx, Index);
   end Is_Null_@_MEMBER_@;

   function Is_Changed_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj   : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
     return Boolean is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
   begin
      return Safir.Dob.Typesystem.Properties.Is_Changed (Obj, Class_Type_Id, @_MEMBER_@_Member_Idx, Index);
   end Is_Changed_@_MEMBER_@;

   function Is_Read_Only_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
      return Boolean is
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
      return Boolean is
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
   begin
      return Safir.Dob.Typesystem.Properties.Is_Read_Only (Obj, Class_Type_Id, @_MEMBER_@_Member_Idx, Index);
   end Is_Read_Only_@_MEMBER_@;

   function Get_@_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
     (Obj    : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      Index : in Safir.Dob.Typesystem.Array_Index;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum)
@@ELSE@@
      Index : in Safir.Dob.Typesystem.Array_Index)
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Checksum : in Safir.Dob.Typesystem.Type_Id := @_MEMBERTYPE_@.Checksum)
@@ELSE@@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
@@END_IF@@
@@END_IF@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
     return @_MEMBERTYPE_@.Smart_Pointer is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
      Ptr    : constant Safir.Dob.Typesystem.Object.Smart_Pointer'Class :=
                 Safir.Dob.Typesystem.Properties.Get
                   (Obj, Class_Type_Id, @_MEMBER_@_Member_Idx, Index);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
     return @_MEMBERTYPE_@.Enumeration is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
      Value  : Safir.Dob.Typesystem.Enumeration_Value;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
     return @_MEMBERTYPE_@.@_UNIFORM_MEMBERTYPE_@_Type is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
      Value  : @_MEMBERTYPE_@.@_UNIFORM_MEMBERTYPE_@_Type;
@@ELSE@@
     return @_MEMBERTYPE_@ is
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@ELSE@@
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
      Value  : @_MEMBERTYPE_@;
@@END_IF@@
   begin
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      return @_MEMBERTYPE_@.Smart_Pointer (Ptr);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
      @_MEMBERTYPE_@.Check_For_Mismatch (Checksum);
      Safir.Dob.Typesystem.Properties.Get_Enum (Obj, Class_Type_Id, Value, @_MEMBER_@_Member_Idx, Index);
      return @_MEMBERTYPE_@.Enumeration'Val (Value);
@@ELSE@@
      Safir.Dob.Typesystem.Properties.Get (Obj, Class_Type_Id, Value, @_MEMBER_@_Member_Idx, Index);
      return Value;
@@END_IF@@
   end Get_@_MEMBER_@;

@@IF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
@@IF@@ @_EXIST:MEMBERISARRAY_@
   function Get_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class;
      Index : in Safir.Dob.Typesystem.Array_Index)
     return Safir.Dob.Typesystem.Enumeration_Value is
      Value  : Safir.Dob.Typesystem.Enumeration_Value;
@@ELSE@@
   function Get_Ordinal_@_MEMBER_@
     (Obj : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class)
     return Safir.Dob.Typesystem.Enumeration_Value is
      Value  : Safir.Dob.Typesystem.Enumeration_Value;
      Index  : constant Safir.Dob.Typesystem.Int_32 := 0;
@@END_IF@@
   begin
      Safir.Dob.Typesystem.Properties.Get_Enum (Obj, Class_Type_Id, Value, @_MEMBER_@_Member_Idx, Index);
      return Value;
   end Get_Ordinal_@_MEMBER_@;

@@END_IF@@

@@END_TABLE@@
@@IF@@ @_EXIST:MEMBER_@
begin
@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:MEMBER_@
   @_MEMBER_@_Member_Idx := Safir.Dob.Typesystem.Members.Get_Index (Class_Type_Id, To_Unbounded_Wide_String ("@_XMLMEMBER_@"));
@@END_IF@@
@@END_TABLE@@

end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=class
@@--
@@-- CLASS
@@--
with Safir.Dob.Typesystem.Parameters;
pragma Elaborate_All (Safir.Dob.Typesystem.Parameters);
pragma Warnings (Off, Safir.Dob.Typesystem.Parameters);
with Safir.Dob.Typesystem.Blob_Operations;
pragma Elaborate_All (Safir.Dob.Typesystem.Blob_Operations);
with Safir.Dob.Typesystem.Object_Factory;
pragma Elaborate_All (Safir.Dob.Typesystem.Object_Factory);
@@IF@@ @_MATCH(.*:Entity_Id:.*):DEPENDENCY_@
@@IF@@ not((@_PARAMETER'Length_@>0_@ or @_CREATEROUTINE'Length_@>0 )and not @_MEMBER'Length_@>0)
with Safir.Dob.Typesystem.Entity_Id;
pragma Warnings (Off, Safir.Dob.Typesystem.Entity_Id);
@@END_IF@@
@@IF@@ not @_MATCH(.*:Instance_Id:.*):DEPENDENCY_@
with Safir.Dob.Typesystem.Instance_Id;
pragma Warnings (Off, Safir.Dob.Typesystem.Instance_Id);
@@END_IF@@
@@END_IF@@
@@IF@@ @_MATCH(.*:Instance_Id:.*):DEPENDENCY_@
@@IF@@ not((@_PARAMETER'Length_@>0_@ or @_CREATEROUTINE'Length_@>0 )and not @_MEMBER'Length_@>0)
with Safir.Dob.Typesystem.Instance_Id;
pragma Warnings (Off, Safir.Dob.Typesystem.Instance_Id);
@@END_IF@@
@@END_IF@@
@@IF@@ @_MATCH(.*:Channel_Id:.*):DEPENDENCY_@
@@IF@@ not((@_PARAMETER'Length_@>0_@ or @_CREATEROUTINE'Length_@>0 )and not @_MEMBER'Length_@>0)
with Safir.Dob.Typesystem.Channel_Id;
pragma Warnings (Off, Safir.Dob.Typesystem.Channel_Id);
@@END_IF@@
@@END_IF@@
@@IF@@ @_MATCH(.*:Handler_Id:.*):DEPENDENCY_@
@@IF@@ not((@_PARAMETER'Length_@>0_@ or @_CREATEROUTINE'Length_@>0 )and not @_MEMBER'Length_@>0)
with Safir.Dob.Typesystem.Handler_Id;
pragma Warnings (Off, Safir.Dob.Typesystem.Handler_Id);
@@END_IF@@
@@END_IF@@
with System.Address_To_Access_Conversions;
with Ada.Exceptions;
with Ada.Unchecked_Conversion;
pragma Warnings ("D");  -- turn off warnings for implicit dereference

package body @_NAMESPACE_@.@_CLASS_@ is

@@TABLE@@
@@IF@@ @_EXIST:PARAMETER_@
   @_PARAMETER_@_Parameter_Idx : Safir.Dob.Typesystem.Parameter_Index;
@@END_IF@@
@@END_TABLE@@

   Initial_Size : Safir.Dob.Typesystem.Int_32;

@@IF@@ @_EXIST:MEMBER_@
   package Conv is new System.Address_To_Access_Conversions (@_CLASS_@_Type);

@@END_IF@@
   package Arr_Conv is new System.Address_To_Access_Conversions (Array_Containers.Array_Container);

   procedure Throw (E : Ada.Exceptions.Exception_Id; Message : String := "")
                    renames  Ada.Exceptions.Raise_Exception;

   overriding
   function Get_Type_Id (Self : in @_CLASS_@_Type) return Safir.Dob.Typesystem.Type_Id is
      pragma Unreferenced (Self);
   begin
      return Class_Type_Id;
   end Get_Type_Id;

   overriding
   function Is_Changed (Self : in @_CLASS_@_Type) return Boolean is
   begin
@@IF@@ @_EXIST:MEMBER_@
      return @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self).Is_Changed or else
@@TABLE@@
@@IF@@ @_TABLE_LINE_@=@_MEMBER'length_@
         Self.@_MEMBER_@_Member.Is_Changed;
@@ELSE@@
         Self.@_MEMBER_@_Member.Is_Changed or else
@@END_IF@@
@@END_TABLE@@
@@ELSE@@
      return @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self).Is_Changed;
@@END_IF@@
   end Is_Changed;

   overriding
   procedure Set_Changed (Self : in out @_CLASS_@_Type; Changed : in Boolean) is
   begin
      @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self).Set_Changed (Changed);
@@TABLE@@
      Self.@_MEMBER_@_Member.Set_Changed (Changed);
@@END_TABLE@@
   end Set_Changed;

   -- ==================
   -- Containers package
   -- ==================
   package body Containers is

      ---------------------
      -- Container proxy --
      ---------------------

      function Create_Container_Proxy (Container_Ptr : in Container_Access)
                                      return Container_Proxy is
         Proxy : Container_Proxy;
      begin
         Proxy.Container_Ptr := Container_Ptr;
         return Proxy;
      end Create_Container_Proxy;

      procedure Set_Ptr (Self : in Container_Proxy'Class;
                         Ptr  : in Smart_Pointer'Class) is
      begin
         Self.Container_Ptr.Set_Ptr (Ptr);
      end Set_Ptr;

      function Get_Ptr (Self : in Container_Proxy'Class) return Smart_Pointer'Class is
      begin
         return Self.Container_Ptr.Get_Ptr;
      end Get_Ptr;

      function Ref (Self : in Container_Proxy'Class) return @_CLASS_@_Class_Access is
      begin
         return Self.Container_Ptr.Ref;
      end Ref;

      function Is_Null (Self : in Container_Proxy'Class) return Boolean is
      begin
         return Self.Container_Ptr.Is_Null;
      end Is_Null;

      procedure Set_Null (Self : in Container_Proxy'Class) is
      begin
         Self.Container_Ptr.Set_Null;
      end Set_Null;

      function Is_Changed (Self : in Container_Proxy'Class) return Boolean is
      begin
         return Is_Changed (Self.Container_Ptr.all);
      end Is_Changed;

      procedure Set_Changed (Self : in  Container_Proxy'Class;
                             To   : in     Boolean) is
      begin
         Self.Container_Ptr.Set_Changed (To);
      end Set_Changed;

      function Is_Changed_Here (Self : in Container_Proxy'Class) return Boolean is
      begin
         return Self.Container_Ptr.Is_Changed_Here;
      end Is_Changed_Here;

      procedure Set_Changed_Here (Self    : in Container_Proxy'Class;
                                  To      : in Boolean) is
      begin
         Self.Container_Ptr.Set_Changed_Here (To);
      end Set_Changed_Here;

      ---------------
      -- Container --
      ---------------

      function Get_Ptr (Self : in Container) return Smart_Pointer'Class is
      begin
         if Self.Is_Null then
            Throw (Safir.Dob.Typesystem.Null_Exception'Identity, "Object is null");
         end if;
         declare
            Raw_Obj_Ptr : constant Safir.Dob.Typesystem.Object.Object_Class_Access :=
                            Self.Obj_Ptr.Ref;
            -- Create a smart pointer with the correct tag.
            Smart_Ptr : Smart_Pointer'Class :=
                    Smart_Pointer'Class (Safir.Dob.Typesystem.Object_Factory.Create_Smart_Ptr
                              (Raw_Obj_Ptr.Get_Type_Id));
         begin
            Safir.Dob.Typesystem.Object.Internal_Initialize_From_Existing (Smart_Ptr, Self.Obj_Ptr);
            return Smart_Ptr;
         end;
      end Get_Ptr;

      function Ref (Self : in Container) return @_CLASS_@_Class_Access is
      begin
         if Self.Is_Null then
            Throw (Safir.Dob.Typesystem.Null_Exception'Identity, "Object is null");
         end if;
         return Ref (Self.Obj_Ptr);
      end Ref;

      function Is_Null (Self : in Container) return Boolean is
      begin
         return @_CLASS_@_Class_Access'(Ref (Self.Obj_Ptr)) = null;
      end Is_Null;

      procedure Set_Null (Self : in out Container) is
         Null_Smart_Ptr : Smart_Pointer;
      begin
         Self.Is_Changed := True;
         Self.Obj_Ptr := Null_Smart_Ptr;
      end Set_Null;

      function Is_Changed (Self : in Container) return Boolean is
         Class_Access : constant @_CLASS_@_Class_Access := Ref (Self.Obj_Ptr);
      begin
         return Self.Is_Changed or else (not Self.Is_Null and then Class_Access.Is_Changed);
      end Is_Changed;

      procedure Set_Changed (Self : in out Container;
                             To   : in     Boolean) is
         Class_Access : constant @_CLASS_@_Class_Access := Ref (Self.Obj_Ptr);
      begin
         Self.Is_Changed := To;
         if not Self.Is_Null then
            Class_Access.Set_Changed (To);
         end if;
      end Set_Changed;

      procedure Copy (Self : in out Container;
                      That : in Container_Base_Type'Class) is
         Converted_That : constant Container := Container (That);
         Null_Smart_Ptr : Smart_Pointer;
         Obj_Access : constant @_CLASS_@_Class_Access := Ref (Converted_That.Obj_Ptr);
      begin
         Self.Is_Changed := Converted_That.Is_Changed;
         if That.Is_Null then
            Self.Obj_Ptr := Null_Smart_Ptr;
         else            
            Self.Obj_Ptr := Smart_Pointer (Obj_Access.Clone);
         end if;
      end Copy;

      procedure Set_Ptr (Self : in out Container;
                         Ptr  : in Safir.Dob.Typesystem.Object.Smart_Pointer'Class) is
      begin
         Self.Is_Changed := True;
         Self.Obj_Ptr := Smart_Pointer (Ptr);
      end Set_Ptr;

      function Is_Changed_Here (Self : in Container)
                               return Boolean is
      begin
         return Self.Is_Changed;
      end Is_Changed_Here;

      procedure Set_Changed_Here (Self    : in out Container;
                                  To      : in Boolean) is
      begin
         Self.Is_Changed := To;
      end Set_Changed_Here;

      function Get_Member (Self         : in Container;
                           Member       : in Safir.Dob.Typesystem.Member_Index;
                           Idx          : in Safir.Dob.Typesystem.Array_Index) return
        Safir.Dob.Typesystem.Container_Base.Container_Base_Access is
         Class_Access : constant @_CLASS_@_Class_Access := Ref (Self.Obj_Ptr);
      begin
         if Self.Is_Null then
            Throw (Safir.Dob.Typesystem.Null_Exception'Identity, "Object is null");
         end if;
         return Class_Access.Get_Member (Member, Idx);
      end Get_Member;

      package Conv is new System.Address_To_Access_Conversions (Container);

      function Get_Object_Pointer (Self : in Container) return
      access Safir.Dob.Typesystem.Object.Smart_Pointer'Class is
         Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
      begin
         return Self_Ptr.Obj_Ptr'Access;
      end Get_Object_Pointer;

      procedure Set_Object_Pointer (Self       : in out Container;
                                    Object_Ptr : access Safir.Dob.Typesystem.Object.Smart_Pointer'Class) is
      begin
         Self.Obj_Ptr := Smart_Pointer (Object_Ptr.all);
      end Set_Object_Pointer;
      
      procedure Reset_Object_Pointer (Self : in out Container) is
         Null_Smart_Ptr : Smart_Pointer;
      begin
         Self.Obj_Ptr := Null_Smart_Ptr;
      end Reset_Object_Pointer;

      function Calculate_Blob_Size (Self : in Container)
                                    return Safir.Dob.Typesystem.Int_32 is
         Class_Access : constant @_CLASS_@_Class_Access := Ref (Self.Obj_Ptr);
      begin
         if Self.Is_Null then
            return 0;
         end if;
         return Class_Access.Calculate_Blob_Size;
      end Calculate_Blob_Size;

      procedure Adjust (Self : in out Container) is
         Obj_Access : constant @_CLASS_@_Class_Access := Ref (Self.Obj_Ptr);
      begin
         if not Self.Is_Null then
            Self.Obj_Ptr := Smart_Pointer (Obj_Access.Clone);
         end if;  
      end Adjust;      

   end Containers;

   -- ========================
   -- Array containers package
   -- ========================
   package body Array_Containers is

      ---------------------------
      -- Array container proxy --
      ---------------------------

      function Create_Array_Container_Proxy (Array_Container_Ptr : in Array_Container_Access)
                                             return Array_Container_Proxy is
         Proxy : Array_Container_Proxy;
      begin
         Proxy.Array_Container_Ptr := Array_Container_Ptr;
         return Proxy;
      end Create_Array_Container_Proxy;

      function Element (Self : in Array_Container_Proxy'Class; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Proxy is
      begin
         return Containers.Create_Container_Proxy (Self.Array_Container_Ptr.Element (Index));
      end Element;

      function Is_Changed (Self : in Array_Container_Proxy'Class) return Boolean is
      begin
         return Array_Containers.Is_Changed (Self.Array_Container_Ptr.all);
      end Is_Changed;

      procedure Set_Changed (Self : in  Array_Container_Proxy'Class; To   : in  Boolean) is
      begin
         Array_Containers.Set_Changed (Self.Array_Container_Ptr.all, To);
      end Set_Changed;

      ---------------------
      -- Array container --
      ---------------------

      function Element (Self : in Array_Container; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Access is
         Self_Ptr : constant Arr_Conv.Object_Pointer := Arr_Conv.To_Pointer (Self'Address);
      begin
         return Self_Ptr.Arr (Index)'Access;
      end Element;

      function Is_Changed (Self : in Array_Container) return Boolean is
      begin
         for Idx in Self.Arr'Range loop
            if Self.Arr (Idx).Is_Changed then
               return True;
            end if;
         end loop;
         return False;
      end Is_Changed;

      procedure Set_Changed (Self : in out Array_Container; To : in  Boolean) is
      begin
         for Idx in Self.Arr'Range loop
            Self.Arr (Idx).Set_Changed (To);
         end loop;
      end Set_Changed;

   end Array_Containers;

@@IF@@ @_PARAMETER'LENGTH_@ > 0
   ----------------
   -- Parameters --
   ----------------

@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:PARAMETERISARRAY_@
   function @_PARAMETER_@_Array_Size return Safir.Dob.Typesystem.Int_32 is
   begin
      return Safir.Dob.Typesystem.Parameters.Get_Array_Size (Class_Type_Id, @_PARAMETER_@_Parameter_Idx);
   end @_PARAMETER_@_Array_Size;

@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.Smart_Pointer is
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.Enumeration is
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Entity_Id or @_UNIFORM_PARAMETERTYPE_@=Instance_Id or @_UNIFORM_PARAMETERTYPE_@=Channel_Id or @_UNIFORM_PARAMETERTYPE_@=Handler_Id
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@.@_UNIFORM_PARAMETERTYPE_@_Type is
@@ELSE@@
   function @_PARAMETER_@ (Index : in Safir.Dob.Typesystem.Array_Index) return @_PARAMETERTYPE_@ is
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.Smart_Pointer is
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.Enumeration is
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Entity_Id or @_UNIFORM_PARAMETERTYPE_@=Instance_Id or @_UNIFORM_PARAMETERTYPE_@=Channel_Id or @_UNIFORM_PARAMETERTYPE_@=Handler_Id
   function @_PARAMETER_@ return @_PARAMETERTYPE_@.@_UNIFORM_PARAMETERTYPE_@_Type is
@@ELSE@@
   function @_PARAMETER_@ return @_PARAMETERTYPE_@ is
@@END_IF@@
      Index : constant Safir.Dob.Typesystem.Array_Index := 0;
@@END_IF@@
@@IF@@ @_UNIFORM_PARAMETERTYPE_@=Object
   begin
      return @_PARAMETERTYPE_@.Smart_Pointer
        (Safir.Dob.Typesystem.Parameters.Get_Object
          (Class_Type_Id, @_PARAMETER_@_Parameter_Idx, Index));
@@ELSIF@@ @_UNIFORM_PARAMETERTYPE_@=Enumeration
   begin
      return @_PARAMETERTYPE_@.Enumeration'Val (Safir.Dob.Typesystem.Parameters.Get_@_UNIFORM_PARAMETERTYPE_@
                          (Class_Type_Id, @_PARAMETER_@_Parameter_Idx, Index));
@@ELSE@@
   begin
      return Safir.Dob.Typesystem.Parameters.Get_@_UNIFORM_PARAMETERTYPE_@
        (Class_Type_Id, @_PARAMETER_@_Parameter_Idx, Index);
@@END_IF@@
   end @_PARAMETER_@;

@@END_TABLE@@
   function Clone (Self : in @_CLASS_@_Type) return Safir.Dob.Typesystem.Object.Smart_Pointer'Class is
      Smart_Ptr : Smart_Pointer;
   begin
      Safir.Dob.Typesystem.Object.Internal_Initialize (Smart_Ptr, new @_CLASS_@_Type'(Self));
      return Smart_Ptr;
   end Clone;

@@IF@@ @_MEMBER'LENGTH_@ > 0
   -------------
   -- Members --
   -------------

@@END_IF@@
@@TABLE@@
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---
   -- @_MEMBER_@ --
   ---@_REPLACE_ALL([a-zA-Z0-9_]/-):MEMBER_@---

   function @_MEMBER_@_Member_Index return Safir.Dob.Typesystem.Member_Index is
   begin
      return @_MEMBER_@_Member_Idx;
   end @_MEMBER_@_Member_Index;

@@IF@@ @_EXIST:MEMBERISSTRING_@
   function @_MEMBER_@_Max_String_Length return Safir.Dob.Typesystem.Int_32 is
   begin
      return @_MEMBER_@_Max_String_Len;
   end @_MEMBER_@_Max_String_Length;

@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
   function @_MEMBER_@_Array_Size return Safir.Dob.Typesystem.Int_32 is
   begin
      return @_MEMBER_@_Size;
   end @_MEMBER_@_Array_Size;

@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Array_Containers.Array_Container_Access is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Self_Ptr.@_MEMBER_@_Member'Access;
   end @_MEMBER_@;
@@ELSE@@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_MEMBERTYPE_@.Array_Containers.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_MEMBERTYPE_@.Array_Containers.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.String_Container.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.String_Container.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.Binary_Container.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.Binary_Container.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Array_Containers.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Array_Containers.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_MEMBERTYPE_@_Container.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_MEMBERTYPE_@_Container.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSE@@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Array_Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Create_Array_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
@@IF@@ @_MEMBERTYPE_@=@_UNIT_@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Containers.Container_Access is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Self_Ptr.@_MEMBER_@_Member'Access;
   end @_MEMBER_@;
@@ELSE@@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_MEMBERTYPE_@.Containers.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_MEMBERTYPE_@.Containers.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@END_IF@@
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.String_Container.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.String_Container.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Boolean
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.Container_Instantiations.Boolean_Container.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return Safir.Dob.Typesystem.Binary_Container.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return Safir.Dob.Typesystem.Binary_Container.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Enumeration
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Containers.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@.Containers.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSIF@@ @_MATCH(Safir\.Dob\.Typesystem\.Si_..\..*):MEMBERTYPE_@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_MEMBERTYPE_@_Container.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_MEMBERTYPE_@_Container.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@ELSE@@
   function @_MEMBER_@
     (Self   : in @_CLASS_@_Type)
     return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Container_Proxy is
      Self_Ptr : constant Conv.Object_Pointer := Conv.To_Pointer (Self'Address);
   begin
      return @_REPLACE(Safir.Dob.Typesystem/Safir.Dob.Typesystem.Container_Instantiations):MEMBERTYPE_@_Container.Create_Container_Proxy (Self_Ptr.@_MEMBER_@_Member'Access);
   end @_MEMBER_@;
@@END_IF@@
@@END_IF@@

@@END_TABLE@@
   -------------------
   -- Smart pointer --
   -------------------

   function Ref (Self : in Smart_Pointer) return @_CLASS_@_Class_Access is
      function To_Ref is new Ada.Unchecked_Conversion
        (Safir.Dob.Typesystem.Object.Object_Class_Access,
         @_CLASS_@_Class_Access);
   begin
      return To_Ref (Safir.Dob.Typesystem.Object.Internal_Get_Raw_Ptr (Self));
   end Ref;

   ---------------------
   -- Create routines --
   ---------------------

   function Create return Smart_Pointer is
      Smart_Ptr : Smart_Pointer;
   begin
      Safir.Dob.Typesystem.Object.Internal_Initialize (Smart_Ptr, new @_CLASS_@_Type);
      return Smart_Ptr;
   end Create;

@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
   function Create_@_CREATEROUTINE_@ (
@@ELSE@@
   function Create_@_CREATEROUTINE_@ return Smart_Pointer is
@@END_IF@@
@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
@@IF@@ @_EXIST:CREATEPARAMETERISLAST_@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Smart_Pointer) return Smart_Pointer is
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Enumeration) return Smart_Pointer is
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Entity_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Instance_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Channel_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Handler_Id
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.@_UNIFORM_CREATEPARAMETERTYPE_@_Type) return Smart_Pointer is
@@ELSE@@
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@) return Smart_Pointer is
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Smart_Pointer;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Enumeration
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.Enumeration;
@@ELSIF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Entity_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Instance_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Channel_Id or @_UNIFORM_CREATEPARAMETERTYPE_@=Handler_Id
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@.@_UNIFORM_CREATEPARAMETERTYPE_@_Type;
@@ELSE@@
      @_CREATEPARAMETER_@ : @_CREATEPARAMETERTYPE_@;
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
      Object_Ptr : constant Smart_Pointer := Create;
      Object_Access : constant @_CLASS_@_Class_Access := Object_Ptr.Ref;
   begin
@@TABLE@@
@@IF@@ @_EXIST:CREATEPARAMETER_@
@@IF@@ @_UNIFORM_CREATEPARAMETERTYPE_@=Object
@@IF@@ @_EXIST:CREATEPARAMETERISARRAY_@
      Object_Access.@_CREATEPARAMETER_@.Element (0).Set_Ptr (@_CREATEPARAMETER_@);
@@ELSE@@
      Object_Access.@_CREATEPARAMETER_@.Set_Ptr (@_CREATEPARAMETER_@);
@@END_IF@@
@@ELSE@@
@@IF@@ @_EXIST:CREATEPARAMETERISARRAY_@
      Object_Access.@_CREATEPARAMETER_@.Element (0).Set_Val (@_CREATEPARAMETER_@);
@@ELSE@@
      Object_Access.@_CREATEPARAMETER_@.Set_Val (@_CREATEPARAMETER_@);
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
@@TABLE@@
@@IF@@ @_EXIST:CREATEVALUE_@
@@IF@@ @_UNIFORM_CREATEVALUETYPE_@=Object
@@IF@@ @_EXIST:CREATEVALUEISARRAY_@
@@IF@@ @_EXIST:CREATEVALUEPARAMETERINDEX_@
      Object_Access.@_CREATEVALUE_@.Element (0).Set_Ptr (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (@_CREATEVALUEPARAMETERINDEX_@));
@@ELSE@@
      for J in 0 .. @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@_Array_Size - 1 loop
         Object_Access.@_CREATEVALUE_@.Element (J).Set_Ptr (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (J));
      end loop;
@@END_IF@@
@@ELSIF@@ @_EXIST:CREATEVALUEPARAMETERINDEX_@
      Object_Access.@_CREATEVALUE_@.Set_Ptr (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (@_CREATEVALUEPARAMETERINDEX_@));
@@ELSE@@
      Object_Access.@_CREATEVALUE_@.Set_Ptr (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@);
@@END_IF@@
@@ELSE@@
@@IF@@ @_EXIST:CREATEVALUEISARRAY_@
@@IF@@ @_EXIST:CREATEVALUEPARAMETERINDEX_@
      Object_Access.@_CREATEVALUE_@.Element (0).Set_Val (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (@_CREATEVALUEPARAMETERINDEX_@));
@@ELSE@@
      for J in 0 .. @_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@_Array_Size - 1 loop
         Object_Access.@_CREATEVALUE_@.Element (J).Set_Val (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (J));
      end loop;
@@END_IF@@
@@ELSIF@@ @_EXIST:CREATEVALUEPARAMETERINDEX_@
      Object_Access.@_CREATEVALUE_@.Set_Val (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@ (@_CREATEVALUEPARAMETERINDEX_@));
@@ELSE@@
      Object_Access.@_CREATEVALUE_@.Set_Val (@_CREATEVALUEPARAMETERCLASS_@.@_CREATEVALUEPARAMETER_@);
@@END_IF@@
@@END_IF@@
@@END_IF@@
@@END_TABLE@@
      return Object_Ptr;
   end Create_@_CREATEROUTINE_@;

@@END_TABLE@@
   --------------------------------------------
   -- Blob serialization and deserialization --
   --------------------------------------------

   overriding procedure Initialize (Self : in out @_CLASS_@_Type;
                                    Blob : in Safir.Dob.Typesystem.Blob_T) is
      use type Safir.Dob.Typesystem.Blob_T;
   begin
      if Blob = null then
         return;
      end if;

      @_BASECLASS_@.Initialize
        (@_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self), Blob);

@@TABLE@@        
      -- @_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         Safir.Dob.Typesystem.Blob_Operations.Get (Self.@_MEMBER_@_Member.Element (Idx).all,
                                                   Blob,
                                                   @_MEMBER_@_Member_Index,
                                                   Idx);
      end loop;
@@ELSE@@
      Safir.Dob.Typesystem.Blob_Operations.Get (Self.@_MEMBER_@_Member,
                                                Blob,
                                                @_MEMBER_@_Member_Index,
                                                0);
@@END_IF@@

@@END_TABLE@@        
   end Initialize;

   overriding function Calculate_Blob_Size (Self : in @_CLASS_@_Type)
                                            return Safir.Dob.Typesystem.Int_32 is
      Size : Safir.Dob.Typesystem.Int_32;
   begin
      Size :=
        @_BASECLASS_@.Calculate_Blob_Size
          (@_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self)) + Initial_Size;

@@TABLE@@        
      -- @_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         Size := Size + Self.@_MEMBER_@_Member.Element (Idx).Calculate_Blob_Size;
      end loop;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         Size := Size + Self.@_MEMBER_@_Member.Element (Idx).Utf_8_String_Length;
      end loop;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         if not Self.@_MEMBER_@_Member.Element (Idx).Is_Null and then
            Length (Safir.Dob.Typesystem.Instance_Id.Get_Raw_String
                (Safir.Dob.Typesystem.Entity_Id.Get_Instance_Id
                   (Self.@_MEMBER_@_Member.Element (Idx).Get_Val))) > 0 then
            Size := Size + 16 + 4 +
              Safir.Dob.Typesystem.Instance_Id.Utf_8_String_Length
                (Safir.Dob.Typesystem.Entity_Id.Get_Instance_Id
                     (Self.@_MEMBER_@_Member.Element (Idx).Get_Val));
         end if;
      end loop;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         if not Self.@_MEMBER_@_Member.Element (Idx).Is_Null and then
            Length (Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@.Get_Raw_String
                   (Self.@_MEMBER_@_Member.Element (Idx).Get_Val)) > 0 then
            Size := Size + 8 + 4 +
              Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@.Utf_8_String_Length
                     (Self.@_MEMBER_@_Member.Element (Idx).Get_Val);
         end if;
      end loop;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
         if not Self.@_MEMBER_@_Member.Element (Idx).Is_Null then
            Size := Size + Safir.Dob.Typesystem.Int_32 (Self.@_MEMBER_@_Member.Element (Idx).Get_Val.Length) + 4;
         end if;
      end loop;
@@END_IF@@
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      Size := Size + Self.@_MEMBER_@_Member.Calculate_Blob_Size;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
      Size := Size + Self.@_MEMBER_@_Member.Utf_8_String_Length;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id
      if not Self.@_MEMBER_@_Member.Is_Null and then
         Length (Safir.Dob.Typesystem.Instance_Id.Get_Raw_String
             (Safir.Dob.Typesystem.Entity_Id.Get_Instance_Id
                (Self.@_MEMBER_@_Member.Get_Val))) > 0 then
         Size := Size + 16 + 4 +
           Safir.Dob.Typesystem.Instance_Id.Utf_8_String_Length
             (Safir.Dob.Typesystem.Entity_Id.Get_Instance_Id
                  (Self.@_MEMBER_@_Member.Get_Val));
      end if;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id
      if not Self.@_MEMBER_@_Member.Is_Null and then
         Length (Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@.Get_Raw_String
                (Self.@_MEMBER_@_Member.Get_Val)) > 0 then
         Size := Size + 8 + 4 +
           Safir.Dob.Typesystem.@_UNIFORM_MEMBERTYPE_@.Utf_8_String_Length
                  (Self.@_MEMBER_@_Member.Get_Val);
      end if;
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Binary
      if not Self.@_MEMBER_@_Member.Is_Null then
         Size := Size + Safir.Dob.Typesystem.Int_32 (Self.@_MEMBER_@_Member.Get_Val.Length) + 4;
      end if;
@@END_IF@@
@@END_IF@@

@@END_TABLE@@        
      return Size;
   end Calculate_Blob_Size;

   overriding
   procedure Write_To_Blob (Self                : in @_CLASS_@_Type;
                            Blob                : in Safir.Dob.Typesystem.Blob_T;
                            Beginning_Of_Unused : in out Safir.Dob.Typesystem.Blob_T) is
      use Safir.Dob.Typesystem.Object;
   begin
      @_BASECLASS_@.Write_To_Blob
        (@_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self), Blob, Beginning_Of_Unused);

@@TABLE@@        
      -- @_MEMBER_@
@@IF@@ @_EXIST:MEMBERISARRAY_@
      for Idx in 0 .. @_MEMBER_@_Size - 1 loop
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
         Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member.Element (Idx).all,
                                                   Blob,
                                                   Beginning_Of_Unused,
                                                   @_MEMBER_@_Member_Index,
                                                   Idx);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
         if not Self.@_MEMBER_@_Member.Element (Idx).Is_Null and then
           Ada.Strings.Wide_Unbounded.Length (Self.@_MEMBER_@_Member.Element (Idx).Get_Val) > Natural (@_MEMBER_@_Max_String_Length) then
            Throw (Safir.Dob.Typesystem.Illegal_Value_Exception'Identity,
                   "The @_MEMBER_@ member, index" & Safir.Dob.Typesystem.Array_Index'Image (Idx) & ", is longer than what is specified in the dou file");
         end if;
         Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member.Element (Idx).all,
                                                   Blob,
                                                   Beginning_Of_Unused,
                                                   @_MEMBER_@_Member_Index,
                                                   Idx);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id or @_UNIFORM_MEMBERTYPE_@=Binary
         Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member.Element (Idx).all,
                                                   Blob,
                                                   Beginning_Of_Unused,
                                                   @_MEMBER_@_Member_Index,
                                                   Idx);
@@ELSE@@
         Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member.Element (Idx).all,
                                                   Blob,
                                                   @_MEMBER_@_Member_Index,
                                                   Idx);
@@END_IF@@
      end loop;
@@ELSE@@
@@IF@@ @_UNIFORM_MEMBERTYPE_@=Object
      Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member,
                                                Blob,
                                                Beginning_Of_Unused,
                                                @_MEMBER_@_Member_Index,
                                                0);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=String
      if not Self.@_MEMBER_@_Member.Is_Null and then
        Ada.Strings.Wide_Unbounded.Length (Self.@_MEMBER_@_Member.Get_Val) > Natural (@_MEMBER_@_Max_String_Length) then
         Throw (Safir.Dob.Typesystem.Illegal_Value_Exception'Identity,
                "The @_MEMBER_@ member is longer than what is specified in the dou file");
      end if;
      Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member,
                                                Blob,
                                                Beginning_Of_Unused,
                                                @_MEMBER_@_Member_Index,
                                                0);
@@ELSIF@@ @_UNIFORM_MEMBERTYPE_@=Entity_Id or @_UNIFORM_MEMBERTYPE_@=Instance_Id or @_UNIFORM_MEMBERTYPE_@=Channel_Id or @_UNIFORM_MEMBERTYPE_@=Handler_Id or @_UNIFORM_MEMBERTYPE_@=Binary
      Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member,
                                                Blob,
                                                Beginning_Of_Unused,
                                                @_MEMBER_@_Member_Index,
                                                0);
@@ELSE@@
      Safir.Dob.Typesystem.Blob_Operations.Set (Self.@_MEMBER_@_Member,
                                                Blob,
                                                @_MEMBER_@_Member_Index,
                                                0);
@@END_IF@@
@@END_IF@@

@@END_TABLE@@        
   end Write_To_Blob;

   overriding
   function Get_Member (Self   : in @_CLASS_@_Type;
                        Member : in Safir.Dob.Typesystem.Member_Index;
                        Idx    : in Safir.Dob.Typesystem.Array_Index)
                        return Safir.Dob.Typesystem.Container_Base.Container_Base_Access is
   begin
@@IF@@ @_MEMBER'length_@ > 0
@@TABLE@@
@@IF@@ @_TABLE_LINE_@=1
      if Member = @_MEMBER_@_Member_Idx then
@@ELSE@@
      elsif Member = @_MEMBER_@_Member_Idx then
@@END_IF@@
@@IF@@ @_EXIST:MEMBERISARRAY_@
         if Idx >= @_MEMBER_@_Size then
            Throw (Safir.Dob.Typesystem.Illegal_Value_Exception'Identity, "Invalid index");
         end if;
         return Safir.Dob.Typesystem.Container_Base.Container_Base_Access
           (Self.@_MEMBER_@_Member.Element (Idx));
@@ELSE@@
         if Idx /= 0 then
            Throw (Safir.Dob.Typesystem.Software_Violation_Exception'Identity, "Member is not an array");
         end if;
         return Safir.Dob.Typesystem.Container_Base.Container_Base_Access
           (Self.@_MEMBER_@_Member);
@@END_IF@@
@@END_TABLE@@
      else
         return @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self).Get_Member (Member, Idx);
      end if;
@@ELSE@@
      return @_BASECLASS_@.@_REPLACE(.*\./):BASECLASS_@_Type (Self).Get_Member (Member, Idx);
@@END_IF@@
   end Get_Member;

   function Create_Object (Blob : in Safir.Dob.Typesystem.Blob_T)
                           return Safir.Dob.Typesystem.Object.Smart_Pointer'Class is
      Ptr : @_CLASS_@_Access;
      Object_Smart_Ptr : Smart_Pointer;
   begin
      Ptr := new @_CLASS_@_Type;
      Initialize (Ptr.all, Blob);
      Safir.Dob.Typesystem.Object.Internal_Initialize (Object_Smart_Ptr,
                                                       Safir.Dob.Typesystem.Object.Object_Class_Access (Ptr));
      return Object_Smart_Ptr;
   end Create_Object;

   Create_Obj_Callback_Function : constant Safir.Dob.Typesystem.Object_Factory.Create_Object_Callback := Create_Object'Access;

   function Create_Smart_Ptr return Safir.Dob.Typesystem.Object.Smart_Pointer'Class is
      P : Smart_Pointer;
   begin
      return P;
   end Create_Smart_Ptr;

   Create_Smart_Ptr_Callback_Function : constant Safir.Dob.Typesystem.Object_Factory.Create_Smart_Ptr_Callback := Create_Smart_Ptr'Access;
   
begin
@@TABLE@@
@@IF@@ @_EXIST:PARAMETER_@
   @_PARAMETER_@_Parameter_Idx := Safir.Dob.Typesystem.Parameters.Get_Index (Class_Type_Id, To_Unbounded_Wide_String ("@_XMLPARAMETER_@"));
@@END_IF@@
@@END_TABLE@@
   Initial_Size := Safir.Dob.Typesystem.Blob_Operations.Get_Initial_Size (Class_Type_Id);

   Safir.Dob.Typesystem.Object_Factory.Register_Type (Class_Type_Id, Create_Obj_Callback_Function, Create_Smart_Ptr_Callback_Function);

end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=enumeration
@@--
@@-- ENUMERATION
@@--
with Ada.Exceptions;
with Safir.Dob.Typesystem.Operations;
with System.Address_To_Access_Conversions;
pragma Warnings ("D");  -- turn off warnings for implicit dereference

package body @_NAMESPACE_@.@_CLASS_@ is

   procedure Throw (E : Ada.Exceptions.Exception_Id; Message : String := "")
                    renames  Ada.Exceptions.Raise_Exception;

   package Arr_Conv is new System.Address_To_Access_Conversions (Array_Containers.Array_Container);

   function To_Dou_String (Value : Enumeration) return Unbounded_Wide_String is
   begin
      return Safir.Dob.Typesystem.Operations.Get_Enumeration_Value_Name
        (Enumeration_Type_Id, Enumeration'Pos (Value));
   end To_Dou_String;

   function From_Dou_String
     (Value : Unbounded_Wide_String)
      return Enumeration is
   begin
      return Enumeration'Val
        (Safir.Dob.Typesystem.Operations.Get_Enumeration_Value
           (Enumeration_Type_Id, Value));
   end From_Dou_String;

   procedure Check_For_Mismatch
     (The_Checksum : Safir.Dob.Typesystem.Type_Id := Checksum) is

      use Safir.Dob.Typesystem;
   begin
      if The_Checksum /= Checksum then
         Throw (Configuration_Error_Exception'Identity,
                "Type mismatch in type @_NAMESPACE_@.@_CLASS_@. Recompile your application!");
      end if;
   end Check_For_Mismatch;

   -- ==================
   -- Containers package
   -- ==================
   package body Containers is

      ---------------------
      -- Container proxy --
      ---------------------

      function Create_Container_Proxy (Container_Ptr : in Container_Access)
                                      return Container_Proxy is
         Proxy : Container_Proxy;
      begin
         Proxy.Container_Ptr := Container_Ptr;
         return Proxy;
      end Create_Container_Proxy;

      procedure Set_Val (Self  : in Container_Proxy'Class;
                         Value : in Enumeration) is
      begin
         Self.Container_Ptr.all.Set_Val (Value);
      end Set_Val;


      function Get_Val (Self : in Container_Proxy'Class) return Enumeration is
      begin
         return Self.Container_Ptr.all.Get_Val;
      end Get_Val;


      function "=" (Left : in Container_Proxy'Class; Right : in Container_Proxy'Class) return Boolean is
      begin
         return Left.Container_Ptr.all = Right.Container_Ptr.all;
      end "=";


      function "=" (Self : in Container_Proxy'Class; Right : in Enumeration) return Boolean is
      begin
         return Self.Container_Ptr.all = Right;
      end "=";


      function "=" (Left : in Enumeration; Self : in Container_Proxy'Class) return Boolean is
      begin
         return Left = Self.Container_Ptr.all;
      end "=";


      function Is_Null (Self : in Container_Proxy'Class) return Boolean is
      begin
         return Self.Container_Ptr.all.Is_Null;
      end Is_Null;


      procedure Set_Null (Self : in Container_Proxy'Class) is
      begin
         Self.Container_Ptr.all.Set_Null;
      end Set_Null;


      function Is_Changed (Self : in Container_Proxy'Class) return Boolean is
      begin
         return Self.Container_Ptr.all.Is_Changed;
      end Is_Changed;


      procedure Set_Changed (Self : in Container_Proxy'Class;
                             To   : in     Boolean) is
      begin
         Self.Container_Ptr.all.Set_Changed (To);
      end Set_Changed;

      procedure Set_Ordinal (Self  : in Container_Proxy'Class;
                             Value : in Safir.Dob.Typesystem.Enumeration_Value) is
      begin
         Self.Container_Ptr.all.Set_Ordinal (Value);
      end Set_Ordinal;

      function Get_Ordinal (Self : in Container_Proxy'Class)
                         return Safir.Dob.Typesystem.Enumeration_Value is
      begin
         return Self.Container_Ptr.all.Get_Ordinal;
      end Get_Ordinal;

      ---------------
      -- Container --
      ---------------

      procedure Set_Val (Self  : in out Container;
                         Value : in Enumeration) is
      begin
         Check_For_Mismatch;
         Self.Set_Ordinal (Enumeration'Pos (Value));
      end Set_Val;

      function Get_Val (Self : in Container) return Enumeration is
      begin
         Check_For_Mismatch;
         return Enumeration'Val (Self.Get_Ordinal);
      end Get_Val;

      function "=" (Left : in Container; Right : in Container) return Boolean is
         use type Safir.Dob.Typesystem.Enumeration_Value;
      begin
         Check_For_Mismatch;
         if not Left.Is_Null and not Right.Is_Null then
            return Left.Value = Right.Value;
         elsif Left.Is_Null and Right.Is_Null then
            return True;
         else
            return False;
         end if;
      end "=";

      function "=" (Self : in Container; Right : in Enumeration) return Boolean is
         use type Safir.Dob.Typesystem.Enumeration_Value;
      begin
         Check_For_Mismatch;
         return not Self.Is_Null and then Self.Value = Enumeration'Pos (Right);
      end "=";

      function "=" (Left : in Enumeration; Self : in Container) return Boolean is
         use type Safir.Dob.Typesystem.Enumeration_Value;
      begin
         Check_For_Mismatch;
         return not Self.Is_Null and then Self.Value = Enumeration'Pos (Left);
      end "=";

      overriding function Is_Null (Self : in Container) return Boolean is
      begin
         return Self.Is_Null;
      end Is_Null;

      overriding procedure Set_Null (Self : in out Container) is
      begin
         Self.Is_Changed := True;
         Self.Is_Null := True;
      end Set_Null;

      overriding function Is_Changed (Self : in Container) return Boolean is
      begin
         return Self.Is_Changed;
      end Is_Changed;

      overriding procedure Set_Changed (Self : in out Container;
                                        To   : in     Boolean) is
      begin
         Self.Is_Changed := To;
      end Set_Changed;

      overriding procedure Copy (Self : in out Container;
                                 That : in Container_Base_Type'Class) is
      begin
         Self := Container (That);
      end Copy;

      overriding procedure Set_Ordinal (Self  : in out Container;
                                        Value : in Safir.Dob.Typesystem.Enumeration_Value) is

         use Safir.Dob.Typesystem;
      begin
         if Value > Enumeration'Pos (Enumeration'Last) then
            Throw (Illegal_Value_Exception'Identity,
                   "The enumerated type @_NAMESPACE_@.@_CLASS_@ does not have such a value");
         end if;
         Self.Is_Changed := True;
         Self.Is_Null := False;
         Self.Value := Value;
      end Set_Ordinal;

      overriding function Get_Ordinal (Self : in Container) return Safir.Dob.Typesystem.Enumeration_Value is

         use Safir.Dob.Typesystem;
      begin
         if Self.Is_Null then
            Throw (Null_Exception'Identity, "Value is null");
         end if;
         return Self.Value;
      end Get_Ordinal;

      overriding procedure Init (Self       : in out Container;
                                 Value      : in Safir.Dob.Typesystem.Enumeration_Value;
                                 Is_Null    : in Boolean;
                                 Is_Changed : in Boolean) is
         use Safir.Dob.Typesystem;
      begin
         if not Is_Null and then Value > Enumeration'Pos (Enumeration'Last) then
            Throw (Illegal_Value_Exception'Identity,
                   "The enumerated type @_NAMESPACE_@.@_CLASS_@ does not have such a value");
         end if;
         Self.Is_Changed := Is_Changed;
         Self.Is_Null := Is_Null;
         Self.Value := Value;
      end Init;

   end Containers;

   -- ========================
   -- Array containers package
   -- ========================
   package body Array_Containers is

      ---------------------------
      -- Array container proxy --
      ---------------------------

      function Create_Array_Container_Proxy (Array_Container_Ptr : in Array_Container_Access)
                                             return Array_Container_Proxy is
         Proxy : Array_Container_Proxy;
      begin
         Proxy.Array_Container_Ptr := Array_Container_Ptr;
         return Proxy;
      end Create_Array_Container_Proxy;

      function Element (Self : in Array_Container_Proxy'Class; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Proxy is
      begin
         return Containers.Create_Container_Proxy (Self.Array_Container_Ptr.Element (Index));
      end Element;

      function Is_Changed (Self : in Array_Container_Proxy'Class) return Boolean is
      begin
         return Array_Containers.Is_Changed (Self.Array_Container_Ptr.all);
      end Is_Changed;

      procedure Set_Changed (Self : in  Array_Container_Proxy'Class; To   : in  Boolean) is
      begin
         Array_Containers.Set_Changed (Self.Array_Container_Ptr.all, To);
      end Set_Changed;

      ---------------------
      -- Array container --
      ---------------------

      function Element (Self : in Array_Container; Index : in Safir.Dob.Typesystem.Array_Index)
                        return Containers.Container_Access is
         Self_Ptr : constant Arr_Conv.Object_Pointer := Arr_Conv.To_Pointer (Self'Address);
      begin
         return Self_Ptr.Arr (Index)'Access;
      end Element;

      function Is_Changed (Self : in Array_Container) return Boolean is
      begin
         for Idx in Self.Arr'Range loop
            if Self.Arr (Idx).Is_Changed then
               return True;
            end if;
         end loop;
         return False;
      end Is_Changed;

      procedure Set_Changed (Self : in out Array_Container; To : in  Boolean) is
      begin
         for Idx in Self.Arr'Range loop
            Self.Arr (Idx).Set_Changed (To);
         end loop;
      end Set_Changed;

   end Array_Containers;

end @_NAMESPACE_@.@_CLASS_@;
@@ELSIF@@ @_UNITTYPE_@=exception
@@--
@@-- EXCEPTION
@@--
with Safir.Dob.Typesystem.Library_Exceptions;
pragma Elaborate_All (Safir.Dob.Typesystem.Library_Exceptions);

package body @_NAMESPACE_@.@_CLASS_@ is
   procedure Dummy is begin
      null;
   end Dummy;
   use type Safir.Dob.Typesystem.Type_Id;
begin
   Safir.Dob.Typesystem.Library_Exceptions.Register_Exception (@_TYPEID_@, Xception'Identity);
end @_NAMESPACE_@.@_CLASS_@;
@@END_IF@@
@@END_IF@@

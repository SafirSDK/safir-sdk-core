cmake_minimum_required(VERSION 2.6)

PROJECT (dots_generated)

#we need to set up include dirs before including cmake_settings.txt
#since otherwise sdk/include will be before cpp/include in the include path.
INCLUDE_DIRECTORIES(. cpp/include)

INCLUDE($ENV{SAFIR_SDK}/data/build/cmake_settings.txt)
INCLUDE(cmake_depend.txt)

add_custom_command(OUTPUT tags cpp dotnet java ada
  COMMAND echo "This line is intentionally left blank")

add_custom_target(code ALL
  DEPENDS tags)
  
#we want to ensure that a "make" will cause cmake . to be rerun
# so we touch the CMakeLists.txt file to force a regenerate...
add_custom_target(ensure_rebuild ALL
  COMMAND ${CMAKE_COMMAND} -E touch CMakeLists.txt)

#################################
#            C++                #
#################################
if (NOT NO_CXX)

# Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER
# for each source file given in the collection named by SOURCE_VARIABLE_NAME.
function(enable_precompiled_headers PRECOMPILED_HEADER SOURCE_VARIABLE_NAME)
  if(MSVC)
    set(files ${${SOURCE_VARIABLE_NAME}})
    # Generate precompiled header translation unit
    get_filename_component(pch_basename ${PRECOMPILED_HEADER} NAME_WE)
    set(pch_abs ${CMAKE_CURRENT_SOURCE_DIR}/${PRECOMPILED_HEADER})
    set(pch_unity ${CMAKE_CURRENT_BINARY_DIR}/${pch_basename}.cpp)
  endif(MSVC)

  if(MSVC AND REBUILD)
    # Generate precompiled header translation unit
    FILE(WRITE ${pch_unity} "// Precompiled header unity generated by CMake\n")
    FILE(APPEND ${pch_unity} "#include <${pch_abs}>\n")
    set_source_files_properties(${pch_unity}  PROPERTIES COMPILE_FLAGS "/Yc\"${pch_abs}\"")
  endif(MSVC AND REBUILD)

  if(MSVC)
    # Update properties of source files to use the precompiled header.
    # Additionally, force the inclusion of the precompiled header at beginning of each source file.
    foreach(source_file ${files} )
      set_source_files_properties(
        ${source_file}
        PROPERTIES COMPILE_FLAGS
        "/Yu\"${pch_abs}\" /FI\"${pch_abs}\""
      )
    endforeach(source_file)

    # Finally, update the source file collection to contain the precompiled header translation unit
    set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${pch_unity} PARENT_SCOPE)
  endif(MSVC)

endfunction(enable_precompiled_headers)


  FILE(GLOB_RECURSE h_files cpp/*.h)
  ##
  #Build one library for each namespace
  ##
  FOREACH(prefix ${DOTS_NS})

	FILE(GLOB cpp_files cpp/${prefix}*.cpp)
	
        enable_precompiled_headers(precompiled_header_for_cpp.h cpp_files)
	
        ADD_LIBRARY(dots_generated-${prefix}-cpp SHARED ${cpp_files} ${h_files})

        TARGET_LINK_LIBRARIES(dots_generated-${prefix}-cpp ${ACE_LIBRARY})


        # check dependecies and build order
        if(DEFINED DOTS_NS_${prefix})
           SET(DOTS_TMP_NS DOTS_NS_${prefix})
           FOREACH(DOTS_DEPEND ${${DOTS_TMP_NS}})
               add_dependencies(dots_generated-${prefix}-cpp dots_generated-${DOTS_DEPEND}-cpp)
               TARGET_LINK_LIBRARIES(dots_generated-${prefix}-cpp dots_generated-${DOTS_DEPEND}-cpp)          
           ENDFOREACH()
        endif()

	ADD_DEFINITIONS(-DDOTS_GENERATED_CPP_EXPORTS)


	if (NOT MSVC)
	  TARGET_LINK_LIBRARIES(dots_generated-${prefix}-cpp dots_cpp)
        else()
          TARGET_LINK_LIBRARIES(dots_generated-${prefix}-cpp dots_generated-cpp)	
        endif()

	INSTALL(TARGETS dots_generated-${prefix}-cpp
			RUNTIME DESTINATION ${SAFIR_RUNTIME}/bin
			LIBRARY DESTINATION ${SAFIR_RUNTIME}/lib
			ARCHIVE DESTINATION ${SAFIR_SDK}/lib)
	
	INSTALL_DEBUG_INFO(dots_generated-${prefix}-cpp)
  ENDFOREACH()

##
# build main dots_generated-cpp
##
  ADD_LIBRARY(dots_generated-cpp SHARED dll_imports.cpp dll_imports.h)  
  ADD_DEFINITIONS(-DDOTS_GENERATED_CPP_EXPORTS)
  TARGET_LINK_LIBRARIES(dots_generated-cpp ${ACE_LIBRARY})

  if (NOT MSVC)
       TARGET_LINK_LIBRARIES(dots_generated-cpp dots_cpp)
       
       FOREACH(prefix ${DOTS_NS})
           TARGET_LINK_LIBRARIES(dots_generated-cpp dots_generated-${prefix}-cpp)
       ENDFOREACH()

  endif()

  INSTALL(DIRECTORY cpp/include DESTINATION ${SAFIR_SDK}
   		   PATTERN ".svn" EXCLUDE
		   PATTERN "*~" EXCLUDE)

  INSTALL(TARGETS dots_generated-cpp
		RUNTIME DESTINATION ${SAFIR_RUNTIME}/bin
		LIBRARY DESTINATION ${SAFIR_RUNTIME}/lib
		ARCHIVE DESTINATION ${SAFIR_SDK}/lib)
	
  INSTALL_DEBUG_INFO(dots_generated-cpp)


endif()

#################################
#          DOTNET               #
#################################
if (NOT NO_DOTNET)
	find_package(CSharp REQUIRED)
	INCLUDE(CSharpMacros)

        GET_CS_LIBRARY_TARGET_DIR()
        # force build - workaround VS2010
        FILE(REMOVE "${CS_LIBRARY_TARGET_DIR}/dots_generated-dotnet.dll")

	FILE(GLOB cs_files dotnet/*.cs)
	FILE(GLOB cs_meta_files *.cs)

	SET(CS_FLAGS ${COMMON_CS_FLAGS} "-keyfile:${dots_generated_SOURCE_DIR}/dots_generated-dotnet.snk"
									"-r:${SAFIR_RUNTIME}/bin/Safir.Dob.Typesystem.dll")
	ADD_CS_LIBRARY(dots_generated-dotnet "${cs_meta_files};${cs_files}" ALL)


	INSTALL(FILES ${target_DLL} #This is the C# dll
	  DESTINATION ${SAFIR_RUNTIME}/bin)
	  
	INSTALL_CS_DEBUG_INFO()
endif()

#################################
#          JAVA                 #
#################################
if (NOT NO_JAVA)

	find_package(Java REQUIRED)
	INCLUDE(JavaMacros)
        GET_JAR_TARGET_DIR()

        ##
        #Build one library for each namespace
        ##
        FOREACH(prefix ${DOTS_NS})
            set(JAVA_CLASSPATH "")
            SET_JAVA_CLASSPATH(${SAFIR_RUNTIME}/bin/dots_java.jar)
            SET(JAVA_MANIFEST ${dots_generated_SOURCE_DIR}/Manifest.java.txt)

            ##
	    #check manifests for namespace
            ##
            set(NS_FOUND "")
            set(TMP_NS "")
            set(java_files "")

            string(TOLOWER ${prefix} ns_prefix)
            
            file(GLOB_RECURSE java_files java/src/${ns_prefix}/*.java)
            
            # find all namespaces
            file(GLOB_RECURSE TMP_NS ${dots_generated_SOURCE_DIR}/${prefix}*-java.namespace.txt)
            list(LENGTH TMP_NS TMP_NS_LENGTH)
            if (TMP_NS_LENGTH GREATER 0)
	    FOREACH(NS ${TMP_NS})
               set(JAVA_NS "")
               set(tmp_files "")
 
               file(STRINGS ${NS} TMP_STRINGS)
               FOREACH(line ${TMP_STRINGS})
                  string(SUBSTRING ${line} 0 1 first)
                  if (NOT ${first} STREQUAL "#")
                       set(JAVA_NS ${line})
                       string(STRIP ${JAVA_NS} JAVA_NS)
                  endif() 
               ENDFOREACH()

               if (JAVA_NS)
                   get_filename_component(message_prefix ${NS} NAME)
                   string(REPLACE "-java.namespace.txt" "" message_prefix ${message_prefix})
                   message("JAVA: Using ${JAVA_NS} for ${message_prefix}")
                   STRING(REPLACE "." "/" JAVA_NS ${JAVA_NS})       
                   file(GLOB_RECURSE tmp_files java/src/${JAVA_NS}/${ns_prefix}/*.java)
                   list(APPEND java_files "${tmp_files}")
                   set(NS_FOUND TRUE)
               endif()

            ENDFOREACH()            
            endif()

            #dependencies
            if(DEFINED DOTS_NS_${prefix})
              SET(DOTS_TMP_NS DOTS_NS_${prefix})
              FOREACH(DOTS_DEPEND ${${DOTS_TMP_NS}})
                   SET_JAVA_CLASSPATH(dots_generated-${DOTS_DEPEND}-java.jar)
              ENDFOREACH()
            endif()
                      
            # force build - workaround VS2010
            FILE(REMOVE "${JAR_TARGET_DIR}/dots_generated-${prefix}-java.jar")

            SET_JAR_TARGET_DIR_PREFIX(dots_generated-${prefix}-java)
	    ADD_JAR(dots_generated-${prefix}-java "${java_files}" ALL)

            #cmake dependencies - build order
            if(DEFINED DOTS_NS_${prefix})
              SET(DOTS_TMP_NS DOTS_NS_${prefix})
              FOREACH(DOTS_DEPEND ${${DOTS_TMP_NS}})
                   add_dependencies(dots_generated-${prefix}-java dots_generated-${DOTS_DEPEND}-java)
              ENDFOREACH()
            endif()

        ENDFOREACH()

##
# Make main dots_generated-java
##
      SET_JAVA_CLASSPATH(${SAFIR_RUNTIME}/bin/dots_java.jar)
      SET(JAVA_MANIFEST ${dots_generated_SOURCE_DIR}/Manifest.java.txt)

      FOREACH(prefix ${DOTS_NS})
	 list(APPEND java_dirs "${CMAKE_CURRENT_BINARY_DIR}/dots_generated-${prefix}-java_bin")
      ENDFOREACH()

      GET_JAR_TARGET_DIR()
      # force build - workaround VS2010
      FILE(REMOVE "${JAR_TARGET_DIR}/dots_generated-java.jar")

      SET_JAR_TARGET_DIR_PREFIX(dots_generated-java)

      CREATE_JAR(dots_generated-java "${java_dirs}" ALL)

      FOREACH(prefix ${DOTS_NS})
	 add_dependencies(dots_generated-java dots_generated-${prefix}-java)
      ENDFOREACH()

      INSTALL(FILES ${target_JAR}
              DESTINATION ${SAFIR_RUNTIME}/bin)

endif()


#################################
#        ADA                    #
#################################
if (NOT NO_ADA)

# Change camelcase to ADA style
function(string_to_ada_style IN_STR OUT_STR)
        string(REGEX REPLACE "([a-z])([A-Z]+)" "\\1_\\2" TMP_STR "${IN_STR}")
        string(REGEX REPLACE "([A-Z]|[a-z]|[0-9])([A-Z])([a-z]+)" "\\1_\\2\\3" TMP_STR "${TMP_STR}")
        string(REGEX REPLACE "([A-Z]|[a-z])([0-9]+)" "\\1_\\2" TMP_STR "${TMP_STR}")
        string(REGEX REPLACE "([0-9]+)([A-Z]|[a-z])" "\\1_\\2" TMP_STR "${TMP_STR}")
        string(TOLOWER ${TMP_STR} TMP_STR)
        set(${OUT_STR} "${TMP_STR}" PARENT_SCOPE)
endfunction(string_to_ada_style)

            
  ##
  #Build one library for each namespace
  ##
  FOREACH(prefix ${DOTS_NS})
        #message("Build ADA ${prefix}")

        string_to_ada_style(${prefix} CC_prefix)
        #message("${prefix} converted to ADA style ${CC_prefix}.")

        SET(library_name "${CC_prefix}")

        FILE(MAKE_DIRECTORY ada/${CC_prefix})
        FILE(MAKE_DIRECTORY ada/${CC_prefix}/obj ada/${CC_prefix}/lib ada/${CC_prefix}/ali ada/${CC_prefix}/interface )


        FILE(GLOB ads_units RELATIVE ${dots_generated_SOURCE_DIR}/ada ada/${CC_prefix}*.ads)
        FILE(GLOB adb_units RELATIVE ${dots_generated_SOURCE_DIR}/ada ada/${CC_prefix}*.adb)

        # Update the Library_Interface list in dots_generated_ada_library.gpr
        # we take the first item out of the list, and put it last in the resulting
        # variable, without the ending comma character.
        LIST(GET ads_units 0 unit)
        LIST(REMOVE_AT ads_units 0)
        SET(source_files "\n\t\"${unit}\"")
        STRING(REPLACE ".ads" "" unit ${unit})
        STRING(REPLACE "-" "." unit ${unit})
        SET(interface_units "\n\t\"${unit}\"")
        FOREACH(unit ${ads_units})
           SET(source_files "${source_files},\n\t\"${unit}\"")
           STRING(REPLACE ".ads" "" unit ${unit})
           STRING(REPLACE "-" "." unit ${unit})
           SET(interface_units "${interface_units},\n\t\"${unit}\"")
        ENDFOREACH()    

        FOREACH(unit ${adb_units})
           SET(source_files "${source_files},\n\t\"${unit}\"")
        ENDFOREACH()    


	if (WIN32)
	   set(ADA_OUTPUT "${dots_generated_SOURCE_DIR}/ada/${CC_prefix}/lib/libdots_generated_${CC_prefix}_ada.dll")
	elseif (UNIX)
	   set(ADA_OUTPUT "${dots_generated_SOURCE_DIR}/ada/${CC_prefix}/lib/libdots_generated_${CC_prefix}_ada.so")
	endif(WIN32)

        # force build - workaround VS2010
        FILE(REMOVE "${ADA_OUTPUT}")

        #check dependecies between .gpr files
        set(additional_dependecies "")
        set(additional_final_dependecies "")
        if(DEFINED DOTS_NS_${prefix})
           SET(DOTS_TMP_NS DOTS_NS_${prefix})
           FOREACH(DOTS_DEPEND ${${DOTS_TMP_NS}})
                string_to_ada_style(${DOTS_DEPEND} DOTS_ADA_DEPEND)
                set(additional_dependecies "${additional_dependecies}with \"dots_generated_${DOTS_ADA_DEPEND}_ada_library.gpr\";\n")
                set(additional_final_dependecies "${additional_final_dependecies}with \"dots_generated_${DOTS_ADA_DEPEND}_ada.gpr\";\n")
           ENDFOREACH()
        endif()
        
    
        CONFIGURE_FILE (${dots_generated_SOURCE_DIR}/dots_generated_ada_library.gpr_template ${dots_generated_SOURCE_DIR}/ada/dots_generated_${CC_prefix}_ada_library.gpr)

	SET(gnatmake_arguments -XBUILD=${CUSTOM_BUILD_TYPE})
	ADD_CUSTOM_COMMAND(OUTPUT ${ADA_OUTPUT}
			   COMMAND gnatmake ${gnatmake_arguments} -P ${dots_generated_SOURCE_DIR}/ada/dots_generated_${CC_prefix}_ada_library.gpr
                           WORKING_DIRECTORY ${dots_generated_SOURCE_DIR}
			   COMMENT "Building dots_generated_${CC_prefix}_ada using gnatmake" 
                           VERBATIM
                           )

	ADD_CUSTOM_TARGET(dots_generated_${prefix}_ada ALL
                          DEPENDS ${ADA_OUTPUT})
        	
        if(DEFINED DOTS_NS_${prefix})
              SET(DOTS_TMP_NS DOTS_NS_${prefix})
              FOREACH(DOTS_DEPEND ${${DOTS_TMP_NS}})
                   add_dependencies(dots_generated_${prefix}_ada dots_generated_${DOTS_DEPEND}_ada)
              ENDFOREACH()
        endif()

        CONFIGURE_FILE (${dots_generated_SOURCE_DIR}/dots_generated_ada.gpr_template ${dots_generated_SOURCE_DIR}/ada/dots_generated_${CC_prefix}_ada.gpr)
        	
	INSTALL(DIRECTORY ada/${CC_prefix}/interface/
			DESTINATION ${SAFIR_SDK}/ada/dots_generated_${CC_prefix}_ada/interface)
	INSTALL(DIRECTORY ada/${CC_prefix}/ali/
			DESTINATION  ${SAFIR_SDK}/ada/dots_generated_${CC_prefix}_ada/ali)
	INSTALL(FILES ada/dots_generated_${CC_prefix}_ada.gpr
			DESTINATION ${SAFIR_SDK}/ada)
	INSTALL(FILES ada/dots_generated_${CC_prefix}_ada.gpr  # dummy to force uninstall of dots_generated_${CC_prefix}_ada folder.
			DESTINATION ${SAFIR_SDK}/ada/dots_generated_${CC_prefix}_ada)
	if (WIN32)
	   INSTALL(FILES ada/${CC_prefix}/lib/libdots_generated_${CC_prefix}_ada.dll
			DESTINATION ${SAFIR_RUNTIME}/bin)
	elseif (UNIX)
	   INSTALL(FILES ada/${CC_prefix}/lib/libdots_generated_${CC_prefix}_ada.so
			   DESTINATION ${SAFIR_RUNTIME}/lib/)
	endif(WIN32)

  ENDFOREACH()

  ##
  ## Build main dots_generated_ada.gpr
  ##
  set(additional_final_dependecies "")

  FOREACH(prefix ${DOTS_NS})
        string_to_ada_style(${prefix} DOTS_ADA_DEPEND)
        set(additional_final_dependecies "${additional_final_dependecies}with \"dots_generated_${DOTS_ADA_DEPEND}_ada.gpr\";\n")
  ENDFOREACH()
 
  CONFIGURE_FILE (${dots_generated_SOURCE_DIR}/dots_generated_main_ada.gpr_template ${dots_generated_SOURCE_DIR}/ada/dots_generated_ada.gpr)


  INSTALL(FILES ada/dots_generated_ada.gpr
  	  DESTINATION ${SAFIR_SDK}/ada)
  
endif()


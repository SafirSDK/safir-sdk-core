Building and Installing on Linux
--------------------------------

Table of contents
1.     Prerequisites
1.1.    Ubuntu
1.2.    Centos/RHEL
1.2.1.   Add EPEL repository
1.2.2.   Install packages
1.2.3.   Ada templates_parser
1.2.4.   Set up Mono binfmt_misc
2.     Patch Boost
3.     Building
4.     Building example applications
5.     Installing runtimes only
5.1     Ubuntu
5.2     Centos/RHEL


Here are instructions for installing on Centos/RHEL 6.x and Ubuntu 12.04.
They can most probably be adapted to other versions as well, but those are the ones that we run our tests on currently. See http://safir.sourceforge.net for more info.

1. Prerequisites

First of all there are a number of packages that you need to have installed on your system to be able to build all the parts of Safir SDK Core.

1.1. Ubuntu
To install these from the command line "in one go" on Ubuntu/Kubuntu 12.04 or later, run:
   sudo apt-get install libqt4-dev mono-devel mono-gmcs libboost1.48-all-dev libtemplates-parser.*-dev libxmlada.*-dev libiodbc2-dev cmake g++ default-jdk doxygen graphviz make python-tk libexpat1-dev autoconf build-essential

1.2. Centos/RHEL
There are a few more steps needed to set up a Centos/RHEL 6.x machine.

1.2.1. Add EPEL repository
Some of the packages we use are not in the default repositories, so you need to add EPEL to your list of repositories. Follow the instructions on http://fedoraproject.org/wiki/EPEL.

1.2.2. Install packages
sudo yum install cmake28 boost-devel gcc-c++ doxygen graphviz make expat-devel gcc-gnat tkinter mono-devel xmlada-devel java-1.7.0-openjdk-devel qt-devel libiodbc-devel m4 autoconf

1.2.3. Ada templates_parser
Go to http://libre.adacore.com/ and download the AWS source code.
Untar the archive and cd into the new directory.
run "cd templates_parser"
run "make setup build" (see Note 1 if you get an error)
run "sudo make install" (read Note 2 below first)

Note 1: If you get linking errors complaining about -lxmlada_schema do a "sudo ln -s xmlada/relocatable/libxmlada_*.so ." in /usr/lib (or /usr/lib64 if you're using a 64-bit OS).

Note 2: If you do not want the templates_parser installed under /usr/, e.g. you want it under /usr/local you can instead run "sudo make prefix=/usr/local". Then you have to make sure you set up your ADA_PROJECT_PATH to point to the directory where templates_parser.gpr gets put.

1.2.4. Set up Mono binfmt_misc
Add "echo ':CLR:M::MZ::/usr/bin/mono:' > /proc/sys/fs/binfmt_misc/register" to the end of /etc/rc.local

This allows C# executables to be run directly, like "program.exe" instead of "mono program.exe".

2. Patch Boost

Some Boost versions have bugs that we need to patch to be able to run correctly.

Go into the build/patches directory in the Safir SDK Core source code tree and run "cmake ." followed by a "sudo make install" which will cause the files to be installed into the correct places.

If you're not running a boost version that we support this will fail. Either look at the patches and work out what is needed for your version, or contact us for help in creating the patches for your Boost version.

3. Building

First of all you should decide where you want the SDK installed. You have to specify two environment variables, SAFIR_RUNTIME and SAFIR_SDK.
For example you can create a directory "safir" in your home directory, and set the variables to point to "~/safir/runtime" and "~/safir/sdk" respectively.

There are also a few other variables that you need to set up. Here is an example from my .bashrc:

-------------
export SAFIR_RUNTIME=$HOME/safir/runtime
export SAFIR_SDK=$HOME/safir/sdk
export PATH=$PATH:$SAFIR_RUNTIME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SAFIR_RUNTIME/lib
export ADA_PROJECT_PATH=$SAFIR_SDK/ada
export JAVA_HOME=/usr/lib/jvm/default-java/
-------------

The easiest way to build Safir SDK Core is to use the build script (a python script that just uses cmake and/or make to build the components and subsystems).
To run the build script go to the directory that contains the build and src directories, and run 
    build/build.py -f build/sdk_core.txt
This will build the Safir SDK Core components in the correct order and install them into the location specified by SAFIR_SDK and SAFIR_RUNTIME.

With a bit of luck you should now have a working Safir SDK Core installed on your computer.

Try starting "dose_main" and "dope_main" and "sate.exe", to see if everything is working.

4. Building example applications
The directory named "examples" contains some test applications. The simplest way to build these is to use the build script with a different configuration file (run after the build of the SDK as described above):
    build/build.py -f build/example_apps.txt
When this is complete you should have a few new applications installed under $SAFIR_RUNTIME/bin: VehicleAppCpp, VehicleAppCs, VehicleMmiCppQt, VehicleMmiCsWinForms and VehicleAppDb. 
Note: There is also a build script configuration file dob_tests.txt, which builds the Dob test suite.

5. Installing runtimes only
If you have built the SDK on one machine and just want to run it on another without installing all the development tools you need to install some libraries and runtimes to get it to run.

5.1 Ubuntu
Run "sudo apt-get install libboost-.*1.48.0 libgnat-4.6 default-jre-headless libmono-corlib2.0-cil libmono-system2.0-cil"

5.2 Centos/RHEL
Add the EPEL repository, as outlined above.
Run "sudo yum install boost mono-core mono-winforms libgnat"

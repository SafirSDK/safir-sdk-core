Ubuntu/Debian Linux Building and Installing
-------------------------------------------

For the time being we have not provided any prebuilt Safir packages for Ubuntu/Debian based systems so you have to built Safir yourself from source.
 
*Prerequisites*

First of all there are a number of packages that you need to have installed on your system to be able to build all the parts of Safir SDK Core.


The exact package names may vary with your distribution, but these are the names from Ubuntu/Kubuntu 12.4:

libqt4-dev 
mono-devel 
libmono-winforms2.0-cil 
libboost1.48-all-dev
libace-dev
libtemplates-parser11.6-dev
libxmlada4.1-dev
libiodbc2-dev
cmake g++
openjdk-6-jdk
doxygen
graphviz
make
python-tk
libexpat1-dev

To install these from the command line "in one go" on Ubuntu/Kubuntu 12.04 or later, run:
sudo apt-get install libqt4-dev mono-devel libmono-winforms2.0-cil libboost1.48-all-dev libace-dev libtemplates-parser11.6-dev libxmlada4.1-dev libiodbc2-dev cmake g++ openjdk-6-jdk doxygen graphviz make python-tk libexpat1-dev

These packages should cause quite a few extra packages to be installed (like the gnat Ada compiler and a lot more stuff), which is as it should be.

Som Boost versions needs some patches. Also there is a patch for xmlada. The directory "build/patches" contains these patches (along with some patches needed for the Windows platform). There is a CMake file that will automatically install the patches needed for your system.
Go to the "build/patches" directory and do a "cmake ." followed by a "sudo make install" which will cause the files to be installed into the correct places.


*Building*

First of all you should decide where you want the SDK installed. You have to specify two environment variables, SAFIR_RUNTIME and SAFIR_SDK.
For example you can create a directory "safir" in your home directory, and set the variables to point to "~/safir/runtime" and "~/safir/sdk" respectively.

There are also a few other variables that you need to set up. Here is an example from my .bashrc:

-------------
export SAFIR_RUNTIME=$HOME/safir/runtime
export SAFIR_SDK=$HOME/safir/sdk
export PATH=$PATH:$SAFIR_RUNTIME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SAFIR_RUNTIME/lib
export ADA_PROJECT_PATH=$SAFIR_SDK/ada
export JAVA_HOME=/usr/lib/jvm/java-6-openjdk/
-------------

The easiest way to build Safir SDK Core is to use the build script (a python script that just uses cmake and/or make to build the components and subsystems).
To run the build script go to the directory that contains the build and src directories, and run 
    build/build.py -f build/sdk_core.txt
This will build the Safir SDK Core components in the correct order and install them into the location specified by SAFIR_SDK and SAFIR_RUNTIME.

With a bit of luck you should now have a working Safir SDK Core installed on your computer.

Try starting "dose_main" and "dope_main" and "mono $SAFIR_RUNTIME/bin/sate.exe", to see if everything is working.

*Building example applications*
The directory named "examples" contains some test applications. The simplest way to build these is to use the build script with a different configuration file (run after the build of the SDK as described above):
    build/build.py -f build/example_apps.txt
When this is complete you should have a few new applications installed under $SAFIR_RUNTIME/bin: VehicleAppCpp, VehicleAppCs, VehicleMmiCppQt, VehicleMmiCsWinForms and VehicleAppDb. 
Note: There is also a build script configuration file dob_tests.txt, which builds the Dob test suite.
